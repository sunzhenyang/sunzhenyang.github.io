const t=JSON.parse(`{"key":"v-6ef80776","path":"/notes/java/12.%E5%A4%9A%E6%80%81.html","title":"多态","lang":"zh-CN","frontmatter":{"title":"多态","icon":"java","article":true,"sticky":20,"breadcrumb":false,"date":"2023-02-22T00:00:00.000Z","category":["Java"],"tag":["Java"],"description":"多态 允许不同类的对象对同一消息做出不同的响应 可以借由向上转型和动态绑定机制完成; 向上转型实现了将子类对象向上转型为父类类型; 动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法; 分类 编译时多态; 又称设计时多态，方法重载; 运行时多态; 程序运行时动态决定调用哪个方法; 向上转型 语法：父类类型 父类引用 = new 子类类型(参数...","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/java/12.%E5%A4%9A%E6%80%81.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"多态"}],["meta",{"property":"og:description","content":"多态 允许不同类的对象对同一消息做出不同的响应 可以借由向上转型和动态绑定机制完成; 向上转型实现了将子类对象向上转型为父类类型; 动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法; 分类 编译时多态; 又称设计时多态，方法重载; 运行时多态; 程序运行时动态决定调用哪个方法; 向上转型 语法：父类类型 父类引用 = new 子类类型(参数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-22T06:55:56.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-02-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-22T06:55:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多态\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-22T06:55:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1676988511000,"updatedTime":1677048956000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":2}]},"readingTime":{"minutes":2.38,"words":715},"filePathRelative":"notes/java/12.多态.md","localizedDate":"2023年2月22日","excerpt":"","autoDesc":true}`);export{t as data};
