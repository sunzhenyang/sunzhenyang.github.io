const n=JSON.parse(`{"key":"v-96f6649a","path":"/technology/ts_axios/chapter11/instance.html","title":"Axios 实例模块单元测试","lang":"zh-CN","frontmatter":{"title":"Axios 实例模块单元测试","icon":"article","category":"typescript","article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"ts-axios 提供了 axios.create 静态方法，返回一个 instance 实例，我们需要对这个模块做测试。 测试代码编写 test/instance.spec.ts： import axios, { AxiosRequestConfig, AxiosResponse } from '../src/index' import { getAjaxRequest } from './helper' describe('instance', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should make a http request without verb helper', () =&gt; { const instance = axios.create() instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) test('should make a http request', () =&gt; { const instance = axios.create() instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') expect(request.method).toBe('GET') }) }) test('should make a post request', () =&gt; { const instance = axios.create() instance.post('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('POST') }) }) test('should make a put request', () =&gt; { const instance = axios.create() instance.put('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('PUT') }) }) test('should make a patch request', () =&gt; { const instance = axios.create() instance.patch('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('PATCH') }) }) test('should make a options request', () =&gt; { const instance = axios.create() instance.options('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('OPTIONS') }) }) test('should make a delete request', () =&gt; { const instance = axios.create() instance.delete('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('DELETE') }) }) test('should make a head request', () =&gt; { const instance = axios.create() instance.head('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('HEAD') }) }) test('should use instance options', () =&gt; { const instance = axios.create({ timeout: 1000 }) instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.timeout).toBe(1000) }) }) test('should have defaults.headers', () =&gt; { const instance = axios.create({ baseURL: 'https://api.example.com' }) expect(typeof instance.defaults.headers).toBe('object') expect(typeof instance.defaults.headers.common).toBe('object') }) test('should have interceptors on the instance', done =&gt; { axios.interceptors.request.use(config =&gt; { config.timeout = 2000 return config }) const instance = axios.create() instance.interceptors.request.use(config =&gt; { config.withCredentials = true return config }) let response: AxiosResponse instance.get('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200 }) setTimeout(() =&gt; { expect(response.config.timeout).toEqual(0) expect(response.config.withCredentials).toEqual(true) done() }, 100) }) }) test('should get the computed uri', () =&gt; { const fakeConfig: AxiosRequestConfig = { baseURL: 'https://www.baidu.com/', url: '/user/12345', params: { idClient: 1, idTest: 2, testString: 'thisIsATest' } } expect(axios.getUri(fakeConfig)).toBe( 'https://www.baidu.com/user/12345?idClient=1&amp;idTest=2&amp;testString=thisIsATest' ) }) })","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter11/instance.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Axios 实例模块单元测试"}],["meta",{"property":"og:description","content":"ts-axios 提供了 axios.create 静态方法，返回一个 instance 实例，我们需要对这个模块做测试。 测试代码编写 test/instance.spec.ts： import axios, { AxiosRequestConfig, AxiosResponse } from '../src/index' import { getAjaxRequest } from './helper' describe('instance', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should make a http request without verb helper', () =&gt; { const instance = axios.create() instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) test('should make a http request', () =&gt; { const instance = axios.create() instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') expect(request.method).toBe('GET') }) }) test('should make a post request', () =&gt; { const instance = axios.create() instance.post('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('POST') }) }) test('should make a put request', () =&gt; { const instance = axios.create() instance.put('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('PUT') }) }) test('should make a patch request', () =&gt; { const instance = axios.create() instance.patch('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('PATCH') }) }) test('should make a options request', () =&gt; { const instance = axios.create() instance.options('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('OPTIONS') }) }) test('should make a delete request', () =&gt; { const instance = axios.create() instance.delete('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('DELETE') }) }) test('should make a head request', () =&gt; { const instance = axios.create() instance.head('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('HEAD') }) }) test('should use instance options', () =&gt; { const instance = axios.create({ timeout: 1000 }) instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.timeout).toBe(1000) }) }) test('should have defaults.headers', () =&gt; { const instance = axios.create({ baseURL: 'https://api.example.com' }) expect(typeof instance.defaults.headers).toBe('object') expect(typeof instance.defaults.headers.common).toBe('object') }) test('should have interceptors on the instance', done =&gt; { axios.interceptors.request.use(config =&gt; { config.timeout = 2000 return config }) const instance = axios.create() instance.interceptors.request.use(config =&gt; { config.withCredentials = true return config }) let response: AxiosResponse instance.get('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200 }) setTimeout(() =&gt; { expect(response.config.timeout).toEqual(0) expect(response.config.withCredentials).toEqual(true) done() }, 100) }) }) test('should get the computed uri', () =&gt; { const fakeConfig: AxiosRequestConfig = { baseURL: 'https://www.baidu.com/', url: '/user/12345', params: { idClient: 1, idTest: 2, testString: 'thisIsATest' } } expect(axios.getUri(fakeConfig)).toBe( 'https://www.baidu.com/user/12345?idClient=1&amp;idTest=2&amp;testString=thisIsATest' ) }) })"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Axios 实例模块单元测试\\",\\"description\\":\\"ts-axios 提供了 axios.create 静态方法，返回一个 instance 实例，我们需要对这个模块做测试。 测试代码编写 test/instance.spec.ts： import axios, { AxiosRequestConfig, AxiosResponse } from '../src/index' import { getAjaxRequest } from './helper' describe('instance', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should make a http request without verb helper', () =&gt; { const instance = axios.create() instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) test('should make a http request', () =&gt; { const instance = axios.create() instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') expect(request.method).toBe('GET') }) }) test('should make a post request', () =&gt; { const instance = axios.create() instance.post('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('POST') }) }) test('should make a put request', () =&gt; { const instance = axios.create() instance.put('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('PUT') }) }) test('should make a patch request', () =&gt; { const instance = axios.create() instance.patch('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('PATCH') }) }) test('should make a options request', () =&gt; { const instance = axios.create() instance.options('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('OPTIONS') }) }) test('should make a delete request', () =&gt; { const instance = axios.create() instance.delete('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('DELETE') }) }) test('should make a head request', () =&gt; { const instance = axios.create() instance.head('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('HEAD') }) }) test('should use instance options', () =&gt; { const instance = axios.create({ timeout: 1000 }) instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.timeout).toBe(1000) }) }) test('should have defaults.headers', () =&gt; { const instance = axios.create({ baseURL: 'https://api.example.com' }) expect(typeof instance.defaults.headers).toBe('object') expect(typeof instance.defaults.headers.common).toBe('object') }) test('should have interceptors on the instance', done =&gt; { axios.interceptors.request.use(config =&gt; { config.timeout = 2000 return config }) const instance = axios.create() instance.interceptors.request.use(config =&gt; { config.withCredentials = true return config }) let response: AxiosResponse instance.get('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200 }) setTimeout(() =&gt; { expect(response.config.timeout).toEqual(0) expect(response.config.withCredentials).toEqual(true) done() }, 100) }) }) test('should get the computed uri', () =&gt; { const fakeConfig: AxiosRequestConfig = { baseURL: 'https://www.baidu.com/', url: '/user/12345', params: { idClient: 1, idTest: 2, testString: 'thisIsATest' } } expect(axios.getUri(fakeConfig)).toBe( 'https://www.baidu.com/user/12345?idClient=1&amp;idTest=2&amp;testString=thisIsATest' ) }) })\\"}"]]},"headers":[{"level":2,"title":"测试代码编写","slug":"测试代码编写","link":"#测试代码编写","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":1.32,"words":396},"filePathRelative":"technology/ts_axios/chapter11/instance.md","localizedDate":"2023年1月11日","excerpt":"<p><code>ts-axios</code> 提供了 <code>axios.create</code> 静态方法，返回一个 <code>instance</code> 实例，我们需要对这个模块做测试。</p>\\n<h2> 测试代码编写</h2>\\n<p><code>test/instance.spec.ts</code>：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> axios<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> AxiosRequestConfig<span class=\\"token punctuation\\">,</span> AxiosResponse <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'../src/index'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> getAjaxRequest <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./helper'</span>\\n\\n<span class=\\"token function\\">describe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'instance'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">beforeEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">install</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">afterEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">uninstall</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a http request without verb helper'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a http request'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'GET'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a post request'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'POST'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a put request'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'PUT'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a patch request'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">patch</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'PATCH'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a options request'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">options</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'OPTIONS'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a delete request'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'DELETE'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should make a head request'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">head</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'HEAD'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use instance options'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> timeout<span class=\\"token operator\\">:</span> <span class=\\"token number\\">1000</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should have defaults.headers'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> baseURL<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'https://api.example.com'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> instance<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'object'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> instance<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>common<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'object'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should have interceptors on the instance'</span><span class=\\"token punctuation\\">,</span> done <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>config <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      config<span class=\\"token punctuation\\">.</span>timeout <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2000</span>\\n      <span class=\\"token keyword\\">return</span> config\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>config <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      config<span class=\\"token punctuation\\">.</span>withCredentials <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n      <span class=\\"token keyword\\">return</span> config\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">let</span> response<span class=\\"token operator\\">:</span> AxiosResponse\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>res <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      response <span class=\\"token operator\\">=</span> res\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">respondWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n        status<span class=\\"token operator\\">:</span> <span class=\\"token number\\">200</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>config<span class=\\"token punctuation\\">.</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>config<span class=\\"token punctuation\\">.</span>withCredentials<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should get the computed uri'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> fakeConfig<span class=\\"token operator\\">:</span> AxiosRequestConfig <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n      baseURL<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'https://www.baidu.com/'</span><span class=\\"token punctuation\\">,</span>\\n      url<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'/user/12345'</span><span class=\\"token punctuation\\">,</span>\\n      params<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        idClient<span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n        idTest<span class=\\"token operator\\">:</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>\\n        testString<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'thisIsATest'</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getUri</span><span class=\\"token punctuation\\">(</span>fakeConfig<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token string\\">'https://www.baidu.com/user/12345?idClient=1&amp;idTest=2&amp;testString=thisIsATest'</span>\\n    <span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
