<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://codemake.fun/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://codemake.fun/</id>
  <title>Yang&amp;apos;s Blog</title>
  <subtitle>今日事，今日毕！</subtitle>
  <author>
    <name>Yang</name>
    <email>874530670@qq.com</email>
    <uri>https://codemake.fun/</uri>
  </author>
  <icon>https://codemake.fun/assets/icon/logo.png</icon>
  <logo>https://codemake.fun/avatar.png</logo>
  <rights>Copyright by Yang</rights>
  <updated>2023-03-05T14:39:11.981Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://codemake.fun/atom.xml"/>
  <link rel="alternate" href="https://codemake.fun/"/>
  <category term="Java"/>
  <category term="css"/>
  <category term="JavaScript"/>
  <category term="other"/>
  <category term="CSS"/>
  <category term="plugins"/>
  <contributor>
    <name>Yang</name>
    <email>874530670@qq.com</email>
    <uri>https://codemake.fun/</uri>
  </contributor>
  <entry>
    <title type="text">常用语句</title>
    <id>https://codemake.fun/notes/java/999.%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.html</id>
    <link href="https://codemake.fun/notes/java/999.%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.html"/>
    <updated>2023-03-01T09:26:45.000Z</updated>
    <summary type="text">Scanner 接收控制台输入内容 接收数据 方法 | -------------- -------------------- | int 类型 nextInt() | long 类型 nextLong() | float 类型 nextFloat() | double 类型 nextDouble() | String 类型 next() | boo...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Scanner</h2>
<blockquote>
<p>接收控制台输入内容</p>
</blockquote>
<table>
<thead>
<tr>
<th>接收数据</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int</code> 类型</td>
<td>nextInt()</td>
</tr>
<tr>
<td><code>long</code> 类型</td>
<td>nextLong()</td>
</tr>
<tr>
<td><code>float</code> 类型</td>
<td>nextFloat()</td>
</tr>
<tr>
<td><code>double</code> 类型</td>
<td>nextDouble()</td>
</tr>
<tr>
<td><code>String</code> 类型</td>
<td>next()</td>
</tr>
<tr>
<td><code>boolean</code> 类型</td>
<td>nextBoolean()</td>
</tr>
<tr>
<td><code>char</code> 类型</td>
<td><code>s.next().charAt(0)</code></td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 其他</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">运算符</title>
    <id>https://codemake.fun/notes/java/04.%E8%BF%90%E7%AE%97%E7%AC%A6.html</id>
    <link href="https://codemake.fun/notes/java/04.%E8%BF%90%E7%AE%97%E7%AC%A6.html"/>
    <updated>2023-02-28T09:11:56.000Z</updated>
    <summary type="text">表达式由运算符和操作数组成; 按操作数个数运算符可分为：单目运算符、双目运算符、三目运算符; 分类算术运算符： + - * / %（取余） ++（自增） --（自减）; 除法运算时，当分子分母都是整型时，结果为整除后的结果（舍弃小数点后的）。如果需要保留小数点后的内容，则需要分子或分母必须有一个为浮点型; 赋值运算符： = ; 复合赋值运算符...</summary>
    <content type="html"><![CDATA[<!-- more -->
<ul>
<li>表达式由运算符和操作数组成</li>
<li>按操作数个数运算符可分为：单目运算符、双目运算符、三目运算符</li>
</ul>
<h2> 分类</h2>
<ul>
<li>算术运算符：<code>+</code>   <code>-</code>   <code>*</code>   <code>/</code>   <code>%</code>（取余）   <code>++</code>（自增）   <code>--</code>（自减）
<ul>
<li>除法运算时，当分子分母都是整型时，结果为整除后的结果（舍弃小数点后的）。如果需要保留小数点后的内容，则需要分子或分母必须有一个为浮点型</li>
</ul>
</li>
<li>赋值运算符：<code>=</code>
<ul>
<li>复合赋值运算符：<code>+=</code>   <code>-=</code>   <code>*=</code>   <code>/=</code>   <code>%=</code>，不会改变变量本身的数据类型</li>
</ul>
</li>
<li>关系运算符：<code>&gt;</code>   <code>&lt;</code>   <code>&gt;=</code>   <code>&lt;=</code>   <code>==</code>   <code>!=</code>
<ul>
<li>比较结果是一个布尔值
<ul>
<li>数值型之间都可以相互比较，<strong>浮点数与整数进行比较，只要值相等就返回 <code>true</code></strong></li>
<li>整型和字符型之间可以比较，是将整型与字符型的编码值进行比较</li>
<li>字符串不可以和整型、浮点型、字符型进行比较</li>
<li>布尔型不能和其他任何数据类型进行比较</li>
</ul>
</li>
</ul>
</li>
<li>逻辑运算符：<code>&amp;</code>   <code>|</code>   <code>!</code>   <code>&amp;&amp;</code>   <code>||</code>
<ul>
<li><code>&amp;&amp;</code> 和 <code>||</code> 也称作短路运算符，如果第一个表达式的值就能决定表达式最后的结果，运算符右边的表达式就不再进行计算</li>
</ul>
</li>
<li>条件运算符：<code>布尔表达式 ? 表达式1 : 表达式2</code>（三目运算符）</li>
<li>位运算符</li>
</ul>
<h2> 优先级</h2>
<blockquote>
<p>从上到下，优先级 <strong>依次降低</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>()</code></td>
<td style="text-align:center">圆括号</td>
</tr>
<tr>
<td style="text-align:center"><code>!</code>   <code>++</code>   <code>--</code></td>
<td style="text-align:center">逻辑非、自增、自减</td>
</tr>
<tr>
<td style="text-align:center"><code>*</code>   <code>/</code>   <code>%</code></td>
<td style="text-align:center">乘法、除法、取余</td>
</tr>
<tr>
<td style="text-align:center"><code>+</code>   <code>-</code></td>
<td style="text-align:center">加法、减法</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;</code>   <code>&lt;=</code>   <code>&gt;</code>   <code>&gt;=</code></td>
<td style="text-align:center">小于、小于等于、大于、大于等于</td>
</tr>
<tr>
<td style="text-align:center"><code>==</code>   <code>!=</code></td>
<td style="text-align:center">等于、不等于</td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;&amp;</code></td>
<td style="text-align:center">逻辑与</td>
</tr>
<tr>
<td style="text-align:center"><code>||</code></td>
<td style="text-align:center">逻辑或</td>
</tr>
<tr>
<td style="text-align:center"><code>=</code>   <code>+=</code>   <code>-=</code>   <code>*=</code>   <code>/=</code>   <code>%=</code></td>
<td style="text-align:center">赋值运算符、复合赋值运算符</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">流程控制</title>
    <id>https://codemake.fun/notes/java/05.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html</id>
    <link href="https://codemake.fun/notes/java/05.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"/>
    <updated>2023-02-28T09:11:56.000Z</updated>
    <summary type="text">选择结构 ```java if(){} if(){} else{} if(){} else if(){} else if(){} else{} ``` 循环结构break ：跳出当前循环或 switch 结构; continue：跳出本次循环; while 适用于不知道循环次数，只知道满足某个条件继续执行或结束执行时使用 循环变量必须先初始化;...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 选择结构</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 循环结构</h2>
<ul>
<li><code>break</code> ：跳出当前循环或 <code>switch</code> 结构</li>
<li><code>continue</code>：跳出本次循环</li>
</ul>
<h3> while</h3>
<blockquote>
<p>适用于不知道循环次数，只知道满足某个条件继续执行或结束执行时使用</p>
</blockquote>
<ul>
<li>循环变量必须先初始化</li>
<li>循环变量的值必须被改变（否则会死循环）</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> do while</h3>
<blockquote>
<p>适用于不知道循环次数，只知道满足某个条件继续执行或结束执行，并且循环肯定执行一次时使用</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> for</h3>
<blockquote>
<p>三个表达式会被依次执行到，执行顺序固定，适用于循环次数固定的场景</p>
</blockquote>
<ul>
<li>写在小括号内的局部变量只在定义它的大括号内可用</li>
<li>三个表达式均可省略</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 增强型 for 循环</h2>
<blockquote>
<p>主要用于数组和集合</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> switch</h2>
<blockquote>
<p>用于匹配的表达式计算结果只能是 <code>byte、short、int、char、String</code> 中的一种</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">数组</title>
    <id>https://codemake.fun/notes/java/06.%E6%95%B0%E7%BB%84.html</id>
    <link href="https://codemake.fun/notes/java/06.%E6%95%B0%E7%BB%84.html"/>
    <updated>2023-02-28T09:11:56.000Z</updated>
    <summary type="text">相同类型 的数据按顺序组成的一种 引用数据类型 声明 两种声明方式均可 ```java // 数据类型[] 数组名 int[] myIntArray; // 数据类型 数组名[] int myIntArray[]; // 二维数组声明 int[][] intArray; int intArray[][]; int[] intArray[]; ``` ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p><code>相同类型</code> 的数据按顺序组成的一种 <code>引用数据类型</code></p>
</blockquote>
<h2> 声明</h2>
<blockquote>
<p>两种声明方式均可</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 创建</h2>
<ul>
<li>创建时，长度必须指定</li>
<li>会在内存中开辟连续的存储空间</li>
<li><strong>数组名是一个对象，指向数组的第一个元素</strong></li>
</ul>
<h3> 先声明后创建</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 声明时创建</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 初始化</h2>
<blockquote>
<p>声明的同时给数组赋值</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 使用</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 默认值</h2>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th><em>默认值</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>字节型</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>短整型</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
<td>0</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点型</td>
<td>0.0</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点型</td>
<td>0.0</td>
</tr>
<tr>
<td>char</td>
<td>字符型</td>
<td>''</td>
</tr>
<tr>
<td>String</td>
<td>字符串型</td>
<td>null</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔型</td>
<td>false</td>
</tr>
</tbody>
</table>
<h2> 冒泡排序</h2>
<blockquote>
<p>由小到大排列</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-27T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">方法</title>
    <id>https://codemake.fun/notes/java/07.%E6%96%B9%E6%B3%95.html</id>
    <link href="https://codemake.fun/notes/java/07.%E6%96%B9%E6%B3%95.html"/>
    <updated>2023-02-28T09:11:56.000Z</updated>
    <summary type="text">方法是用来解决一类问题的代码的有序组合，是一个功能模块语法格式：访问修饰符 返回类型 方法名(参数列表){ 方法体 }; main：特殊的方法，程序执行的入口; 访问修饰符 方法允许被访问的权限范围，分类如下，详细描述在 面向对象 - 封装 笔记文件里不写修饰符; public：公开的; protected：受保护的; private：私...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>方法是用来解决一类问题的代码的有序组合，是一个功能模块</p>
</blockquote>
<ul>
<li>
<p>语法格式：<strong><code>访问修饰符 返回类型 方法名(参数列表){ 方法体 }</code></strong></p>
</li>
<li>
<p><code>main</code>：特殊的方法，程序执行的入口</p>
</li>
</ul>
<h2> 访问修饰符</h2>
<blockquote>
<p>方法允许被访问的权限范围，分类如下，详细描述在 <code>面向对象 - 封装</code> 笔记文件里</p>
</blockquote>
<ul>
<li>不写修饰符</li>
<li><code>public</code>：公开的</li>
<li><code>protected</code>：受保护的</li>
<li><code>private</code>：私有的</li>
</ul>
<h2> 分类</h2>
<blockquote>
<p>根据方法是否带参数、是否返回值，分为四类</p>
</blockquote>
<h3> 无参无返回</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 无参带返回</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 带参无返回</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 带参带返回</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 参数</h2>
<h3> 传参类型</h3>
<ul>
<li>当参数是基本数据类型时，方法不能修改实际参数的值</li>
<li>当参数是引用类型时，方法通过地址引用改变了实际参数对象的内容
<ul>
<li><code>java</code> 中只存在值传递，对于 <code>基本类型</code>、<code>引用类型</code> 均是如此，因此<strong>方法中对某个传递过来的参数进行赋值操作的时候，均不会影响原来的值</strong>  <a href="https://zhuanlan.zhihu.com/p/388486387" target="_blank" rel="noopener noreferrer">【参考文章】</a></li>
<li>对于引用类型，直接在方法中修改了它的具体属性，外部会发生改变的原因是在 <code>java</code> 中引用类型的值是地址，在方法调用过程中，传递的是一份地址的拷贝，但是原引用和拷贝的引用依旧指向的是堆中的同一份值，因此，这份值做了改变，原来的对象本身就发生了变化</li>
</ul>
</li>
</ul>
<h3> 可变参数</h3>
<blockquote>
<p>允许在调用方法时传入不定长度的参数</p>
<p>实际上是  Java 的一个语法糖，本质上还是基于数组的实现</p>
</blockquote>
<ul>
<li>多个参数时，可变参数要放在参数列表的最后（一个方法中只能有一个可变参数）</li>
<li>当可变参数作为方法参数，方法调用时可以传入0个或多个参数，传入数组也可以。数组作为方法参数，方法调用时只能传入数组</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 重载</h2>
<blockquote>
<p>方法名相同，参数列表不同的方法</p>
</blockquote>
<ul>
<li>同一个作用域下，并且函数名称相同</li>
<li>函数参数 <strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong>，与方法参数名无关</li>
<li>可变参数作为参数的重载方法不会被优先调用</li>
</ul>
<h2> 重写</h2>
<ul>
<li>在子类中定义，重写父类中的方法</li>
<li>方法名，参数列表（类型、个数、顺序）与父类完全一致，与方法参数名无关</li>
<li>方法的返回值和访问修饰符是允许有变化的
<ul>
<li>如果父类方法的返回值是 <code>void</code> 或 基本数据类型，则要求子类方法重写时返回类型与父类完全一致</li>
<li>如果父类方法的返回值是引用类型，则要求子类方法重写时返回类型与父类一致或为父类类型的子类</li>
<li>访问修饰符：子类重写方法的访问修饰符访问范围要大于等与父类的访问范围</li>
</ul>
</li>
<li><code>final</code> 修饰的方法不允许被重写</li>
<li><code>static</code> 修饰的方法
<ul>
<li>加了 <code>@Override</code> 后不允许被重写，不加则被视为子类的静态方法</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-27T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">面向对象</title>
    <id>https://codemake.fun/notes/java/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</id>
    <link href="https://codemake.fun/notes/java/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"/>
    <updated>2023-03-03T01:40:11.000Z</updated>
    <summary type="text">类和对象类是模子，确定对象将会拥有的特征（属性）和行为（方法），是对象的类型; 对象是类的实例表现，是特定类型的数据，声明对象在 栈 中，实例化对象在 堆 中; 一个 Java 文件中可以存在多个类，多个接口，但是只能存在一个 public 修饰的类或接口，且此时文件名需要与 public 修饰的类或者接口同名; 包 命名规范由英文小写字母组成...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 类和对象</h2>
<ul>
<li>类是模子，确定对象将会拥有的特征（属性）和行为（方法），是对象的类型</li>
<li>对象是类的实例表现，是特定类型的数据，声明对象在 <strong>栈</strong> 中，实例化对象在 <strong>堆</strong> 中</li>
<li>一个 Java 文件中可以存在多个类，多个接口，但是只能存在一个 <code>public</code> 修饰的类或接口，且此时文件名需要与 <code>public</code> 修饰的类或者接口同名</li>
</ul>
<h2> 包</h2>
<h3> 命名规范</h3>
<ul>
<li>由英文小写字母组成</li>
<li>创建包：域名倒序 + 模块 + 功能</li>
<li>一个包中不能存在同名类</li>
<li><code>package + 包名</code>：指明该文件中定义的类所在的包，一个 java 文件中只能有一条 <code>package</code> 语句</li>
<li>java 文件中书写顺序：<code>package</code> - <code>import</code> - <code>class</code></li>
<li>导入包：分别以 <code>*</code> 和 指定类名 进行导入，以类名导入优先级最高</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 常用系统包</h3>
<table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>java.lang</code></td>
<td>包含 java 语言基础的类，该包在系统加载时<strong>默认导入</strong></td>
</tr>
<tr>
<td><code>java.util</code></td>
<td>包含 java 语言种常用工具，如：Scanner、Random</td>
</tr>
<tr>
<td><code>java.io</code></td>
<td>包含输入输出相关功能的类，如：File、InputStream</td>
</tr>
</tbody>
</table>
<h2> 构造方法</h2>
<blockquote>
<p>用于生成并初始化对象，针对不同的初始化状态，设置不同参数的构造方法</p>
</blockquote>
<p>格式：<code>访问修饰符 类名(参数列表){ *** }</code></p>
<ul>
<li>方法名与类名相同，包括大小写</li>
<li>没有返回值，也不能用 <code>void</code> 修饰</li>
<li>只能在对象实例化（ <code>new</code> ）时调用，不能通过对象名、类名等其它形式调用</li>
<li>在非构造方法中，智能结合对象实例化操作被调用，不能通过方法名被访问</li>
<li>当没有指定构造方法时，编译系统会自动添加无参无反的构造方法</li>
<li><strong>当有指定构造方法，无论是有参、无参的构造方法，编译器都不会自动添加无参的构造方法</strong></li>
<li>一个类中可以包含多个构造方法，只要满足参数类型、顺序、个数不同即可，也称为 <strong>构造方法重载</strong></li>
<li>多个构造方法之间可以使用 <strong><code>this()</code></strong> 进行调用
<ul>
<li>带参时需按顺序传入设定的参数</li>
<li>调用动作必须在构造函数的第一行</li>
<li>一个构造方法中只能调用一个构造方法</li>
<li>不能在类中普通成员方法内通过 <code>this()</code> 调用构造方法</li>
<li>不能与 <code>super()</code> 共存</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 成员属性默认值</h2>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>字节型</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>短整型</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
<td>0</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点型</td>
<td>0.0</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点型</td>
<td>0.0</td>
</tr>
<tr>
<td>char</td>
<td>字符型</td>
<td>空字符</td>
</tr>
<tr>
<td>String</td>
<td>字符串型</td>
<td>null</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔型</td>
<td>false</td>
</tr>
</tbody>
</table>
<h2> 成员方法</h2>
<blockquote>
<p>根据类型所需任意功能，进行方法设置</p>
</blockquote>
<p>格式：<code>访问修饰符 返回值类型 方法名(参数列表){ *** }</code></p>
<ul>
<li>方法内定义的局部变量只能在方法里使用</li>
<li>方法内不能定义静态成员</li>
<li>不能使用 <code>public</code>、<code>protected</code>、<code>private</code> 修饰</li>
</ul>
<h2> this 关键字</h2>
<ul>
<li>代表当前对象本身，可以理解为：指向当前对象的一个引用</li>
<li>可用于调用成员属性、成员方法、构造方法，也可以当做参数进行方法传参以及方法传值</li>
<li>大部分时候，类的方法中访问成员属性时无需使用 <code>this</code>，但如果方法里存在局部变量和成员属性同名，但程序又需要在该方法里访问成员属性时，则必须使用 <code>this</code> 进行调用</li>
<li>类的成员方法访问同类中其他成员方法时，<code>this</code> 关键字可加可不加，效果相同</li>
<li>静态方法中不可使用 <code>this</code></li>
</ul>
<h2> static 关键字</h2>
<h3> 静态成员</h3>
<blockquote>
<p>被 <code>static</code> 修饰的成员变量，通常被称为静态成员、静态属性、类成员、全局属性等，方便在没有创建对象的情况下进行某些操作</p>
</blockquote>
<ul>
<li>
<p>属于整个类，由类进行维护，仅在类初次加载时会被初始化，在类销毁时回收</p>
</li>
<li>
<p>通过该类实例化的所有对象都共享类中的静态资源，任一对象中静态资源的修改都将影响所有对象</p>
</li>
<li>
<p>由于静态成员在类加载期间就已经完成初始化，存储在 Java Heap（JDK7.0 之前存储在方法区）中静态存储区，因此优先于对象而存在，可以通过类名和对象名两种方式访问</p>
<ul>
<li><code>类.成员</code>（推荐）</li>
<li><code>对象.成员</code></li>
</ul>
</li>
<li>
<p>可以将频繁调用的公共信息、期望加快运行效率的成员设置为静态。但需注意，由于其生命周期长，即资源占用周期长，要慎用。</p>
</li>
</ul>
<h3> 静态方法</h3>
<blockquote>
<p>被 <code>static</code> 修饰的成员方法，通常被称为静态方法、类方法、全局方法等</p>
</blockquote>
<ul>
<li>与静态成员类似，静态方法属于整个类，由类进行维护，优先对象而存在，因此可以通过类名和对象名两种方式访问</li>
<li>静态方法中不能直接访问同一个类中的非静态成员，只能直接调用一个类中的静态成员</li>
<li>不允许在方法内部定义静态局部变量</li>
<li>静态方法中不能使用 <code>this</code></li>
<li>非静态方法可以通过 <code>类名.成员法</code> 或 <code>成员</code> 或 <code>this.成员</code> 的方式访问类内静态成员/静态方法</li>
<li>应用 <code>this.静态成员/静态方法</code> 时会出现警告，但不影响程序运行</li>
</ul>
<h2> 代码块</h2>
<blockquote>
<p>执行优先级：<code>静态代码块 &gt; 构造代码块 &gt; 构造方法</code></p>
</blockquote>
<h3> 普通代码块</h3>
<blockquote>
<p>定义在方法内部，用 <code>{}</code> 括起来的代码段</p>
</blockquote>
<ul>
<li>可以在方法中出现多次，按顺序在方法调用时执行，作用域独立</li>
<li><strong>适用于在方法内进行代码功能拆分</strong></li>
</ul>
<h3> 构造代码块</h3>
<blockquote>
<p>定义在类内部，没有被 <code>static</code> 修饰的，用 <code>{}</code> 括起来的代码段</p>
</blockquote>
<ul>
<li>可以在类中出现多次，按顺序在每个对象实例化时执行</li>
<li><strong>运行顺序（由早到晚）：<code>静态代码块</code>  <code>构造代码块</code>  <code>构造方法</code></strong></li>
<li>可以在构造代码块中直接操作静态和非静态成员</li>
<li><strong>多适用于类中每个对象产生时都需要执行的功能封装。与构造方法的区别在于，构造方法是在 <code>new</code> 执行时有选择性的调用带参或者无参构造，而构造代码块则是在每个对象实例化时都一定会执行</strong></li>
</ul>
<h3> 静态代码块</h3>
<blockquote>
<p>被 <code>static</code> 修饰的，定义在类内部，用 <code>{}</code> 括起来的代码段</p>
</blockquote>
<ul>
<li>只能出现在类内，不能出现在方法内</li>
<li>可以出现多次，按顺序在类加载时执行</li>
<li>无论该类实例化多少对象，只执行一次</li>
<li>不能在静态代码块中声明静态成员，可以声明非静态成员，静态代码块中声明的成员，在外部无法访问</li>
<li>不能在静态代码块中直接对非静态成员赋值</li>
<li><strong>基于性能优化的考量，多适用于需要在项目启动时执行一次的场景，比如项目整体资源加载等</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 抽象类</h2>
<h3> 描述</h3>
<ul>
<li>
<p>为子类提供一个公共类型，封装子类中的重复内容（成员变量和方法）</p>
</li>
<li>
<p>抽象类不能实例化，只能通过引用指向子类实例（向上转型）</p>
</li>
<li>
<p>含有抽象方法的类一定是抽象类，但是抽象类中可以没有抽象方法</p>
</li>
<li>
<p>一个类继承抽象类之后，必须实现其所有的抽象方法，否则也需要设置为抽象类，不同子类对父类的抽象方法可以有不同的实现</p>
</li>
<li>
<p>子类只能通过 <code>extends</code> 继承一个抽象父类</p>
</li>
<li>
<p>抽象类中的静态成员和方法可以被子类继承应用</p>
</li>
<li>
<p>类中抽象方法必须加 <code>abstract</code> 关键字</p>
</li>
<li>
<p>抽象方法支持 <code>public</code> 、<code>protected</code> 和默认访问权限</p>
</li>
<li>
<p>可借由父子关系限制子类设计的随意性，在一定程度上避免了无意义父类的实例化</p>
</li>
<li>
<p>应用场景：某个父类只知道其子类应该包含怎样的方法，但无法知道子类如何实现这些方法</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 抽象方法</h3>
<ul>
<li>
<p>抽象方法必须定义在抽象类中</p>
</li>
<li>
<p>抽象方法不能有方法体</p>
</li>
<li>
<p>子类必须重写父类抽象方法（如果不想重写父类方法，则需要将子类也设置为抽象类）</p>
</li>
<li>
<p>抽象方法不能使用 <code>static</code>、<code>final</code>、<code>private</code> 修饰</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 基本原则（SOLID）</h2>
<h3> 单一职责原则（SRP）</h3>
<blockquote>
<p>一个类应该只有一个发生变化的原因</p>
</blockquote>
<p>一个类（大到模块、小到方法）承担的职责越多，被复用的可能性就越小，而且当一个类承担的职责过多，就相当于把这些职责耦合在一起，当其中一个职责变化时，可能会影响其他职责的运作，因此要将这些职责进行分离，将不同的职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变，则可将它们封装在同一类中。</p>
<h3> 开放封闭原则（OCP）</h3>
<h3> 里氏替换原则（LSP）</h3>
<h3> 接口分离原则（ISP）</h3>
<h3> 依赖倒置原则（DIP）</h3>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">封装</title>
    <id>https://codemake.fun/notes/java/09.%E5%B0%81%E8%A3%85.html</id>
    <link href="https://codemake.fun/notes/java/09.%E5%B0%81%E8%A3%85.html"/>
    <updated>2023-03-01T09:26:45.000Z</updated>
    <summary type="text">将类的某些信息隐藏在类内部，不允许外部程序直接访问 特点隐藏对象的信息，留出访问的接口，只能通过规定的方法访问和操作数据; 隐藏类的实例细节，方便修改和实现; 修饰符private：私有的，只允许在本类中进行访问; 默认：允许在当前类、同包子类/同包非子类访问，跨包子类/跨包非子类不允许访问; protected：受保护的， 允许在本类、同包...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>将类的某些信息隐藏在类内部，不允许外部程序直接访问</p>
</blockquote>
<h2> 特点</h2>
<ul>
<li>隐藏对象的信息，留出访问的接口，只能通过规定的方法访问和操作数据</li>
<li>隐藏类的实例细节，方便修改和实现</li>
</ul>
<h2> 修饰符</h2>
<ul>
<li><code>private</code>：私有的，只允许在本类中进行访问</li>
<li><code>默认</code>：允许在当前类、同包子类/同包非子类访问，跨包子类/跨包非子类不允许访问</li>
<li><code>protected</code>：受保护的， 允许在本类、同包子类/同包非子类、跨包子类进行访问，跨包非子类不允许</li>
<li><code>public</code>：共有的，允许在任意位置访问</li>
</ul>
<table>
<thead>
<tr>
<th>访问修饰符</th>
<th style="text-align:center">本类</th>
<th style="text-align:center">同包</th>
<th style="text-align:center">子类</th>
<th style="text-align:center">其他</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>private</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td><code>默认</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td><code>protected</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td><code>public</code></td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
<td style="text-align:center">✅</td>
</tr>
</tbody>
</table>
<h2> 实现步骤</h2>
<ol>
<li>
<p>修改属性的可见性（访问修饰符）</p>
</li>
<li>
<p>创建 <code>getter/setter</code> 方法（设为 public 用于属性的读写）</p>
</li>
<li>
<p>在 <code>getter/setter</code> 方法中加入属性控制语句（对属性值的合法性进行判断）</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">继承</title>
    <id>https://codemake.fun/notes/java/10.%E7%BB%A7%E6%89%BF.html</id>
    <link href="https://codemake.fun/notes/java/10.%E7%BB%A7%E6%89%BF.html"/>
    <updated>2023-02-28T09:11:56.000Z</updated>
    <summary type="text">继承 一种类与类之间的关系，使用已存在的类的定义作为基础建立新类，新类（子类、派生类）的定义可以增加新的数据或新的功能，也可以用父类（基类）的功能，但不能选择性的继承父类子类会继承父类所有 public 类型的实例变量和方法，但不会继承父类所有的 private 类型变量和方法; 初始化顺序 父类静态成员 &amp;gt; 子类静态成员 &amp;gt; 父类对象构造 &amp;gt; ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h4> 继承</h4>
<blockquote>
<p>一种类与类之间的关系，使用已存在的类的定义作为基础建立新类，新类（子类、派生类）的定义可以增加新的数据或新的功能，也可以用父类（基类）的功能，但<strong>不能选择性的继承父类</strong></p>
</blockquote>
<ul>
<li>子类会继承父类所有 <code>public</code> 类型的实例变量和方法，但不会继承父类所有的 <code>private</code> 类型变量和方法</li>
</ul>
<h5> 初始化顺序</h5>
<blockquote>
<p>父类静态成员 &gt; 子类静态成员 &gt; 父类对象构造 &gt; 子类对象构造</p>
<p>访问修饰符不影响成员加载顺序，跟书写位置有关</p>
</blockquote>
<h5> 特点</h5>
<ul>
<li>利用代码复用</li>
<li>缩短开发周期</li>
<li>单继承：子类只能继承一个父类</li>
<li>父类的私有成员子类不可继承</li>
<li>父类的构造方法不允许被继承，不允许被重写</li>
<li>子类构造方法默认调用父类的无参构造</li>
</ul>
<h5> 格式</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> Super</h5>
<blockquote>
<p>父类对象的引用</p>
</blockquote>
<ul>
<li>调用父类可访问的属性</li>
<li>调用父类方法</li>
<li>调用父类指定构造方法，要放在子类构造方法的第一行</li>
<li>子类的构造过程中必须调用其父类的构造方法</li>
<li>如果子类的构造方法中没有显示标注，则系统默认调用父类的无参构造方法</li>
<li>不能在静态方法中使用</li>
<li>不能与 <code>this()</code> 共存</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> final 关键字</h5>
<ul>
<li>修饰类：表示该类不允许被继承，<code>public</code> <code>final</code> 关键字顺序可颠倒
<ul>
<li><code>public final class Animal{}</code></li>
</ul>
</li>
<li>修饰类方法：表示该方法不允许被子类重写，不能用来修饰构造方法
<ul>
<li><code>public final void eat(){}</code></li>
</ul>
</li>
<li>修饰方法内局部变量：只要在具体使用之前进行赋值即可，一旦赋值不允许被修改
<ul>
<li><code>final int num; num = 10;</code></li>
</ul>
</li>
<li>修饰内部成员属性：若定义时未被初始化，则只能在构造函数或构造代码块中赋值
<ul>
<li><code>private final String name;</code></li>
</ul>
</li>
<li>修饰对象，对象的引用不可变，但对象的属性值可变</li>
<li>可配合 <code>static</code> 使用修饰方法和变量
<ul>
<li><code>public static final int num = 10;</code></li>
<li>只需要加载一次后续不需要修订的配置信息</li>
<li><code>final</code> 修饰的静态变量值必须在声明或静态初始化程序中赋值</li>
</ul>
</li>
<li>可提高性能，但会降低可扩展性</li>
</ul>
<h5> Object 类</h5>
<ul>
<li>
<p>是多有类的父类</p>
</li>
<li>
<p>一个类没有使用 extends 关键字明确标识继承关系，则默认继承 Object 类（包括数组）</p>
</li>
<li>
<p>每个类都可以使用 Object 类中定义的方法</p>
</li>
</ul>
<h5> 注解</h5>
<blockquote>
<p>可以声明包、类、属性、方法、局部变量、方法参数等的前面，用来对这些元素进行说明、注释</p>
</blockquote>
<ul>
<li>按运行机制分类
<ul>
<li>源码注解：只在源码阶段保留，在编译阶段会被丢弃
<ul>
<li><code>@Override</code>：标注重写父类方法</li>
</ul>
</li>
<li>编译时注解：在编译时期保留，在加载 class 文件时会被丢弃
<ul>
<li><code>@NotNull</code>：空值检查</li>
</ul>
</li>
<li>运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解
<ul>
<li><code>@Autowired</code>：依赖注入，自动将外部传入的数据加载进去</li>
</ul>
</li>
</ul>
</li>
<li>按来源分类
<ul>
<li>来自 JDK 的注解</li>
<li>来自第三方的注解</li>
<li>自定义的注解</li>
</ul>
</li>
</ul>
<h6> 元注解</h6>
<blockquote>
<p>定义注解的注解，对注解进行标注</p>
</blockquote>
<ul>
<li><code>@target</code></li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">多态</title>
    <id>https://codemake.fun/notes/java/11.%E5%A4%9A%E6%80%81.html</id>
    <link href="https://codemake.fun/notes/java/11.%E5%A4%9A%E6%80%81.html"/>
    <updated>2023-02-28T09:11:56.000Z</updated>
    <summary type="text">多态 允许不同类的对象对同一消息做出不同的响应可以借由向上转型和动态绑定机制完成; 向上转型实现了将子类对象向上转型为父类类型; 动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法; 分类编译时多态; 又称设计时多态，方法重载; 运行时多态; 程序运行时动态决定调用哪个方法; 向上转型语法：父类类型 父类引用 = new 子...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h4> 多态</h4>
<blockquote>
<p>允许不同类的对象对同一消息做出不同的响应</p>
</blockquote>
<ul>
<li>可以借由向上转型和动态绑定机制完成</li>
<li>向上转型实现了将子类对象向上转型为父类类型</li>
<li>动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法</li>
</ul>
<h5> 分类</h5>
<ul>
<li>编译时多态
<ul>
<li>又称设计时多态，方法重载</li>
</ul>
</li>
<li>运行时多态
<ul>
<li>程序运行时动态决定调用哪个方法</li>
</ul>
</li>
</ul>
<h5> 向上转型</h5>
<ul>
<li>
<p>语法：<code>父类类型 父类引用 = new 子类类型(参数)</code></p>
</li>
<li>
<p>又称隐式转型、自动转型</p>
</li>
<li>
<p>父类引用指向子类实例，也表示子类对象可以赋值给父类的对象</p>
</li>
<li>
<p>只能调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法</p>
</li>
<li>
<p>是安全的，因为任何子类都继承并接受了父类的非私有成员方法</p>
</li>
<li>
<p>应用场景：多适用于有多个同父子类共同应用的场景，此时，可以借由父类引用，根据实际需要，转型为特定的子类对象实现多态</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 向下转型</h5>
<ul>
<li>在某些资料中也被叫做 强制类型转换</li>
<li>必须转换为原始类型，不允许转换成非原始类型</li>
<li>将子类的引用指向父类对象，此处必须进行强制类型转换</li>
<li>可以调用子类独有的方法</li>
<li>使用场景：一般用来重新获得因为向上转型而丢失的子类特性而存在，因此通常向下转型前需要先进行向上转型，向下转型通常也会结合 <code>instanceof</code> 一起应用，在灵活运用多态的基础上，同时兼顾子类的独有性，相较于直接创建子类实例，提高了代码的灵活性</li>
</ul>
<h5> 绑定机制</h5>
<ul>
<li>将一个方法调用同一个方法所在的类连接到一起，Java 中存在静态绑定和动态绑定。</li>
<li>静态绑定：指在程序运行之前进行绑定（由编译器和链接程序完成的）,也叫前期绑定</li>
<li>动态绑定：指在程序运行期间由 JVM 根据对象的类型自动的判断应该调用哪个方法，也叫后期绑定</li>
</ul>
<h5> instanceof 操作符</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">设计模式</title>
    <id>https://codemake.fun/notes/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</id>
    <link href="https://codemake.fun/notes/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
    <updated>2023-03-05T14:27:41.000Z</updated>
    <summary type="html"><![CDATA[<p>设计模式测试页面</p>
]]></summary>
    <content type="html"><![CDATA[<p>设计模式测试页面</p>
<!-- more -->
<p>设计模式
设计模式
设计模式
设计模式
设计模式
设计模式</p>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">pointer-events</title>
    <id>https://codemake.fun/fe/css/knowledge/08.pointer-events.html</id>
    <link href="https://codemake.fun/fe/css/knowledge/08.pointer-events.html"/>
    <updated>2023-02-26T13:11:37.000Z</updated>
    <summary type="text">【文档地址】 (https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events) 【参考文章】 (https://juejin.cn/post/7171765872900440078) 常用值 值 描述 | ------ ----------------------------------...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events" target="_blank" rel="noopener noreferrer">【文档地址】</a> <a href="https://juejin.cn/post/7171765872900440078" target="_blank" rel="noopener noreferrer">【参考文章】</a></p>
</blockquote>
<h2> 常用值</h2>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>auto</code></td>
<td>与 <code>pointer-events</code> 属性未指定时的表现效果相同</td>
</tr>
<tr>
<td><code>none</code></td>
<td>当一个元素设置 <code>pointer-events: none</code> 时，浏览器会忽略这个元素上的鼠标事件，直接将事件作用在点击区域下方的元素上</td>
</tr>
</tbody>
</table>
<h2> 实例</h2>
<h3> 穿透遮挡物</h3>
<blockquote>
<p>当点击 <code>span</code> 元素时，并不会触发 <code>span</code> 元素的点击事件，而是穿透到下方的 <code>input</code> 元素上并使其聚焦</p>
</blockquote>

<h3> 防止连续提交</h3>
<blockquote>
<p>为按钮设置  <code>pointer-events: none</code> 防止连续提交</p>
</blockquote>

]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="css"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-25T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">数据类型</title>
    <id>https://codemake.fun/notes/java/02.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</id>
    <link href="https://codemake.fun/notes/java/02.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">分类 基本数据类型; 数值型; 整数类型; byte：字节型; short：短整型; int：整型; long：长整型，以大写的或小写的（L/l）结尾，未加 L 被视为 int; 浮点类型; float：单精度浮点型，以大写的或小写的（F/f）结尾; double：双精度浮点型，浮点型字面值默认为 double 类型; 字符型(ch...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 分类</h2>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317115821602.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>
<p>基本数据类型</p>
<ul>
<li>数值型
<ul>
<li>整数类型
<ul>
<li>byte：字节型</li>
<li>short：短整型</li>
<li>int：整型</li>
<li>long：长整型，以大写的或小写的（L/l）结尾，未加 L 被视为 int</li>
</ul>
</li>
<li>浮点类型
<ul>
<li>float：单精度浮点型，以大写的或小写的（F/f）结尾</li>
<li>double：双精度浮点型，浮点型字面值默认为 double 类型</li>
</ul>
</li>
</ul>
</li>
<li>字符型(char)</li>
<li>布尔型(boolean)</li>
</ul>
</li>
<li>
<p>引用数据类型</p>
<ul>
<li>
<p>字符串(String)</p>
</li>
<li>
<p>类(class)</p>
</li>
<li>
<p>接口(interface)</p>
</li>
<li>
<p>数组</p>
</li>
</ul>
</li>
</ul>
<h2> 空间占用</h2>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>字节</th>
<th>位</th>
<th>最小范围</th>
<th>最大范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>字节型</td>
<td>1</td>
<td>8</td>
<td>-2^7</td>
<td>2^7-1</td>
</tr>
<tr>
<td>short</td>
<td>短整型</td>
<td>2</td>
<td>16</td>
<td>-2^15</td>
<td>2^15-1</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
<td>4</td>
<td>32</td>
<td>-2^31</td>
<td>2^31-1</td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
<td>8</td>
<td>64</td>
<td>-2^63</td>
<td>2^63-1</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点型</td>
<td>4</td>
<td>32</td>
<td>-3.40E+38</td>
<td>3.40E+38</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点型位有效数字）</td>
<td>8</td>
<td>64</td>
<td>-1.79E+308</td>
<td>1.79E+308</td>
</tr>
<tr>
<td>char</td>
<td>字符型</td>
<td>2</td>
<td>16</td>
<td>0</td>
<td>65535</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔型</td>
<td>1</td>
<td>8</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2> 字面值</h2>
<ul>
<li>整型字面值
<ul>
<li>二进制(BIN)</li>
<li>十进制(DEC)</li>
<li>八进制(OCT)：以 0 开头，包括 0-7 的数字(例：037、056)</li>
<li>十六进制(HEX)：以 0x 或 0X 开头，包括 0-9 的数字，及字母 a-f(例：0x12、0xabcf)
<ul>
<li>也可以是 A-F，a 表示数字 10，以此类推</li>
<li>后面加 <code>L</code> 表示长整型数据</li>
</ul>
</li>
</ul>
</li>
<li>浮点型字面值
<ul>
<li>float 类型需要在字面值后加 <code>f</code> 或 <code>F</code></li>
<li>默认情况下表示 double 类型，也可在字面值后加 <code>d</code> 或 <code>D</code></li>
</ul>
</li>
<li>字符型字面值
<ul>
<li>用单引号内的单个字符表示('a'、'b'、'c'、'$')</li>
<li>值可以是 <a href="/notes/other/encode.html#ascll-%E7%A0%81" target="blank">ASCLL码</a> 的编号
<ul>
<li>如果字面值超出 char 类型所表示的数值范围，需要进行强制类型转换</li>
</ul>
</li>
</ul>
</li>
<li>布尔型字面值
<ul>
<li>true</li>
<li>false</li>
</ul>
</li>
<li>字符串字面值
<ul>
<li>双引号引起来的 0 个或多个字符</li>
</ul>
</li>
</ul>
<h2> 基本数据类型变量的存储</h2>
<ul>
<li>按作用范围分类
<ul>
<li>类级</li>
<li>对象实例级</li>
<li>方法级(局部变量)
<ul>
<li>存储在 <strong>栈</strong> 中</li>
</ul>
</li>
<li>块级</li>
</ul>
</li>
</ul>
<h2> 类型转换</h2>
<h3> 自动(隐式)类型转换</h3>
<blockquote>
<p>下图箭头相反方向均需要强制类型转换</p>
</blockquote>
<ul>
<li><code>byte</code>、<code>short</code>、<code>char</code> 三种类型变量之间随意组合做运算，结果均为 <code>int</code> 类型</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20201215161030045.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 强制类型转换</h3>
<blockquote>
<p>如果 A 类型的数据表示范围比 B 类型大，则将 A 类型的值赋值给 B 类型，需要强制类型转换</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-23T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">常量与变量</title>
    <id>https://codemake.fun/notes/java/03.%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F.html</id>
    <link href="https://codemake.fun/notes/java/03.%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">标识符 命名规则可以由字母、数字、下划线和美元符($)组成; 不能以数字开头; 严格区分大小写; 不能是 Java 关键字和保留字（ goto、const ）; 不能包含空格; 命名最好有意义，能反映出其作用; 关键字 abstract boolean break byte case catch | --------- --------- ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 标识符</h2>
<h3> 命名规则</h3>
<ul>
<li>可以由字母、数字、下划线和美元符($)组成</li>
<li>不能以数字开头</li>
<li>严格区分大小写</li>
<li>不能是 Java 关键字和保留字（ goto、const ）</li>
<li>不能包含空格</li>
<li>命名最好有意义，能反映出其作用</li>
</ul>
<h3> 关键字</h3>
<table>
<thead>
<tr>
<th>abstract</th>
<th>boolean</th>
<th>break</th>
<th>byte</th>
<th>case</th>
<th>catch</th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td>class</td>
<td>continue</td>
<td>default</td>
<td>do</td>
<td>double</td>
</tr>
<tr>
<td>else</td>
<td>extends</td>
<td>false</td>
<td>final</td>
<td>finally</td>
<td>float</td>
</tr>
<tr>
<td>for</td>
<td>if</td>
<td>implements</td>
<td>import</td>
<td>native</td>
<td>int</td>
</tr>
<tr>
<td>interface</td>
<td>long</td>
<td>instanceof</td>
<td>new</td>
<td>null</td>
<td>package</td>
</tr>
<tr>
<td>private</td>
<td>protected</td>
<td>public</td>
<td>return</td>
<td>short</td>
<td>static</td>
</tr>
<tr>
<td>super</td>
<td>switch</td>
<td>synchronized</td>
<td>this</td>
<td>throw</td>
<td>throws</td>
</tr>
<tr>
<td>transient</td>
<td>true</td>
<td>try</td>
<td>void</td>
<td>volatile</td>
<td>while</td>
</tr>
</tbody>
</table>
<h2> 变量</h2>
<ul>
<li>变量没有默认值，只初始化之前使用会报错</li>
<li>同一个作用域内不可声明两个同名变量</li>
</ul>
<h3> 命名规则</h3>
<ul>
<li>满足标识符命名规则</li>
<li>符合驼峰命名法规范</li>
<li>尽量简单，做到见名知意</li>
<li>长度没有限制</li>
</ul>
<h3> 类的命名规则</h3>
<ul>
<li>满足 Pascal（首字母总是要大写）命名规范</li>
</ul>
<h3> 定义变量</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常量</h2>
<ul>
<li>名称全部用大写字母</li>
<li>多个单词中间用下划线链接</li>
<li>一旦定义，不可改变</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-23T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Lambda 表达式</title>
    <id>https://codemake.fun/notes/java/Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</id>
    <link href="https://codemake.fun/notes/java/Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">JDK8 开始支持，用来让程序编写更优雅; 可以简洁的实现匿名内部类与函数声明与调用; 基于 Lambda 提供的 stream 流式处理极大简化对集合的操作; 语法格式 (参数列表) -&amp;gt; 实现语句参数列表使用逗号分隔参数; 参数类型可省略; 单参数括号可省略; -&amp;gt;：Lambda 表达式操作符; 实现语句单行直接写，多行用 {} 包...</summary>
    <content type="html"><![CDATA[<!-- more -->
<ul>
<li>JDK8 开始支持，用来让程序编写更优雅</li>
<li>可以简洁的实现匿名内部类与函数声明与调用</li>
<li>基于 Lambda 提供的 stream 流式处理极大简化对集合的操作</li>
</ul>
<h3> 语法格式</h3>
<blockquote>
<p>(参数列表) -&gt; 实现语句</p>
</blockquote>
<ul>
<li>参数列表使用逗号分隔参数
<ul>
<li>参数类型可省略</li>
<li>单参数括号可省略</li>
</ul>
</li>
<li><code>-&gt;</code>：Lambda 表达式操作符</li>
<li>实现语句单行直接写，多行用 <code>{}</code> 包裹</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 函数式编程</h3>
<blockquote>
<p>基于函数式接口并使用 lambda 表达式对的编程方式</p>
</blockquote>
<ul>
<li>将代码作为可重用数据代入到程序中</li>
<li>强调 <strong>你想做什么</strong> 而不是 <strong>你想怎么做</strong></li>
</ul>
<h3> 函数式接口</h3>
<blockquote>
<p>有且只有一个抽象方法的接口</p>
</blockquote>
<ul>
<li>Java 中拥有大量函数式接口，如 <code>java.lang.Runnable</code></li>
<li>JDK8 后提供了一系列的函数式接口，位于 <code>java.util.function</code></li>
</ul>
<h4> Predicate</h4>
<blockquote>
<p>测试传入数据是否满足判断要求，用于条件判断，固定返回布尔值</p>
</blockquote>
<ul>
<li>需要实现 <code>test()</code> 方法进行逻辑判断</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Consumer</h4>
<blockquote>
<p><code>Consumer&lt;T&gt;</code>：对应有一个输入参数无输出的功能代码</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Function</h4>
<blockquote>
<p><code>Function&lt;T,R&gt;</code>：对应有一个输入参数且需要返回数据的功能代码</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Stream 流式处理</h3>
<ul>
<li>建立在 Lambda 基础上的多数据处理技术</li>
<li>对集合数据处理进行高度抽象，极大简化代码量</li>
<li>可对集合进行迭代、去重、筛选、排序、聚合等一系列处理</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 常用方法</h4>
<table>
<thead>
<tr>
<th>接口</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>forEach</code></td>
<td>循环遍历</td>
</tr>
<tr>
<td><code>map</code></td>
<td>映射每个元素到对应的结果</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>通过设置的条件过滤出元素</td>
</tr>
<tr>
<td><code>limit</code></td>
<td>获取指定数量的流</td>
</tr>
<tr>
<td><code>sorted</code></td>
<td>对流进行排序</td>
</tr>
<tr>
<td><code>Collectors</code></td>
<td>将流转换成集合和聚合元素</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 创建方式</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Math</title>
    <id>https://codemake.fun/notes/java/Math.html</id>
    <link href="https://codemake.fun/notes/java/Math.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">Math Math.random() 返回介于 0 ~ 1.0 之间的双精度浮点值 Math.abs() 返回双精度浮点数类型参数的绝对值，这个方法有覆盖的版本，因此传入整型会返回整型，传入双精度浮点数会返回双精度浮点数 Math.round() 根据参数是浮点型或双精度浮点数返回四舍五入之后的整形或长整型 Math.min() 返回两参数中较...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Math</h2>
<h3> Math.random()</h3>
<blockquote>
<p>返回介于 0 ~ 1.0 之间的双精度浮点值</p>
</blockquote>
<h3> Math.abs()</h3>
<blockquote>
<p>返回双精度浮点数类型参数的绝对值，这个方法有覆盖的版本，因此传入整型会返回整型，传入双精度浮点数会返回双精度浮点数</p>
</blockquote>
<h3> Math.round()</h3>
<blockquote>
<p>根据参数是浮点型或双精度浮点数返回四舍五入之后的整形或长整型</p>
</blockquote>
<h3> Math.min()</h3>
<blockquote>
<p>返回两参数中较小的那一个，这里有 int/lang/float/double 的重载版本</p>
</blockquote>
<h3> Math.max()</h3>
<blockquote>
<p>返回两参数中较大的那一个，这里有 int/lang/float/double 的重载版本</p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">MD5</title>
    <id>https://codemake.fun/notes/java/md5.html</id>
    <link href="https://codemake.fun/notes/java/md5.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">MD5Commons-Codec 是 Apache 提供的编码/解码组件; 通过 Commons-Codec 可轻易生产源数据的 MD5 摘要; 官网：https://commons.apache.org/proper/commons-codec/; MD5 摘要方法：String md5 = DigestUtils.md5Hex(源数据); ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> MD5</h2>
<ul>
<li>Commons-Codec 是 Apache 提供的编码/解码组件</li>
<li>通过 Commons-Codec 可轻易生产源数据的 MD5 摘要</li>
<li>官网：<a href="https://commons.apache.org/proper/commons-codec/" target="_blank" rel="noopener noreferrer">https://commons.apache.org/proper/commons-codec/</a></li>
<li>MD5 摘要方法：<code>String md5 = DigestUtils.md5Hex(源数据)</code></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">UML类图</title>
    <id>https://codemake.fun/notes/java/UML%E7%B1%BB%E5%9B%BE.html</id>
    <link href="https://codemake.fun/notes/java/UML%E7%B1%BB%E5%9B%BE.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">UML 类图 UML(Unifled Modeling Language)，又称统一建模语言或标准建模语言，是一种支持模型化和软件系统开发的图形化语言可以为软件开发的所有阶段提供模型化和可视化支持，可用于多种类型软件系统开发建模的各个阶段，通常我们会结合 UML 图例来表示类与类之间的各种关系; 类的层次结构代表类与类之间的关系，类的关系有很多种...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> UML 类图</h2>
<blockquote>
<p>UML(Unifled Modeling Language)，又称统一建模语言或标准建模语言，是一种支持模型化和软件系统开发的图形化语言</p>
</blockquote>
<ul>
<li>
<p>可以为软件开发的所有阶段提供模型化和可视化支持，可用于多种类型软件系统开发建模的各个阶段，通常我们会结合 UML 图例来表示类与类之间的各种关系</p>
</li>
<li>
<p>类的层次结构代表类与类之间的关系，类的关系有很多种，包括泛化、实现、依赖、关联、聚合和组合。</p>
</li>
<li>
<p>在大的类别上还可分为两种：横向关系和纵向关系</p>
<ul>
<li>横向关系就是泛化、实现，而纵向关系就是剩下的 4 种，他们的强弱关系：<code>依赖 &lt; 关联 &lt; 聚合 &lt; 组合</code>。</li>
<li>理解这些类的关系，并应用于类的层次结构设计中，有助于我们更好的进行代码组织结构优化。</li>
</ul>
</li>
</ul>
<h3> 泛化</h3>
<blockquote>
<p>泛化关系就是继承，表示一般与特殊的关系，即 “一般” 是 “特殊” 的泛化</p>
</blockquote>
<ul>
<li>
<p>在继承中，“一般类” 就是父类，“特殊类” 就是子类。它指定了子类如何特化父类的所有特征和行为。他们之间是 “is A” 的关系。也就是说如果两个类之间满足 “A is a B” 的关系，则 A 就是 B 的子类</p>
</li>
<li>
<p>在 UML 类图设计中，<code>继承用一条空心三角箭头的实线表示，从子类指向父类</code></p>
</li>
<li>
<p>例如：猫类继承自动物类，即：猫是动物的一种，既有猫的特征也有动物的共性的关系。此时，实现由猫类出发，空心箭头指向动物类。</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131223646896.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 实现</h3>
<blockquote>
<p>实现和泛化相似，逻辑上也可以通过 “is a” 表示。</p>
</blockquote>
<ul>
<li>
<p>区别在于，实现关系通常是继承自一个抽象类或接口，表示类是接口或者抽象类所有特征和行为的实现， 而泛化关系通常继承一个具体类。</p>
</li>
<li>
<p>在 UML 类图设计中，<code>实现是用一条带空心三角箭头的虚线表示，从子类指向抽象父类或者接口</code></p>
</li>
<li>
<p>例如：鹦鹉具有飞翔的能力，自然也满足 “鹦鹉 is a 能飞”，即鹦鹉是能飞的这样的关系。此时虚线从鹦鹉类触发，空心箭头指向飞翔</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131223646896.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 依赖</h3>
<blockquote>
<p>依赖就是一个类 A 使用到了另一个类 B，即一个类的实现需要另一个类的协助。而这种使用关系是具有临时性的、相对弱的。他们之间是 “use a” 的关系。</p>
</blockquote>
<ul>
<li>
<p>通常，我们在类 A 中，把类 B 的对象作为方法参数时，方法中使用到了类 B 对象作为局部变量时，提现的就是两者之间的依赖关系。建议<strong>避免双向依赖</strong>。</p>
</li>
<li>
<p>在 UML 类图设计中，<code>依赖用一条带箭头的虚线表示，从类 A 指向依赖的 B 类</code></p>
</li>
<li>
<p>例如：某人需要过河，需要借用一条船，此时，人与船之间的关系就是依赖。即在人类的过河方法中，需要依赖船的对象作为方法的输入参数。此时，肩头有人类出发，指向船。</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131224112466.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 关联</h3>
<blockquote>
<p>关联体现的是两个类之间一种强依赖的关系，这种关系比依赖更强，一般是长期性的，是一种拥有的关系，它使一个类知道另一个类的属性和方法。他们之间能用 “has a” 表示。</p>
</blockquote>
<ul>
<li>
<p>通常，我们在类 A 中，把类 B 的对象作为类中成员时，体现的就是两者之间的关联关系，</p>
</li>
<li>
<p><strong>关联可以是单向、双向的</strong>。</p>
</li>
<li>
<p>在 UML 类图设计中</p>
<ul>
<li><code>双向关联，用一条实现或一条实线 + 两个普通箭头（或实心三角形箭头）表示</code></li>
<li><code>单项关联，用一条实线 + 一个普通箭头（或实心三角形箭头）表示</code></li>
<li><strong>无论单向还是双向，箭头均指向被拥有者</strong></li>
</ul>
</li>
</ul>
<p>例如：老师和学生是双向关联，一个老师会管理多名学生，一名学生也会有多名授课老师。学生和学号质检室单项关联，一个学生只能对应一个唯一的学号</p>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131224848610.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 聚合</h3>
<blockquote>
<p>聚合关系是一种强的关联关系，它体现的是整体与部分的关系，而且部分可以离开整体而单独存在，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。他们之间也是 “has a” 的关系。</p>
</blockquote>
<ul>
<li>
<p>关联和聚合在语法上无法区分，必须结合具体的逻辑场景</p>
</li>
<li>
<p>在 UML 类图设计中，<code>聚合关系以空心菱形加实线表示，菱形指向整体</code>。</p>
</li>
<li>
<p>例如：学校有很多老师，老师离开学校还可以正常运行</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131225151896.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 组合</h3>
<blockquote>
<p>组合也是部分和整体的关系，但是比聚合关系还要强的关系。此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，即要求普通的聚合关系中代表整体的对象，负责代表部分的对象的生命周期。它体现的是一种 “contain-a” 的关系</p>
</blockquote>
<ul>
<li>在 UML 类图设计中，<code>组合关系以实心菱形加实线表示，菱形指向整体</code></li>
<li>例如：公司和部门是整体和部分的关系，没有公司就不存在部门</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131225803263.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Java</title>
    <id>https://codemake.fun/notes/java/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html</id>
    <link href="https://codemake.fun/notes/java/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"/>
    <updated>2023-03-01T09:26:45.000Z</updated>
    <summary type="text">内存管理 堆栈 栈 每个方法（Method）在执行时，都会创建一个栈帧，用于存储局部变量表、操作数、动态链接、方法出口信息等栈中所存储，多用于保存局部信息的值，比如：方法中的基本数据类型定义的变量、对象的引用（也称为对象实例）等。当局部作用范围结束时，站内信息立即自动释放。; 当存储内容是由基本数据类型（byte、short、long、doubl...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 内存管理</h2>
<h3> 堆栈</h3>
<h4> 栈</h4>
<blockquote>
<p>每个方法（Method）在执行时，都会创建一个栈帧，用于存储局部变量表、操作数、动态链接、方法出口信息等</p>
</blockquote>
<ul>
<li>
<p>栈中所存储，多用于保存局部信息的值，比如：方法中的基本数据类型定义的变量、对象的引用（也称为对象实例）等。当局部作用范围结束时，站内信息立即自动释放。</p>
</li>
<li>
<p>当存储内容是由基本数据类型（byte、short、long、double、char、boolean）声明的局部变量时，在栈中存储的是他们对应的具体数值。</p>
</li>
<li>
<p>当存储的是局部的对象的引用（定义在方法中的引用类型的变量）存储的是具体对象在堆中的地址。当然，如果对象的引用没有指向具体的空间，则是 <code>null</code></p>
</li>
</ul>
<h4> 堆</h4>
<blockquote>
<p>用来存放动态产生的数据，比如 <code>new</code> 出来的对象。当对象使用结束，并确定已无实例指向堆空间时，JVM 才会依据相关垃圾回收机制进行资源回收，完成堆内资源释放，也就是说，并不是方法结束，方法内涉及到的堆空间就会立即释放，这也是与栈管理不同的地方。</p>
</blockquote>
<ul>
<li>创建出来的对象只包含属于各自的成员变量，并不包括成员方法。因为同一个类拥有各自的成员变量，存储在堆中的不同位置，但是同一个类的不同实例之间共享该类的方法，并不是每创建一个对象就把成员方法复制一次</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">内部类</title>
    <id>https://codemake.fun/notes/java/%E5%86%85%E9%83%A8%E7%B1%BB.html</id>
    <link href="https://codemake.fun/notes/java/%E5%86%85%E9%83%A8%E7%B1%BB.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">内部类在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类; 与之对应，包含内部类的类被称为外部类; 成员内部类内部类中最常见的就是成员内部类，也称为普通内部类; 内部类在外部使用时，无法直接实例化，需要借由外部类信息才能完成实例化; 内部类的访问修饰符可以任意，但是访问范围会受到影响; 内部类可以直接访问外...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h3> 内部类</h3>
<ul>
<li>
<p>在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类</p>
</li>
<li>
<p>与之对应，包含内部类的类被称为外部类</p>
</li>
</ul>
<h4> 成员内部类</h4>
<ul>
<li>
<p>内部类中最常见的就是成员内部类，也称为普通内部类</p>
</li>
<li>
<p>内部类在外部使用时，无法直接实例化，需要借由外部类信息才能完成实例化</p>
</li>
<li>
<p>内部类的访问修饰符可以任意，但是访问范围会受到影响</p>
</li>
<li>
<p>内部类可以直接访问外部类的成员，如果出现同名属性，优先访问内部类中定义的</p>
</li>
<li>
<p>可以在内部类中使用 <code>外部类.this.成员</code> 的方式，访问外部类中的同名信息</p>
</li>
<li>
<p>外部类访问内部类信息，需要通过内部类实例，无法直接访问</p>
</li>
<li>
<p>内部类编译后 <code>.class</code> 文件命名：<code>外部类$内部类.class</code></p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 静态内部类</h4>
<ul>
<li>
<p>内部类加上 <code>static</code> 修饰符</p>
</li>
<li>
<p>静态内部类中，只能直接访问外部类的静态成员，如果需要调用外部非静态成员，可以通过对象实例</p>
</li>
<li>
<p>静态内部类对象实例化时，可以不依赖于外部类对象</p>
</li>
<li>
<p>可以通过 <code>外部类.内部类.静态成员</code> 的方式，访问内部类中的静态成员</p>
</li>
<li>
<p>当内部类属性与外部类属性同名时，默认直接调用内部类中的成员</p>
</li>
<li>
<p>如果需要访问外部类中的静态属性，可以通过 <code>外部类.属性</code> 的方式</p>
</li>
<li>
<p>如果需要访问外部类中的非静态属性，可以通过 <code>new 外部类().属性</code> 的方式</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 方法内部类</h4>
<ul>
<li>定义在外部类方法中的内部类，也称局部内部类</li>
<li>作用范围在方法内</li>
</ul>
<ul>
<li>和方法内部成员使用规则一样，不能使用 <code>public</code>、<code>protected</code>、<code>private</code> 修饰</li>
<li>方法内部类中不能包含静态成员</li>
<li>方法内部类中可以包含 <code>final</code>、<code>abstract</code> 修饰的成员，但不推荐</li>
</ul>
<ul>
<li>内部类编译后 <code>.class</code> 文件命名：<code>外部类+$数字+内部类.class</code></li>
</ul>
<h4> 匿名内部类</h4>
<ul>
<li>将类的定义与类的创建，放到一起完成</li>
<li>匿名内部类没有类型名称、实例对象名称</li>
<li>编译后的文件命名：<code>外部类$数字.class</code></li>
<li>无法在类型名称前添加修饰符 <code>public protected private abstract static</code></li>
<li>无法在内部编写构造方法，可添加构造代码块</li>
<li>不能出现静态成员</li>
<li>匿名内部类可以实现接口也可以继承父类，但是不可兼得</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/2-11 常见内部类的比较.png" alt="2-11 常见内部类的比较" tabindex="0" loading="lazy"><figcaption>2-11 常见内部类的比较</figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/2-12 关于内部类的常见问题.png" alt="2-12 关于内部类的常见问题" tabindex="0" loading="lazy"><figcaption>2-12 关于内部类的常见问题</figcaption></figure>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">包装类</title>
    <id>https://codemake.fun/notes/java/%E5%8C%85%E8%A3%85%E7%B1%BB.html</id>
    <link href="https://codemake.fun/notes/java/%E5%8C%85%E8%A3%85%E7%B1%BB.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">包装类类型特点; 不允许被继承，没有子类; 包装类是引用类型，拥有方法和属性; 基本数据类型只包含数值信息; 存储方式; 包装类型对象实例化，借由 new 在堆空间进行空间分配，对应栈空间中存储地址引用; 基本数据类型变量对应栈空间中存储的是具体数据值; 初始值; 包装类的对象为初始化时，初始值均为 null; 基本数据类型有各自的...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h3> 包装类</h3>
<ul>
<li>类型特点
<ul>
<li>不允许被继承，没有子类</li>
<li>包装类是引用类型，拥有方法和属性</li>
<li>基本数据类型只包含数值信息</li>
</ul>
</li>
<li>存储方式
<ul>
<li>包装类型对象实例化，借由 <code>new</code> 在堆空间进行空间分配，对应栈空间中存储地址引用</li>
<li>基本数据类型变量对应栈空间中存储的是具体数据值</li>
</ul>
</li>
<li>初始值
<ul>
<li>包装类的对象为初始化时，初始值均为 <code>null</code></li>
<li>基本数据类型有各自的默认初始值</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>默认值</th>
<th>对应的包装类</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>0</td>
<td>Byte</td>
<td>null</td>
</tr>
<tr>
<td>short</td>
<td>0</td>
<td>Short</td>
<td>null</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
<td>Integer</td>
<td>null</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
<td>Long</td>
<td>null</td>
</tr>
<tr>
<td>float</td>
<td>0.0f</td>
<td>Float</td>
<td>null</td>
</tr>
<tr>
<td>double</td>
<td>0.0d</td>
<td>Double</td>
<td>null</td>
</tr>
<tr>
<td>char</td>
<td>' '（<code>\u0000</code>）（空格）</td>
<td>Character</td>
<td>null</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
<td>Boolean</td>
<td>null</td>
</tr>
</tbody>
</table>
<h4> 装箱</h4>
<blockquote>
<p>基本数据类型转换为包装类的过程</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 拆箱</h4>
<blockquote>
<p>包装类转换为基本数据类型的过程</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 装箱与拆箱应用</h4>
<ul>
<li>当进行赋值操作时，会触发拆箱操作</li>
<li>当方法调用，传入参数时，也会触发相关操作</li>
<li>当结合操作符进行运算操作的时候，也会触发相关操作</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 支持缓存的包装类</h4>
<blockquote>
<p>Java 在集中包装类中提供了缓存设计，会对一定范围内的数据做缓存，如果数据在范围内，会优先从缓存中取数据，超出范围才会创建新对象</p>
</blockquote>
<ul>
<li><code>Byte 、Short、Integer、Long</code>：缓存 <code>[-128, 127]</code> 区间的数据</li>
<li><code>Character</code>：缓存 <code>[0, 127]</code> 区间的数据</li>
<li><code>Boolean</code>：缓存 <code>true、false</code></li>
<li><code>Double、Float</code>：不支持</li>
</ul>
<h4> 包装类的比较</h4>
<ul>
<li>
<p>拆箱后的数据是基础数据类型，用 <code>==</code> 判断相等性，比较的都是数值，如果是字符，比较的是 ASCLL 值</p>
</li>
<li>
<p>装箱后如果用 <code>==</code> 比较对象的内存地址，除 <code>Double</code>、<code>Float</code> 外，如数据值在 <code>-128 ~ 127</code> ，则相同；繁殖会重新生成对象，为不同</p>
</li>
<li>
<p>调用 <code>equals</code> 方法时</p>
<ul>
<li>当类型相同，且数值相同时，返回 <code>true</code>，反之，返回 <code>false</code></li>
<li>当比对方为基本数据类型时，会先进行自动装箱操作，后进行比较</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">反射</title>
    <id>https://codemake.fun/notes/java/%E5%8F%8D%E5%B0%84.html</id>
    <link href="https://codemake.fun/notes/java/%E5%8F%8D%E5%B0%84.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">反射（Reflect） 是在 运行时 动态访问类与对象的技术在 JDK1.2 版本后的高级特性，隶属于 java.lang.reflect; 创建对象的实际从编译的时候延迟到程序运行时; 大多数 Java 框架都基于反射实现参数配置、动态注入等特性; ```java // 示例 package com.imooc.reflect; import...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 反射（Reflect）</h2>
<blockquote>
<p>是在 <strong>运行时</strong> 动态访问类与对象的技术</p>
</blockquote>
<ul>
<li>在 JDK1.2 版本后的高级特性，隶属于 <code>java.lang.reflect</code></li>
<li>创建对象的实际从编译的时候延迟到程序运行时</li>
<li>大多数 Java 框架都基于反射实现参数配置、动态注入等特性</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 核心类</h3>
<h4> Class</h4>
<h5> 描述</h5>
<ul>
<li>JVM 代表类和接口的类</li>
<li>Class 对象具体包含了某个特定类的结构信息</li>
<li>通过 Class 对象可获取对应类的构造方法/方法/成员变量</li>
</ul>
<h5> 方法</h5>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Class.forName()</code></td>
<td>静态方法，用于获取指定 Class 对象</td>
</tr>
<tr>
<td><code>classObj.newInstance()</code></td>
<td>通过默认构造方法创建新的对象</td>
</tr>
<tr>
<td><code>classObj.getConstructor()</code></td>
<td>获得指定的 <code>public</code> 修饰构造方法 <code>Constructor</code> 对象</td>
</tr>
<tr>
<td><code>classObj.getMethod()</code></td>
<td>获取指定的 <code>public</code> 修饰方法 <code>Method</code> 对象</td>
</tr>
<tr>
<td><code>classObj.getField()</code></td>
<td>获取指定的 <code>public</code> 修饰成员变量 <code>Field</code> 对象</td>
</tr>
</tbody>
</table>
<h4> Constructor</h4>
<h5> 描述</h5>
<ul>
<li>是对 Java 类中的构造方法的抽象</li>
<li>包含了具体类的某个具体构造方法的声明</li>
<li>通过 Constructor 对象调用带参构造方法创建对象</li>
</ul>
<h5> 方法</h5>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>classObj.getConstructor()</code></td>
<td>获取指定 <code>public</code> 修饰的构造方法对象</td>
</tr>
<tr>
<td><code>constructorObj.newInstance()</code></td>
<td>通过对应的构造方法创建对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Method</h4>
<h5> 描述</h5>
<ul>
<li>Method 对象代指某个类中的方法的描述</li>
<li>通过 Method 对象调用指定对象的对应方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>classObj.getMethod()</code></td>
<td>获取指定 <code>public</code> 修饰的方法对象</td>
</tr>
<tr>
<td><code>constructorObj.invoke()</code></td>
<td>调用指定对象的对应方法</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Field</h4>
<h5> 方法</h5>
<table>
<thead>
<tr>
<th>方法</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>classObj.getField()</code></td>
<td>获取指定 <code>public</code> 修饰的成员变量</td>
</tr>
<tr>
<td><code>fieldObj.get()</code></td>
<td>获取某对象指定成员变量</td>
</tr>
<tr>
<td><code>fieldObj.set()</code></td>
<td>为某对象指定成员变量赋值</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> getDeclared</h3>
<blockquote>
<p><code>getDeclaredConstructor(s)|Method(s)|Field(s)</code>：获取对应对象</p>
</blockquote>
<ul>
<li><code>getConstructor(s)|Method(s)|Field(s)</code> 只能获取 <code>public</code> 对象</li>
<li><code>getDeclared...</code> 访问非作用域内构造方法、方法、成员变量，会抛出异常</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">字符串</title>
    <id>https://codemake.fun/notes/java/%E5%AD%97%E7%AC%A6%E4%B8%B2.html</id>
    <link href="https://codemake.fun/notes/java/%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
    <updated>2023-02-28T09:11:56.000Z</updated>
    <summary type="text">String：具有不可变性; 对象一旦被创建，则不能修改，是不可变的; 所谓修改其实是创建了新的对象，所指向的内存空间不变; StringBuilder：可变，当频繁操作字符串时，建议使用; StringBuffer：和 StringBuilder 基本一致，StringBuffer 是线程安全的，StringBuilder 则没有，所以 St...</summary>
    <content type="html"><![CDATA[<!-- more -->
<ul>
<li><code>String</code>：具有不可变性
<ul>
<li>对象一旦被创建，则不能修改，是不可变的</li>
<li>所谓修改其实是创建了新的对象，所指向的内存空间不变</li>
</ul>
</li>
<li><code>StringBuilder</code>：可变，当频繁操作字符串时，建议使用</li>
<li><code>StringBuffer</code>：和 <code>StringBuilder</code> 基本一致，<code>StringBuffer</code> 是线程安全的，<code>StringBuilder</code> 则没有，所以 <code>StringBuilder</code> 性能略高</li>
</ul>
<h2> 创建方法</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317222221814.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 常用方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>int <code>length()</code></td>
<td>返回当前字符串的长度</td>
</tr>
<tr>
<td>int <code>indexOf(int ch)</code></td>
<td>查找 ch 字符在该字符串中第一次出现的位置</td>
</tr>
<tr>
<td>int <code>indexOf(String str)</code></td>
<td>查找 str 子字符串在该字符串中第一次出现的位置</td>
</tr>
<tr>
<td>int <code>lastIndexOf(int ch)</code></td>
<td>朝招 ch 字符在该字符串中最后一次出现的位置</td>
</tr>
<tr>
<td>int <code>lastIndexOf(String str)</code></td>
<td>查找 str 子字符串在该字符串中最后一次出现的位置</td>
</tr>
<tr>
<td>String <code>substring(int beginIndex)</code></td>
<td>获取从 beginIndex 位置开始到结束的子字符串</td>
</tr>
<tr>
<td>String <code>substring(int beginIndex, int endIndex)</code></td>
<td>获取从 beginIndex 位置开始到 endIndex 位置的子字符串（不包括 endIndex 位置字符串）</td>
</tr>
<tr>
<td>String <code>trim()</code></td>
<td>返回去除了前后空格的字符串</td>
</tr>
<tr>
<td>boolean <code>equals(Object obj)</code></td>
<td>将该字符串与指定对象比较，返回 true 或 false</td>
</tr>
<tr>
<td>String <code>toLowerCase()</code></td>
<td>将字符串转换为小写</td>
</tr>
<tr>
<td>String <code>toUpperCase()</code></td>
<td>将字符串转换为大写</td>
</tr>
<tr>
<td>char <code>charAt(int index)</code></td>
<td>获取字符串中指定位置的字符</td>
</tr>
<tr>
<td>String[] <code>split(String regex, int limit)</code></td>
<td>将字符串分割为子字符串，返回字符串数组</td>
</tr>
<tr>
<td>byte[] <code>getBytes()</code></td>
<td>将该字符串转换为 byte 数组</td>
</tr>
</tbody>
</table>
<h2> <code>equals</code> 和 <code>==</code> 的区别</h2>
<ul>
<li><code>equals</code> 是判断两个变量或者实例指向同一个内存空间的值是不是相同
<ul>
<li>常用于 <code>String</code> 类型数据比较</li>
<li>两个对象是否在意义上相等</li>
</ul>
</li>
<li><code>==</code>
<ul>
<li>对于基本数据类型而言，<code>==</code> 比较的是变量里存储的值</li>
<li>对于引用数据类型而言，<code>==</code> 比较的是对象的内存地址（<code>String</code> 为引用类型）</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-24T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">异常</title>
    <id>https://codemake.fun/notes/java/%E5%BC%82%E5%B8%B8.html</id>
    <link href="https://codemake.fun/notes/java/%E5%BC%82%E5%B8%B8.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">异常 异常本质上是程序上的错误，在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常分类; 编译时异常; 括号配对; 语句分号; 关键字错误; 等等; 运行时异常; 使用空的对象引用调用方法; 数组访问时下标越界; 算术运算时除数为 0; 类型转换时无法正常转型; Throwable 异常根类 Er...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 异常</h2>
<blockquote>
<p>异常本质上是程序上的错误，在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常</p>
</blockquote>
<ul>
<li>分类
<ul>
<li>编译时异常
<ul>
<li>括号配对</li>
<li>语句分号</li>
<li>关键字错误</li>
<li>等等</li>
</ul>
</li>
<li>运行时异常
<ul>
<li>使用空的对象引用调用方法</li>
<li>数组访问时下标越界</li>
<li>算术运算时除数为 0</li>
<li>类型转换时无法正常转型</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> Throwable</h3>
<blockquote>
<p>异常根类</p>
</blockquote>
<h4> Error</h4>
<blockquote>
<p>程序无法处理的错误，表示运行应用程序中较严重的问题，他们在应用程序的控制和处理能力之外，而且大多数是程序运行是不允许出现的状况，通常不需要关心此类错误</p>
</blockquote>
<ul>
<li><code>VirtualMachineError</code>：虚拟机错误</li>
<li><code>OutOfMemoryError</code>：内存溢出</li>
<li><code>ThreadDeath</code>：线程死锁</li>
</ul>
<h4> Exception</h4>
<blockquote>
<p>程序本身可以处理的异常</p>
</blockquote>
<ul>
<li>
<p><code>Checked Exception</code>：检查型异常，编译器要求必须处理的异常</p>
<ul>
<li><code>IOException</code>：IO 异常</li>
<li><code>SQLException</code>：SQL 异常</li>
</ul>
</li>
<li>
<p><code>Unchecked Exception</code>：非检查型异常，编译器不要求强制处理的异常</p>
<ul>
<li><code>RuntimeException</code>
<ul>
<li><code>NullPointerException</code>：空指针异常（使用了未经初始化的对象或者是不存在的对象时）</li>
<li><code>ArrayIndexOutOfBoundsException</code>：数组下标越界异常</li>
<li><code>ArrayStoreException</code>：数组中包含不兼容的值的异常（数组中实际传入的数据与预定不符，例如子类数组经过向上转型后，传入父类对象）</li>
<li><code>ArithmeticException</code>：数学运算异常</li>
<li><code>NumberFormatException</code>：数字格式化异常</li>
<li><code>ClassCastException</code>：类型转换异常（向下转型时，转换对象无法完成正常转换）</li>
<li><code>InputMismatchException</code>：输入格式错误异常（接受数据与预期格式不符时）</li>
<li><code>FileNotFoundException</code>：文件未找到异常（操作文件内容时发现文件不存在 ）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5> 抛出异常</h5>
<ul>
<li>异常对象
<ul>
<li>异常类型</li>
<li>异常出现时的程序状态</li>
<li><code>...</code></li>
</ul>
</li>
</ul>
<h5> 捕获异常</h5>
<ul>
<li>对运行时异常、错误或可查异常，Java 技术所要求的的异常处理方式不同
<ul>
<li>对于可查异常必须捕捉或者声明抛出</li>
<li>允许忽略不可查的 <code>RuntimeException</code>（含子类）和 <code>Error</code>（含子类）</li>
</ul>
</li>
</ul>
<h5> 关键字</h5>
<ul>
<li><code>try</code> 块后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块</li>
<li><code>try...catch</code> 代码块中定义的是局部变量，只能在其代码块中使用</li>
<li><code>finally</code> 代码块是强制执行的，不建议在其中书写 <code>return</code> 语句，一旦书写会屏蔽掉 <code>try</code> 和 <code>catch</code> 代码块中的 <code>return</code> 语句</li>
<li>子类重写父类排除的异常方法时，声明的异常必须是父类方法所声明异常的同类或子类</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210201174818429.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 异常方法</h3>
<ul>
<li>
<p><code>e.toString()</code>：获取异常类型和描述信息，当直接输出对象 <code>e</code> 时，调用的就是该方法</p>
</li>
<li>
<p><code>e.getMessage()</code>：获取异常描述信息</p>
</li>
<li>
<p><code>e.printStackTrace()</code>：打印异常的堆栈信息，包括种类、描述信息、出错位置等</p>
</li>
</ul>
<h3> 自定义异常</h3>
<ul>
<li>描述特定业务产生的异常类型</li>
<li>定义一个类，继承 <code>Throwable</code> 类或它的子类</li>
<li>自定义异常需先经过 <code>throw</code> 抛出，才能被 <code>catch</code> 捕获，无法自动被程序捕获并处理</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210316190417847.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 异常链</h3>
<ul>
<li>捕获一个异常后再抛出另一个异常</li>
<li>将异常发生的原因一个传一个串起来，即把底层的异常信息传递给上层，逐层抛出</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">接口</title>
    <id>https://codemake.fun/notes/java/%E6%8E%A5%E5%8F%A3.html</id>
    <link href="https://codemake.fun/notes/java/%E6%8E%A5%E5%8F%A3.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">接口 解决多重继承问题，但又不会产生致命方块的问题 基本概念接口定义了某一批类所需要遵守的规范; 接口不能实例化，只能通过引用指向类实例; 接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它之规定这些类里必须提供某些方法; 实现类必须实现接口中所有方法，未全部实现则需将类变为抽象类; 可以根据业务需要创建接口包，需设置接口为 ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h3> 接口</h3>
<blockquote>
<p>解决多重继承问题，但又不会产生致命方块的问题</p>
</blockquote>
<h4> 基本概念</h4>
<ul>
<li>
<p>接口定义了某一批类所需要遵守的规范</p>
</li>
<li>
<p>接口不能实例化，只能通过引用指向类实例</p>
</li>
<li>
<p>接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它之规定这些类里必须提供某些方法</p>
</li>
<li>
<p>实现类必须实现接口中所有方法，未全部实现则需将类变为抽象类</p>
</li>
<li>
<p>可以根据业务需要创建接口包，需设置接口为 <code>public</code> 访问权限</p>
<ul>
<li>调用：<code>import 包名.*</code> 或 <code>import 包名.接口名</code></li>
</ul>
</li>
<li>
<p>接口不能直接实例化对象，只能设置接口的引用指向具体的接口实现类。接口的灵活性就在于“规定一个类必须做什么，而不管你如何做”。可以<strong>定义一个接口类型的引用来指向实现接口的类的实例，当这个引用调用方法时，会根据实际引用类的实例来判断具体调用哪个方法，这是一种典型的多态的表现</strong></p>
</li>
<li>
<p>当<strong>接口引用指向实现类时，不能直接调用实现类独有的方法，需要进行强制类型转换才可以调用</strong></p>
</li>
<li>
<p>默认方法和静态方法自 JDK1.8 后可以在接口中应用，默认方法可以在实现类中应用，静态方法只属于接口</p>
</li>
<li>
<p>接口访问修饰符</p>
<ul>
<li><strong>默认访问权限（包内可见）</strong></li>
<li><code>public</code></li>
</ul>
</li>
<li>
<p>常量</p>
<ul>
<li>默认访问修饰符： <code>public static final</code> ，缺省不影响使用</li>
<li>可通过 <code>接口名.常量</code> 访问</li>
</ul>
</li>
<li>
<p>抽象方法（成员方法）</p>
<ul>
<li>默认访问修饰符：<code>public abstract</code> ，缺省不影响使用</li>
<li>实现类中实现抽象方法后，可通过接口引用或者实现类引用访问相关方法</li>
</ul>
</li>
<li>
<p>默认方法</p>
<ul>
<li>接口中可以使用 <code>default</code> 关键字定义默认方法，子类中不需要实现，可以带方法体</li>
<li>使用场景：使用接口中的某些方法，而其他一些方法重新实现没有意义</li>
<li><code>public default 返回值类型 方法名(参数列表){方法体}</code> （<code>public</code> 为默认访问修饰符，可省略）</li>
<li>使用场景：希望实现类能更多地应用接口中的方法</li>
</ul>
</li>
<li>
<p>静态方法</p>
<ul>
<li>接口中可以使用 <code>static</code> 关键字定义静态方法，可以带方法体</li>
<li>实现类无法重写静态方法，可以存在相同静态格式，但相互独立</li>
<li><code>public static 返回值类型 方法名(参数列表){方法体}</code> （<code>public</code> 为默认访问修饰符，可省略）</li>
<li>在实现类中需要通过接口名进行访问</li>
<li>使用场景：希望更多的接口拓展方法支持在无实例对象产生的情况下调用</li>
</ul>
</li>
</ul>
<h4> 多接口</h4>
<ul>
<li>
<p>实现类可以通过 <code>implements</code> 实现多个接口，通过逗号分隔，当实现类同事继承父类并实现接口时，需要先继承后实现</p>
</li>
<li>
<p>多个接口中存在相同成员，类同时实现多个接口，子类无法分辨，需要在子类中重新定义</p>
</li>
<li>
<p>继承的父类和实现的接口中存在相同定义的成员，类中无实现时，会优先继承父类的成员及静态方法</p>
</li>
</ul>
<h4> 接口继承</h4>
<ul>
<li>子接口可以通过 <code>extends</code> 继承多个接口，接口之间通过逗号分隔</li>
<li>多个接口中有重名方法，子接口继承时应重写父接口中的重名方法</li>
<li>单继承：子接口可继承父接口中定义的常量、抽象方法、默认方法，无法继承静态方法</li>
<li>多继承：只可继承父接口中定义的抽象方法，常量和默认方法无法分辨</li>
</ul>
<h3> 接口与抽象类</h3>
<ul>
<li>抽象类通常用来捕捉子类的通用特性，即更加侧重重用</li>
<li>接口多是为了把程序模块进行固化的契约，即侧重降低耦合，可以理解为 <strong>"更加抽象的抽象类"</strong>，</li>
<li>当希望描述多种毫无关系的类型之间的共同行为能力，更推荐用接口</li>
<li>当多类间可以形成可追溯侧产生轨迹，则更对剑抽象类继承</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">枚举</title>
    <id>https://codemake.fun/notes/java/%E6%9E%9A%E4%B8%BE.html</id>
    <link href="https://codemake.fun/notes/java/%E6%9E%9A%E4%B8%BE.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">枚举 3-3 拓展：枚举的基本使用 3-5 拓展：枚举在switch结构中的应用</summary>
    <content type="html"><![CDATA[<!-- more -->
<h3> 枚举</h3>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/3-3 拓展：枚举的基本使用.png" alt="3-3 拓展：枚举的基本使用" tabindex="0" loading="lazy"><figcaption>3-3 拓展：枚举的基本使用</figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/3-5 拓展：枚举在switch结构中的应用.png" alt="3-5 拓展：枚举在switch结构中的应用" tabindex="0" loading="lazy"><figcaption>3-5 拓展：枚举在switch结构中的应用</figcaption></figure>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">正则表达式</title>
    <id>https://codemake.fun/notes/java/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</id>
    <link href="https://codemake.fun/notes/java/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">正则表达式 字符匹配 表达式 说明 | :-------------------------- ------------------------------------ ------------------ A 精准匹配单个字符 | x y 允许出现的两个字符 [xyz] 字符集合，允许出现集合内任意单个字符 | `[a-z][A-Z]0-9` 字符范...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 正则表达式</h2>
<h3> 字符匹配</h3>
<p>| 表达式                      | 说明                                 |
| :-------------------------- | ------------------------------------ | ------------------ |
| <code>A</code>                         | 精准匹配单个字符                     |
| <code>x                          | y</code>                                   | 允许出现的两个字符 |
| <code>[xyz]</code>                     | 字符集合，允许出现集合内任意单个字符 |
| <code>[a-z]</code><br><code>[A-Z]</code><br><code>0-9</code> | 字符范围                             |
| <code>[^xyz]</code><br><code>[^0-9]</code>        | 集合内字符不允许出现                 |</p>
<h3> 元字符</h3>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\d</code></td>
<td>匹配任意单个数字</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配 <code>\d</code> 规则之外的任意单个字符</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配任意单个字母数字下划线</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配 <code>\w</code> 规则之外的任意单个字符</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配单个空格</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>匹配单个换行符</td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配任意单个字符（换行符除外）</td>
</tr>
<tr>
<td><code>\.</code></td>
<td>特殊字符，只匹配 <code>.</code></td>
</tr>
</tbody>
</table>
<h3> 多次重复匹配</h3>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>{m}</code></td>
<td>精准匹配 <code>m</code> 次</td>
</tr>
<tr>
<td><code>{m,}</code></td>
<td>最少出现 <code>m</code> 次</td>
</tr>
<tr>
<td><code>{m,n}</code></td>
<td>最少出现 <code>m</code> 次，最多出现 <code>n</code> 次</td>
</tr>
<tr>
<td><code>*</code></td>
<td>可以出现零次至无限次，相当于 <code>{0,}</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td>最少出现一次，相当于 <code>{1,}</code></td>
</tr>
<tr>
<td><code>?</code></td>
<td>做多出现一次，相当于 <code>{0,1}</code></td>
</tr>
</tbody>
</table>
<h3> 定位匹配</h3>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>头匹配</td>
</tr>
<tr>
<td><code>$</code></td>
<td>尾匹配</td>
</tr>
<tr>
<td><code>^$</code></td>
<td>头尾匹配</td>
</tr>
</tbody>
</table>
<h3> 贪婪与非贪婪</h3>
<blockquote>
<p>正则表达式默认使用贪婪模式</p>
</blockquote>
<h4> 贪婪模式</h4>
<blockquote>
<p>在满足条件的情况下尽可能多的匹配到字符串</p>
</blockquote>
<h4> 非贪婪模式</h4>
<blockquote>
<p>在满足条件的情况下尽可能少的匹配到字符串</p>
</blockquote>
<ul>
<li>在（描述数量）表达式末尾添加 <code>?</code> 表示非贪婪模式</li>
</ul>
<h3> 表达式分组</h3>
<blockquote>
<p>用 <code>()</code> 将表达式分组为多个子表达式</p>
</blockquote>
<h3> Java 中的正则表达式</h3>
<ul>
<li><code>Pattern</code>
<ul>
<li>方法
<ul>
<li><code>compile</code>：创建正则表达式对象</li>
<li><code>matcher</code>：匹配正则表达式</li>
<li><code>find</code>：查找匹配结果</li>
<li><code>group</code>：对应正则表达式分组 <code>()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">泛型</title>
    <id>https://codemake.fun/notes/java/%E6%B3%9B%E5%9E%8B.html</id>
    <link href="https://codemake.fun/notes/java/%E6%B3%9B%E5%9E%8B.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">泛型在 Java 中增加泛型之前，泛型程序设计使用继承来实现; 坏处; 需要强制类型转换; 可向集合中添加任意类型的对象，存在风险; 使用; ```java List list = new ArrayList(); // Java SE7 及以后的版本中，构造方法中可以省略泛型类型 List list = new ArrayList(); `...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 泛型</h2>
<ul>
<li>
<p>在 Java 中增加泛型之前，泛型程序设计使用继承来实现</p>
<ul>
<li>坏处
<ul>
<li>需要强制类型转换</li>
<li>可向集合中添加任意类型的对象，存在风险</li>
</ul>
</li>
</ul>
</li>
<li>
<p>使用</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 多态与泛型</h3>
<ul>
<li>变量声明的类型必须匹配传递给实际对象的类型（前后尖括号类型必须一致）</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">集合</title>
    <id>https://codemake.fun/notes/java/%E9%9B%86%E5%90%88.html</id>
    <link href="https://codemake.fun/notes/java/%E9%9B%86%E5%90%88.html"/>
    <updated>2023-02-26T08:25:54.000Z</updated>
    <summary type="text">集合 Java 中的集合是工具类，可以存储任意数量的具有共同属性的对象 应用场景无法预测存储数据的数量; 同时存储有一对一关系的数据; 需要进行数据的增删; 解决数据重复问题; 集合框架 Collection 存储类的对象 子接口及实现类List：数据有序，允许重复; ArrayList; LinkedList; Queue：数据有...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 集合</h2>
<blockquote>
<p>Java 中的集合是工具类，可以存储任意数量的具有共同属性的对象</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/20210629210309.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 应用场景</h3>
<ul>
<li>无法预测存储数据的数量</li>
<li>同时存储有一对一关系的数据</li>
<li>需要进行数据的增删</li>
<li>解决数据重复问题</li>
</ul>
<h3> 集合框架</h3>
<h4> Collection</h4>
<blockquote>
<p>存储类的对象</p>
</blockquote>
<h5> 子接口及实现类</h5>
<ul>
<li>List：数据有序，允许重复
<ul>
<li>ArrayList</li>
<li>LinkedList</li>
</ul>
</li>
<li>Queue：数据有序，允许重复
<ul>
<li>LinkedList</li>
</ul>
</li>
<li>Set：数据无序，不允许重复
<ul>
<li>HashSet</li>
</ul>
</li>
</ul>
<h4> Map</h4>
<blockquote>
<p>键值对</p>
</blockquote>
<h5> 实现类</h5>
<ul>
<li>HashMap</li>
</ul>
<h3> List</h3>
<ul>
<li>是元素有序并且可以重复的集合，称为序列</li>
<li>可以精确控制每个元素的插入位置，或删除某个位置的元素</li>
<li>两个主要实现类是 <code>ArrayList</code> 和 <code>LinkedList</code></li>
</ul>
<h4> ArrayList</h4>
<ul>
<li>底层是由数组实现的</li>
<li>元素有序且可以重复</li>
<li>动态增长，以满足应用程序的要求</li>
<li>在列表的尾部插入或删除数据非常有效</li>
<li>更适合查找和更新元素</li>
<li>其中的元素可以为 <code>null</code></li>
<li>方法
<ul>
<li><code>add</code></li>
<li><code>remove</code></li>
<li><code>contains</code></li>
<li><code>isEmpty</code></li>
<li><code>indexOf</code></li>
<li><code>size</code></li>
<li><code>get</code></li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Set</h3>
<h4> 迭代器</h4>
<ul>
<li><code>Iterator</code> 接口以统一的方式对各种集合元素进行遍历</li>
<li><code>HasNext()</code> 方法检测集合中是否还有下一个元素</li>
<li><code>next()</code> 方法返回集合的下一个元素</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> HashSet</h4>
<ul>
<li><code>HashSet</code> 是 <code>Set</code> 的一个重要实现类，称为哈希集</li>
<li><code>HashSet</code> 中的元素无序并且不可以重复
<ul>
<li>根据重写对象所在类的 <code>HashCode</code> 和 <code>equals</code> 方法来判断两个对象是否相等</li>
</ul>
</li>
<li><code>HashSet</code> 中只允许一个 <code>null</code> 元素</li>
<li>具有良好的存取和查找性能</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Map</h3>
<ul>
<li><code>Map</code> 中的数据是以键值对 <code>key-value</code> 的形式存储的</li>
<li><code>Key-value</code> 以 <code>Entry</code> 类型的对象实例存在</li>
<li>可以通过 <code>key</code> 值快速的查找 <code>value</code></li>
<li>一个映射不能包含重复的建</li>
<li>每个键最多只能映射到一个值</li>
</ul>
<h4> HashMap</h4>
<ul>
<li>
<p>基于哈希表的 <code>Map</code> 接口的实现</p>
</li>
<li>
<p>允许使用<code>null</code> 键和 <code>null</code> 值</p>
</li>
<li>
<p>键不允许重复</p>
</li>
<li>
<p><code>HashMap</code> 中的 <code>Entry</code> 对象是无序排列的</p>
</li>
<li>
<p>方法</p>
<ul>
<li>
<p>查找数据：<code>keySet()</code></p>
<ul>
<li>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li></li>
</ul>
</li>
<li>
<p>添加数据：<code>put(key,value)</code></p>
</li>
<li>
<p>打印数据：</p>
<ul>
<li>
<p>使用迭代器打印值：<code>Iterator </code> -&gt; <code>classObj.values().iterator()</code></p>
</li>
<li>
<p>通过 <code>entrySet</code> 打印 <code>key</code> 和 <code>value</code></p>
<ul>
<li>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> 集合排序</h3>
<blockquote>
<p>使用 <code>Collections</code> 类的 <code>sort()</code> 方法</p>
</blockquote>
<ul>
<li><code>sort(List&lt;T&gt; list)</code>：根据元素的自然顺序对指定列表按升序进行排序</li>
</ul>
<h4> 整数排序</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 字符串排序</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 对象排序</h4>
<h5> Comparator</h5>
<ul>
<li>
<p>强行对某个对象进行整体排序的比较函数</p>
</li>
<li>
<p>可以将 <code>Comparator</code> 传递给 <code>sort</code> 方法</p>
<ul>
<li><code>Collections.sort</code></li>
<li><code>Arrays.sort</code></li>
</ul>
</li>
<li>
<p>方法</p>
<ul>
<li><code>int compare(T o1, T o2)</code>：比较用来排序的两个参数
<ul>
<li>如果 <code>o1&lt;o2</code>，返回 负整数</li>
<li>如果 <code>o1==o2</code>，返回 0</li>
<li>如果 <code>o1&gt;o2</code>，返回 正整数</li>
</ul>
</li>
<li><code>boolean equals(Object obj)</code>：只是某个对象是否 “等于” 此 <code>Comparator</code>
<ul>
<li>此方法可以被 <code>Object</code> 类中的 <code>equals</code> 方法覆盖，不必重写</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> Comparable</h5>
<ul>
<li>
<p>此接口强行对实现它的每个类的对象进行整体排序</p>
</li>
<li>
<p>这种排序被称为类的自然排序，类的 <code>compareTo</code> 方法被称为它的自然比较方法</p>
<ul>
<li><code>Collections.sort</code></li>
<li><code>Arrays.sort</code></li>
</ul>
</li>
<li>
<p>方法</p>
<ul>
<li><code>int compareTo(T o)</code>：该对象小于、等于、大于指定对象，则分别返回负整数、零、正整数</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> 区别</h5>
<table>
<thead>
<tr>
<th>Comparator</th>
<th>Comparable</th>
</tr>
</thead>
<tbody>
<tr>
<td>位于 <code>java.util</code> 包</td>
<td>位于 <code>java.lang</code> 包</td>
</tr>
<tr>
<td>在要比较的类的外部实现该接口</td>
<td>再要比较的类上实现该接口</td>
</tr>
<tr>
<td>调用 <code>sort</code> 方法时，要指定 <code>Comparator</code> 的实现类</td>
<td>调用 <code>sort</code> 方法时，只需要指定集合名称即可</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">基本概念</title>
    <id>https://codemake.fun/notes/java/01.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</id>
    <link href="https://codemake.fun/notes/java/01.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"/>
    <updated>2023-02-27T13:31:55.000Z</updated>
    <summary type="text">JVMJava 虚拟机，全称：Java Virtual Machine; JVM 是 Java 平台无关性实现的关键; JREJava 运行时环境，全称：Java Runtime Environment; 包括 Java 虚拟机(JVM)、Java 核心类库和支持文件; 和 JDK 的区别; 如果只需要运行 Java 程序, 下载并安装 J...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> JVM</h2>
<ul>
<li>Java 虚拟机，全称：Java Virtual Machine</li>
<li>JVM 是 Java 平台无关性实现的关键</li>
</ul>
<h2> JRE</h2>
<ul>
<li>Java 运行时环境，全称：Java Runtime Environment</li>
<li>包括 Java 虚拟机(JVM)、Java 核心类库和支持文件</li>
<li>和 JDK 的区别
<ul>
<li>如果只需要运行 Java 程序, 下载并安装 JRE 即可</li>
<li>如果要开发 Java 软件，需要下载 JDK</li>
</ul>
</li>
<li>面向使用人员</li>
</ul>
<h2> JDK</h2>
<ul>
<li>Java 语言的软件开发工具包，全称：Java Development Kit</li>
<li>两个主要组件
<ul>
<li>javac：编译器，将源程序转成字节码</li>
<li>java：运行编译后的 java 程序( .class 后缀的 )</li>
</ul>
</li>
<li>JDK 中 附带有 JRE</li>
<li>面向开发人员</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/QQ截图20201210232749.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> Java 平台</h2>
<ul>
<li>Java ME：Java 微型版，主要用于开发移动设备</li>
<li>Java SE：Java 标准版，主要用于开发桌面程序</li>
<li>Java EE：Java 企业版，主要用于 Web 程序</li>
</ul>
<h2> 执行流程</h2>
<ul>
<li>解释执行的过程由虚拟机完成</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/QQ截图20201210231245.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 环境变量配置</h2>
<h3> windows</h3>
<ul>
<li>右键 <code>计算机</code> -&gt; <code>属性</code> -&gt; <code>高级系统设置</code> -&gt; <code>环境变量</code>
<ul>
<li><code>系统变量</code> 中添加变量 <code>JAVA_HOME</code>，值为 <code>jdk</code> 安装路径，例如 <code>E:\Develop\java\jdk1.8.0_311</code></li>
<li><code>系统变量</code> -&gt; <code>Path</code> 中添加一行 <code>%JAVA_HOME%\bin</code></li>
</ul>
</li>
</ul>
<h3> macos</h3>
<ul>
<li>修改命令行配置文件（ <code>.zshrc  </code> 或 <code>.bash_profile</code> ），添加如下代码</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>刷新命令行配置文件</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 命令</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">数据类型</title>
    <id>https://codemake.fun/fe/javascript/knowledge/01.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/01.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <updated>2023-02-21T06:41:21.000Z</updated>
    <summary type="text">数据类型分类; 基本数据类型：; Undefined、; Null、; Boolean、; Number、; BigInt; String、; Symbol; 复杂数据类型：; Object; Undefined 类型Undefined 类型只有一个值，即 undefined; 使用 var 声明变量但未初始化时，值为 und...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 数据类型</h2>
<ul>
<li>分类
<ul>
<li>基本数据类型：
<ul>
<li><code>Undefined</code>、</li>
<li><code>Null</code>、</li>
<li><code>Boolean</code>、</li>
<li><code>Number</code>、</li>
<li><code>BigInt</code></li>
<li><code>String</code>、</li>
<li><code>Symbol</code></li>
</ul>
</li>
<li>复杂数据类型：
<ul>
<li><code>Object</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> Undefined 类型</h3>
<ul>
<li>Undefined 类型只有一个值，即 undefined</li>
<li>使用 <code>var</code> 声明变量但未初始化时，值为 undefined</li>
<li>对未声明的变量 <code>typeof</code> 时，也会返回 undefined</li>
<li>相等性检查 == 中，undefined 只与 null 相等</li>
</ul>
<h3> Null 类型</h3>
<ul>
<li>Null 类型只有一个值，即 null</li>
<li>从逻辑角度看，null 表示空对象指针</li>
<li>console.log(typeof null); // object</li>
<li>undefined 值派生自 null 值
<ul>
<li>console.log(null==undefined); // true</li>
</ul>
</li>
</ul>
<div style="color:#f00">**undefined** 和 **null** 在相等性检查 `==` 中不会进行任何类型转换，除非你非常清楚自己在做什么，否则永远不要使用 <code>&gt;= &gt; &lt; &lt;=</code> 去比较一个可能为 `null/undefined` 的变量。对于取值可能是 `null/undefined` 的变量，请按需要分别检查它的取值情况</div>
<h3> Boolean 类型</h3>
<ul>
<li>该类型只有两个值： <code>true</code>、<code>false</code>，并且区分大小写</li>
<li>一个值要转化为 Boolean 值，可以调用 Boolean()</li>
</ul>
<h4> 其他类型转化为布尔值的规则</h4>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>转化为 true 的值</th>
<th>转化为 false 的值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Boolean</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>任何非空字符串</td>
<td>空字符串</td>
</tr>
<tr>
<td>Number</td>
<td>任何非零数字值(包括无穷大)</td>
<td>0 和 NaN</td>
</tr>
<tr>
<td>Object</td>
<td>任何对象</td>
<td>null</td>
</tr>
<tr>
<td>Undefined</td>
<td>不存在</td>
<td>undefined</td>
</tr>
</tbody>
</table>
<h3> Number 类型</h3>
<ul>
<li>使用 IEEE754 格式来表示整数和浮点数值(双精度数值)</li>
<li>十进制</li>
<li>八进制
<ul>
<li>以 8 为基数</li>
<li>第一位必须是 0，后面为八进制数字序列（0~7）</li>
<li>如果字面值的数值超出范围，则前导 0 被忽略，后面的数被当做十进制数值</li>
<li>八进制字面量在严格模式下无效，会报错</li>
</ul>
</li>
<li>十六进制
<ul>
<li>以 16 为基数</li>
<li>前两位必须是 0x，后面为十六进制数字序列（0-9 及 A~F），不区分大小写</li>
</ul>
</li>
<li>在进行算数计算时，所有的八进制和十六进制表示的数值都将被换成十进制数值</li>
<li>NaN，即非数值，是一个特殊的数值
<ul>
<li>表示一个本来要返回数值的操作数未返回数值的情况（不会抛出错误）</li>
<li>任何数值除以 0 都会返回 NaN，不会影响其它代码执行</li>
<li>任何涉及 NaN 的操作（例如 NaN/10）都会返回 NaN</li>
<li>NaN 与任何值都不相等，包括其本身
<ul>
<li>console.log(NaN==Nan); // false</li>
</ul>
</li>
<li>isNaN() 接受一个任意类型参数，判断这个参数是否 “不是数值”（尝试转化为数值），并返回布尔值
<ul>
<li>不能被转化为数值的值返回 true</li>
<li>能转化为数值的值返回 false</li>
</ul>
</li>
</ul>
</li>
<li>注意：
<ul>
<li>浮点数精度问题
<ul>
<li>0.1+0.2=0.30000000000000004（不要测试某个特定的浮点数值）</li>
</ul>
</li>
<li>数值范围
<ul>
<li>最小数值 Number.MIN_VALUE，大多数浏览器中，这个值是 5e-324</li>
<li>最大数值 Number.MAX_VALUE，大多数浏览器中，这个值是 1.7976931348623157e+308</li>
<li>如果计算超出了这个数值范围，这个数值将被自动转换成特殊的 Infinity 值
<ul>
<li>-Infinity 负无穷</li>
<li>Infinity 正无穷</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>三个将非数值转化为数值的函数：Number()、parseInt()、parseFloat()</li>
</ul>
<h4> Number() 函数转换规则</h4>
<ul>
<li>如果是布尔值，true 和 false 将分别被转换为 1 和 0</li>
<li>如果是数字值，只是简单的传入和返回</li>
<li>如果是 null 值，返回 0</li>
<li>如果是 undefined ，返回 NaN</li>
<li>如果是字符串，遵循下列规则
<ul>
<li>如果字符串中只包含数字（包括前面带正号或符号的情况），则将其转换为十进制数值（会忽略前导 0）</li>
<li>如果字符串包含有效的浮点格式，则将其转换为对应的浮点数值（会忽略前导 0）</li>
<li>如果字符串包含有效的十六进制格式，则将其转换为对应的十进制整数值</li>
<li>如果字符串是空的（不包含任何字符），则将其转换为 0</li>
<li>如果字符串包含上述格式以外的字符，则将其转换为 NaN</li>
<li>如果是对象，则调用对象的 valueOf() 方法，然后依照前面的规则转换反悔的值。如果转换的结果是 NaN，则调用对象的 toString() 方法，然后再次依照前面的规则转换反悔的字符串值</li>
</ul>
</li>
<li>一元加操作符的操作与 Number() 函数相同</li>
</ul>
<h4> parseInt() 函数转换规则</h4>
<ul>
<li>空字符串，返回 NaN</li>
<li>忽略字符串前的空格，直至找到第一个非空字符串</li>
<li>如果第一个字符不是数字或者正负号，返回 NaN</li>
<li>如果第一个字符是数字字符，则会继续解析后续字符直至遇到一个非数字字符</li>
<li>遇到小数点也会停止，因为小数点不是有效的数字字符</li>
<li>能识别出其他进制数字字符，转化为十进制返回</li>
<li>八进制的字面量字符串存在分歧，可以携带第二个参数，表示转化是使用的基数（即进制）
<ul>
<li>console.log(parseInt("0xAF",16)); // 175 (可以省略 0x)</li>
</ul>
</li>
</ul>
<h4> parseFloat() 函数转换规则</h4>
<ul>
<li>parseFloat() 与 parseInt() 函数类似</li>
<li>解析过程成遇到的第一个小数点有效，第二个小数点无效</li>
<li>只解析十进制，没有第二个参数</li>
<li>十六进制字符串始终会被转换成 0</li>
<li>如果字符串包含的是一个可解析为整数的数（没有小数点，或小数点后面都是 0），则函数会返回整数</li>
</ul>
<h3> String 类型</h3>
<ul>
<li>两个将一个值转化为一个字符串的函数：toString()、String()</li>
</ul>
<h4> toString() 函数转换规则</h4>
<ul>
<li>数值、布尔值、对象和字符串都有 toString() 方法，该方法返回字符串的一个副本</li>
<li>null 和 undefined 值没有这个方法</li>
<li>多数情况下，toString() 方法不用传递参数</li>
<li>调用数值的 toString() 方法时，可以传递一个参数，表示输出数值的基数（进制，默认为 10）</li>
</ul>
<h4> String() 函数转换规则</h4>
<ul>
<li>在不知道要转换的值是不是 null 或 undefined 的情况下可以使用，可以将任何类型的值转换为字符串</li>
<li>如果值有 toString() 方法，则调用该方法（没有参数）并返回相应结果</li>
<li>如果值是 null ，则返回 “null”</li>
<li>如果值是 undefined ，则返回 “unfined”</li>
</ul>
<h3> Object 类型</h3>
<ul>
<li>一组数据和功能的集合</li>
<li>Object 类型所具有的任何属性和方法也同样存在于更具体的对象中</li>
</ul>
<h4> Object 的每个实例都具有以下属性和方法</h4>
<ul>
<li>Constructor：保存着用于创建当前对象的函数</li>
<li>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在
<ul>
<li>作为参数的属性名(propertyName)必须以字符串形式指定
<ul>
<li>例如：o.hasOwnProperty("name")</li>
</ul>
</li>
</ul>
</li>
<li>isPrototypeOf(object)：用于检查传入的对象是否是另一个对象的原型</li>
<li>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用 for-in 语句来枚举。
<ul>
<li>作为参数的属性名(propertyName)必须以字符串形式指定</li>
</ul>
</li>
<li>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</li>
<li>toString()：返回对象的字符串表示</li>
<li>valueOf()：返回对象的字符串、数值或布尔值表示。通常与 toString() 方法的返回值相同</li>
</ul>
<h2> 类型判断</h2>
<h3> typeof 操作符</h3>
<blockquote>
<p>是确定一个变量是 字符串、数值、布尔值还是 undefined 的最佳工具<br>如果值是一个对象或 null ，结果返回 object<br>如果值是函数，该操作符会返回 function<br>如果值是正则表达式，则可能返回 function 或 object （浏览器差异）</p>
</blockquote>
<ul>
<li>语法：<code>typeof x</code> 或 <code>typeof(x)</code></li>
<li>返回变量数据类型的字符串，返回结果如下
<ul>
<li><code>undefined</code>：值 未定义</li>
<li><code>boolean</code>：值为 布尔值</li>
<li><code>string</code>：值为 字符串</li>
<li><code>number</code>：值为 数值</li>
<li><code>bigint</code>：值为特大的数值</li>
<li><code>object</code>：值为 对象或 null</li>
<li><code>function</code>：值为 函数</li>
<li><code>symbol</code>：值位 symbol</li>
</ul>
</li>
</ul>
<h3> instanceof 操作符</h3>
<ul>
<li>语法：<code>result = variable instanceof constructor</code></li>
<li>如果变量是给定引用类型（根据原型链识别）的实例则返回 true
<ul>
<li>所有引用类型都是 <code>Object</code> 的实例，在检测一个应用类型值和 <code>Object</code> 构造函数时，<code>instanceof</code> 操作符始终会返回 <code>true</code></li>
<li>如果使用 <code>instanceof</code> 操作符检测基本数据类型的值，该操作符始终返回 <code>false</code> ，因为基本类型不是对象</li>
</ul>
</li>
</ul>
<h3> 比 typeof 运算符更准确的类型判断</h3>
<p>不同数据类型的<code>Object.prototype.toString</code>方法返回值如下。</p>
<ul>
<li>数值：返回<code>[object Number]</code>。</li>
<li>字符串：返回<code>[object String]</code>。</li>
<li>布尔值：返回<code>[object Boolean]</code>。</li>
<li>undefined：返回<code>[object Undefined]</code>。</li>
<li>null：返回<code>[object Null]</code>。</li>
<li>数组：返回<code>[object Array]</code>。</li>
<li>arguments 对象：返回<code>[object Arguments]</code>。</li>
<li>函数：返回<code>[object Function]</code>。</li>
<li>Error 对象：返回<code>[object Error]</code>。</li>
<li>Date 对象：返回<code>[object Date]</code>。</li>
<li>RegExp 对象：返回<code>[object RegExp]</code>。</li>
<li>其他对象：返回<code>[object Object]</code>。</li>
</ul>
<p>这就是说，<code>Object.prototype.toString</code>可以看出一个值到底是什么类型。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用这个特性，可以写出一个比<code>typeof</code>运算符更准确的类型判断函数。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这个<code>type</code>函数的基础上，还可以加上专门判断某种类型数据的方法。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-21T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">New 命令原理</title>
    <id>https://codemake.fun/fe/javascript/knowledge/05.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/05.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86.html"/>
    <updated>2023-02-22T06:55:56.000Z</updated>
    <summary type="text">运行过程 使用 new 命令时，它后面的函数依次执行下面的步骤： 1. 创建一个空对象，作为将要返回的实例对象。 2. 将这个空对象的原型，指向构造函数的 prototype 属性。 3. 将这个空对象赋值给函数内部的 this 关键字。 4. 开始执行构造函数内部的代码。 5. 如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 运行过程</h2>
<blockquote>
<p>使用 new 命令时，它后面的函数依次执行下面的步骤：</p>
</blockquote>
<ol>
<li>创建一个空对象，作为将要返回的实例对象。</li>
<li>将这个空对象的原型，指向构造函数的 prototype 属性。</li>
<li>将这个空对象赋值给函数内部的 this 关键字。</li>
<li>开始执行构造函数内部的代码。</li>
<li>如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实例对象。</li>
</ol>
<h2> 代码实现</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2022-02-22T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">字符编码</title>
    <id>https://codemake.fun/notes/other/encode.html</id>
    <link href="https://codemake.fun/notes/other/encode.html"/>
    <updated>2023-02-23T09:28:12.000Z</updated>
    <summary type="text">码点 某个字符规定对应的数值 ```javascript // 根据字符获取码点 const str = &amp;apos;a&amp;apos; console.log(str.codePointAt()) // 97 // 根据码点获取字符 console.log(String.fromCodePoint(97)) // a ``` 码元 Javascript 字符串的 len...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 码点</h2>
<blockquote>
<p>某个字符规定对应的数值</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 码元</h2>
<blockquote>
<p>Javascript 字符串的 length 属性返回的是 码元</p>
</blockquote>
<ul>
<li>
<p>对于 UTF-16 来说，一个码元是 16bit（两个字节）</p>
</li>
<li>
<p>对于 UTF-32 来说，一个码元是 32bit（四个字节）</p>
</li>
<li>
<p>JavaScript 内部，字符以 UTF-16（字符用两个字节或四个字节表示的格式储存）</p>
<ul>
<li>码点范围介于 <code> 0-65535</code> 的字符，两个字节</li>
<li>Unicode 码点大于 <code>65535</code> 的字符，四个字节</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>codePointAt</code> 与 <code>charCodeAt</code> 接受的索引值都是根据码元
<code>codePointAt</code> 函数匹配规则是码点，当它匹配到当前索引的码元后会识别当前的码元是否和后面的码元能否构成一个码点，如果是
一个码点，则返回这两个码元的码点，如果不能构成一个码点，就按照当前的码元返回码点</p>
<p>ES6 考虑到了这个问题，其原型上实现了 <code>Symbol.iterator</code>，使得其可以使用 <code>for of</code> 来遍历其值</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220103844034.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> ASCLL 码</h2>
<blockquote>
<p>美国标准信息交换代码啊</p>
</blockquote>
<ul>
<li>ASCII 码占用一个字节，一个字节为 8 个 bit 位</li>
<li>ASCI 码第一位始终是 0，那么实际可以表示的状态是 2^7=128 种字符</li>
<li>EASCLL 码，为了适应更多字符（128-255），不常用</li>
</ul>
<h3> 码表</h3>
<table>
<thead>
<tr>
<th><strong>ASCII 值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII 值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII 值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII 值</strong></th>
<th><strong>控制字符</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>NUL</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>！</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>”</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>'</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>\</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>~</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>—</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody>
</table>
<h3> 说明</h3>
<blockquote>
<p>0-31 为控制字符；32-126 为打印字符；127 为 Delete(删除)命令</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>十进制</strong></th>
<th><strong>十六进制</strong></th>
<th><strong>字符</strong></th>
<th><strong>十进制</strong></th>
<th><strong>十六进制</strong></th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>00</td>
<td>空</td>
<td>16</td>
<td>10</td>
<td>数据链路转意</td>
</tr>
<tr>
<td>1</td>
<td>01</td>
<td>头标开始</td>
<td>17</td>
<td>11</td>
<td>设备控制 1</td>
</tr>
<tr>
<td>2</td>
<td>02</td>
<td>正文开始</td>
<td>18</td>
<td>12</td>
<td>设备控制 2</td>
</tr>
<tr>
<td>3</td>
<td>03</td>
<td>正文结束</td>
<td>19</td>
<td>13</td>
<td>设备控制 3</td>
</tr>
<tr>
<td>4</td>
<td>04</td>
<td>传输结束</td>
<td>20</td>
<td>14</td>
<td>设备控制 4</td>
</tr>
<tr>
<td>5</td>
<td>05</td>
<td>查询</td>
<td>21</td>
<td>15</td>
<td>反确认</td>
</tr>
<tr>
<td>6</td>
<td>06</td>
<td>确认</td>
<td>22</td>
<td>16</td>
<td>同步空闲</td>
</tr>
<tr>
<td>7</td>
<td>07</td>
<td>震铃</td>
<td>23</td>
<td>17</td>
<td>传输块结束</td>
</tr>
<tr>
<td>8</td>
<td>08</td>
<td>backspace</td>
<td>24</td>
<td>18</td>
<td>取消</td>
</tr>
<tr>
<td>9</td>
<td>09</td>
<td>水平制表符</td>
<td>25</td>
<td>19</td>
<td>媒体结束</td>
</tr>
<tr>
<td>10</td>
<td>0A</td>
<td>换行/新行</td>
<td>26</td>
<td>1A</td>
<td>替换</td>
</tr>
<tr>
<td>11</td>
<td>0B</td>
<td>竖直制表符</td>
<td>27</td>
<td>1B</td>
<td>转意</td>
</tr>
<tr>
<td>12</td>
<td>0C</td>
<td>换页/新页</td>
<td>28</td>
<td>1C</td>
<td>文件分隔符</td>
</tr>
<tr>
<td>13</td>
<td>0D</td>
<td>回车</td>
<td>29</td>
<td>1D</td>
<td>组分隔符</td>
</tr>
<tr>
<td>14</td>
<td>0E</td>
<td>移出</td>
<td>30</td>
<td>1E</td>
<td>记录分隔符</td>
</tr>
<tr>
<td>15</td>
<td>0F</td>
<td>移入</td>
<td>31</td>
<td>1F</td>
<td>单元分隔符</td>
</tr>
</tbody>
</table>
<h2> Unicode 码</h2>
<blockquote>
<p>又称统一码、万国码，为世界上所有字符都分配了一个唯一的编号（码点），并没有规定存储方式</p>
</blockquote>
<ul>
<li>编号范围（十六进制）从<code> 0x000000</code> 到 <code>0x10FFFF</code>，有 100 多万(1114112）个</li>
<li>每个字符都有一个唯一的 Unicode 编号</li>
<li>Unicode 是字符集，为了兼容 ASCIL，规定 <code>0-127</code>个字符是和 ASCIl 是一样的，不一样的是 <code>128-255</code> 这一部分</li>
</ul>
<h2> 字符表示方式</h2>
<h3> \</h3>
<blockquote>
<p><code>\</code> <strong>转义字符</strong>，是一个特殊的存在</p>
<p>大多数情况下，不产生什么作用，只对一些特殊的字符起作用</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220093742715.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>

<blockquote>
<p>表示码点范围值为 0-255，有些特殊码点的字符不能被正常显示</p>
<p><strong>模板字符串中不能直接使用</strong>，需要使用单引号包裹 <code>${字符'\56'}</code></p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220094256487.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> \x 两位十六进制</h3>
<blockquote>
<p>表示码点范围值为 0-255，有些特殊码点的字符不能被正常显示</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220094435890.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> \u 四位十六进制</h3>
<blockquote>
<p>表示码点范围值为 0-65535，固定 4 位十六进制</p>
</blockquote>
<ul>
<li>
<p>少于四位时会报语法错误</p>
</li>
<li>
<p>多余四位时，多余字符原样输出</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220095150454.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> \u {十六进制} &nbsp;</h3>
<blockquote>
<p>ES6 新增能力，可以表示超出 65535 范围的字符</p>
<p>在 CSS 中可以不写 u 和大括号，例如 <code>a::before{ content: '\1234';}</code></p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220095409284.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 字符实际应用</h2>
<ul>
<li>正则匹配常用中文</li>
<li>去掉空白字符</li>
<li>等等...</li>
</ul>
<h2> UTF-8/UTF-16</h2>
<blockquote>
<p>均是 Unicode 编码的一种实现，定义了编码在计算机中的存储方式</p>
</blockquote>
<ul>
<li>
<p>UTF-8 是互联网使用最多的一种 Unicode 的实现方式</p>
<ul>
<li>变长的编码方式（1-4 个字节）</li>
</ul>
</li>
<li>
<p><strong>JavaScript 代码中的字符和 localStrage 存储的字符是基于 UTF-16 编码的</strong></p>
</li>
<li>
<p>cookie 存储的字符是基于 UTF-8 编码的</p>
</li>
<li>
<p>UTF-16 缺点</p>
<ul>
<li>空间浪费，最低单元采用了两个字节</li>
<li>目前 Unicode5.0 收录的字符已经超过了 UTF-16 所能表达的最大范围</li>
</ul>
</li>
</ul>
<h2> Base64</h2>
<h3> 说明</h3>
<blockquote>
<p><strong>Base64 编码后的数据都是 ASCll 字符</strong></p>
</blockquote>
<p>早期邮件传输协议基于 ASCII 文本，对于诸如图片、视频等二进制文件处理并不好。ASCII 主要用于显示现代英文，到目前为业只定义了 128 个字符，包含控制字符和可显示字符为了解决上述问题，Base64 编码顺势而生。
Base64 是编解码，主要的作用不在于安全性，而在于让内容能在各个网关间无错的传输，这才是 Base64 编码的核心作用。</p>
<h3> 组成</h3>
<blockquote>
<p>64 表示编码后的字符由 64 种字符排列组合而成</p>
<p>还有一个字符 <code>=</code>（最多出现两次），是填充字符，不属于 64 里面的范畴</p>
</blockquote>
<ul>
<li>A-Z（26）</li>
<li>a-z（26）</li>
<li>0-9（10）</li>
<li><code>+</code>、<code>/</code>（2）</li>
</ul>
<h3> 优缺点</h3>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>可以将二进制数据（比如图片）转化为可打印字符，方便传输数据</li>
<li>对数据进行简单的加密，肉眼是安全的</li>
<li>如果是在 html 或者 css 处理图片，可以减少 http 请求</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>内容编码后体积变大，至少 1/3，因为是三字节变成四个字节，当只有一个字节的时候，也至少会变成三个字节</li>
<li>编码和解码需要额外工作量</li>
</ul>
<h3> 应用</h3>
<h4> Canvas 图片生成</h4>
<blockquote>
<p>canvas 的 toDataURL 方法可以把 canvas 画布内容转成 base64 编码格式包含图片展示的 data URI</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 文件获取</h4>
<blockquote>
<p>FileReader 的 readAsDataURL 方法可以把上传的文件转为 base64 格式的 data URI，比较常见的场景是用户头像的剪裁和上传</p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> JWT</h4>
<blockquote>
<p>JSON Web Token：前后端安全校验机制</p>
</blockquote>
<ul>
<li>由 <code>header</code>、 <code>payload</code>、<code>signature</code> 三部分组成</li>
<li><code>header </code>和 <code>payload</code> 解码后，是明文看见的</li>
</ul>
<h4> 图片优化</h4>
<ul>
<li>
<p>直接用 base64 编码之后的字符代替小图片</p>
</li>
<li>
<p>减少一次请求，浏览器默认请求网站图标 favicon.ico，替换为最小图片字符之后可以节约一次网络请求</p>
</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>最小图片字符计算由来</p>
</blockquote>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> SourceMap</h4>
<blockquote>
<p>SourceMap 中的 Mappings 字段使用 Base64 编码的，不可直接解码</p>
</blockquote>
<h4> 混淆加密代码</h4>
<blockquote>
<p>著名的代码混淆库 <code>javascript-obfuscator</code> 中有 base64 的应用，<code>webpack-obfuscator</code> 也是基于其封装的</p>
</blockquote>
<h4> 其他</h4>
<blockquote>
<p>X.509、GitHub SSH Key、mht 文件、邮件附件等等</p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="other"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-02-20T00:00:00.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">盒模型</title>
    <id>https://codemake.fun/fe/css/knowledge/01.%E7%9B%92%E6%A8%A1%E5%9E%8B.html</id>
    <link href="https://codemake.fun/fe/css/knowledge/01.%E7%9B%92%E6%A8%A1%E5%9E%8B.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">背景 场景：假如项目布局使用的是自适应的布局方式，div 给出的宽度是百分比的形式，即占窗口宽度的 100%，但边框border和内边距padding是用像素来表示的，此时就会造成一个问题是 div 总宽度超过窗口宽度。为了避免这种问题，可以使用属性box-sizing:border-box来把 标准盒模型 变成 代替(IE)盒模型 ，从而使 div...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 背景</h2>
<blockquote>
<p>场景：假如项目布局使用的是<strong>自适应</strong>的布局方式，div 给出的宽度是<strong>百分比</strong>的形式，即占窗口宽度的 100%，但边框<code>border</code>和内边距<code>padding</code>是用像素来表示的，此时就会造成一个问题是 div 总宽度超过窗口宽度。为了避免这种问题，可以使用属性<code>box-sizing:border-box</code>来把 <strong>标准盒模型</strong> 变成 <strong>代替(IE)盒模型</strong> ，从而使 div 的总宽度依然是 100%</p>
</blockquote>
<!-- more -->
<h2> 什么是 CSS 盒模型?</h2>
<p>页面布局中，一个元素的外边距（margin）、 边框（border）、内边距（padding）、内容（content）组成一个盒模型。盒模型可分为<strong>标准盒模型</strong> 和 <strong>代替（IE）盒模型</strong>。</p>
<h2> 标准盒模型</h2>
<p>在标准模型中，如果你给盒设置 <code>width</code> 和 <code>height</code>，实际设置的是内容区域( <em>content box</em>)的宽高。 <code>padding</code> 和 <code>border</code> 再加上设置的宽高一起决定整个盒子的大小。</p>
<p><strong>示例：</strong></p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用标准模型，元素总宽度 = 160px （100+25+25+5+5），总高度 = 110px (50 + 25 + 25 + 5 + 5)，即内容区域<code>content box</code>加 <code>padding</code> 和 <code>border</code> 。</p>
<blockquote>
<p><strong>注</strong>: margin 不计入实际大小 —— 当然，它会影响盒子在页面所占空间，但是影响的是盒子外部空间。</p>
</blockquote>
<h2> 代替（IE）盒模型</h2>
<p>你可能会认为盒子的大小还要加上边框和内边距，这样很麻烦。 因为这个原因，css 还有一个替代盒模型。使用这个模型，所有宽度都是可见宽度，所以内容宽度是该宽度减去边框和填充部分。使用上面相同的样式得到总宽高是 width = 100px, height = 50px。</p>
<p>默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 <code>box-sizing: border-box</code> 来实现。 这样就可以告诉浏览器使用 <code>border-box</code> 来定义区域，从而设定您想要的大小。</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> box-sizing 属性</h2>
<p>CSS 中的 <strong><code>box-sizing</code></strong> 属性用于告诉浏览器如何计算一个元素是总宽度和总高度</p>
<iframe class="interactive" frameborder="0" height="390" src="https://interactive-examples.mdn.mozilla.net/pages/css/box-sizing.html" title="MDN Web Docs Interactive Example" width="100%"></iframe>
<p>在 <a href="https://developer.mozilla.org/zh-CN/docs/CSS/Box_model" target="_blank" rel="noopener noreferrer">CSS 盒子模型</a> 的默认定义里，你对一个元素所设置的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noopener noreferrer"><code>width</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noopener noreferrer"><code>height</code></a> 只会应用到这个元素的内容区。如果这个元素有任何的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border" target="_blank" rel="noopener noreferrer"><code>border</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding" target="_blank" rel="noopener noreferrer"><code>padding</code></a> ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。</p>
<p>box-sizing 属性可以被用来调整这些表现:</p>
<ul>
<li>
<p><code>content-box</code> 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</p>
<ul>
<li>
<p>尺寸计算公式：</p>
<p><code>width</code> = 内容的宽度</p>
<p><code>height</code> = 内容的高度</p>
</li>
</ul>
</li>
<li>
<p><code>border-box</code> 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</p>
<ul>
<li>
<p>尺寸计算公式：</p>
<p><em><code>width</code> = border + padding + 内容的宽度</em></p>
<p><em><code>height</code> = border + padding + 内容的高度</em></p>
</li>
</ul>
</li>
</ul>
<p>来源：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing</a></p>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Flex 布局</title>
    <id>https://codemake.fun/fe/css/knowledge/02.Flex%20%E5%B8%83%E5%B1%80.html</id>
    <link href="https://codemake.fun/fe/css/knowledge/02.Flex%20%E5%B8%83%E5%B1%80.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">简介 display: flex： 意为&amp;quot;弹性布局&amp;quot;，用来为盒状模型提供最大的灵活性 display: inline-flex： 创建一个弹性容器，行为类似于 inline-block 元素。它会跟其他行内元素一起流式排列，但不会自动增长到 100%的 宽度。内部的弹性子元素跟使用 display: flex 创建的 Flexbox 里的弹性子元素...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 简介</h2>
<blockquote>
<p><code>display: flex</code>： 意为"弹性布局"，用来为盒状模型提供最大的灵活性</p>
</blockquote>
<blockquote>
<p><code>display: inline-flex</code>： 创建一个弹性容器，行为类似于 <code>inline-block</code> 元素。它会跟其他行内元素一起流式排列，但不会自动增长到 100%的 宽度。内部的弹性子元素跟使用 display: flex 创建的 Flexbox 里的弹性子元素行为 一样。在实际开发时，很少用到 display: inline-flex。</p>
</blockquote>
<h3> 特性</h3>
<ul>
<li>消除块级元素特性（之后所有设置的 <code>display: block;</code> 都是无效的）</li>
<li>设为 <code>flex</code> 布局以后，子元素的 <code>float</code> 、<code>clear</code> 和 <code>vertical-align</code> 等属性将失效</li>
<li>采用 <code>flex</code> 布局的元素，称为 flex 容器，简称 <strong>容器</strong>，所有子元素自动成为容器成员，称为 flex 项目，简称 <strong>项目</strong></li>
<li>容器默认存在两根轴，水平的主轴和与其垂直的交叉轴</li>
</ul>
<h3> 空间</h3>
<ul>
<li>主轴的开始位置（与边框的交叉点）叫做 <code>main start</code>，结束位置叫做 <code>main end</code></li>
<li>交叉轴的开始位置叫做 <code>cross start</code>，结束位置叫做 <code>cross end</code></li>
<li>项目默认沿主轴排列</li>
<li>单个项目占据的主轴空间叫做 <code>main size</code>，占据的交叉轴空间叫做 <code>cross size</code></li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/20210426210125.png" alt="bg2015071004" tabindex="0" loading="lazy"><figcaption>bg2015071004</figcaption></figure>
<h2> 容器属性</h2>
<h3> flex-direction</h3>
<ul>
<li>定义主轴的方向（即项目的排列方向）
<ul>
<li><code>row</code>（默认值）：主轴水平方向，起点在左端</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li>
</ul>
</li>
</ul>
<h3> flex-wrap</h3>
<ul>
<li>定义如果一条轴线排不下，如何换行（项目默认都排在一条线轴线上）
<ul>
<li><code>nowrap</code>（默认）：不换行（子元素按比例平均分配）</li>
<li><code>wrap</code>：换行，第一行在上方</li>
<li><code>swrap-reverse</code>：换行，第一行在下方(只是行的顺序变化，元素在行内的顺序不变)</li>
</ul>
</li>
</ul>
<h3> flex-flow</h3>
<ul>
<li><code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式
<ul>
<li>默认值为 <code>row nowrap</code></li>
<li>写法：<code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code></li>
</ul>
</li>
</ul>
<h3> justify-content</h3>
<ul>
<li>定义项目在主轴上的对齐方式
<ul>
<li><code>flex-start</code>（默认值）：向主轴起点方向对齐</li>
<li><code>flex-end</code>：向主轴终点方向对齐</li>
<li><code>center</code>： 向主轴居中对齐</li>
<li><code>space-between</code>：由主轴两端对齐，项目之间的间隔都相等</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li>
</ul>
</li>
</ul>
<h3> align-items</h3>
<ul>
<li>定义项目在交叉轴上如何对齐
<ul>
<li><code>flex-start</code>：向交叉轴起点方向对齐</li>
<li><code>flex-end</code>：向交叉轴终点方向对齐</li>
<li><code>center</code>：向交叉轴的中点对齐</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li>
</ul>
</li>
</ul>
<h3> align-content</h3>
<ul>
<li>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用
<ul>
<li><code>flex-start</code>：向交叉轴起点方向对齐</li>
<li><code>flex-end</code>：向交叉轴终点方向对齐</li>
<li><code>center</code>：向交叉轴的中点对齐</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴</li>
</ul>
</li>
</ul>
<h2> 项目属性</h2>
<h3> Order</h3>
<ul>
<li>定义项目的排列顺序。数值越小，排列越靠前</li>
<li>默认为0（可为负值）</li>
</ul>
<h3> flex-grow</h3>
<ul>
<li>定义项目的放大比例
<ul>
<li>默认为 <code>0</code>，即如果存在剩余空间，也不放大</li>
<li>如果所有项目的 <code>flex-grow</code> 属性都为 <code>1</code>，则它们将等分<strong>剩余空间</strong>（如果有的话）</li>
<li>如果一个项目的 <code>flex-grow</code> 属性为 <code>2</code>，其他项目都为 <code>1</code>，则前者占据的<strong>剩余空间</strong>将比其他项多一倍</li>
</ul>
</li>
</ul>
<h3> flex-shrin</h3>
<ul>
<li>定义了项目的缩小比例
<ul>
<li>默认为 <code>1</code>，即如果空间不足，该项目将缩小（无负值）</li>
<li>如果所有项目的 <code>flex-shrink</code> 属性都为 <code>1</code>，当空间不足时，都将等比例缩小</li>
<li>如果一个项目的 <code>flex-shrink</code> 属性为 <code>0</code>，其他项目都为 <code>1</code>，则空间不足时，前者不缩小</li>
</ul>
</li>
</ul>
<h3> flex-basis</h3>
<ul>
<li>定义了在分配多余空间之前，项目占据的主轴空间（main size）
<ul>
<li>浏览器根据这个属性，计算主轴是否有多余空间</li>
<li>默认值为 <code>auto</code>，即项目的本来大小</li>
<li>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值（比如350px），则项目将占据固定空间</li>
</ul>
</li>
</ul>
<h3> flex</h3>
<ul>
<li>是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写
<ul>
<li>默认值为 <code>0 1 auto</code>，后两个属性可选</li>
<li>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code></li>
<li>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</li>
</ul>
</li>
</ul>
<h3> align-self</h3>
<ul>
<li>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性
<ul>
<li>默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code></li>
<li>写法：<code>align-self: auto | flex-start | flex-end | center | baseline | stretch</code></li>
<li>该属性可能取 6 个值，除了 <code>auto</code>，其他都与 <code>align-items</code> 属性完全一致</li>
</ul>
</li>
</ul>
<br>
<h2> 其他布局方式</h2>
<h3> Flex 布局教程：语法篇</h3>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<h3> CSS Grid 网格布局教程</h3>
<p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p>
<h3> 只要一行代码，实现五种 CSS 经典布局</h3>
<p><a href="http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html</a></p>
<ul>
<li>空间居中布局
<blockquote>
<p>不管容器的大小，项目总是占据中心点</p>
</blockquote>
</li>
<li>并列式布局
<blockquote>
<p>多个项目并列，如果宽度不够，放不下的项目就自动折行</p>
</blockquote>
</li>
<li>两栏式布局
<blockquote>
<p>一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄</p>
</blockquote>
</li>
<li>三明治布局
<blockquote>
<p>页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p>
</blockquote>
</li>
<li>圣杯布局
<blockquote>
<p>最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>参考</p>
</blockquote>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener noreferrer">Flex 布局教程：语法篇</a></li>
<li><a href="https://www.ituring.com.cn/book/2583" target="_blank" rel="noopener noreferrer">《深入解析CSS》</a></li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">权重优先级</title>
    <id>https://codemake.fun/fe/css/knowledge/03.%E6%9D%83%E9%87%8D%E4%BC%98%E5%85%88%E7%BA%A7.html</id>
    <link href="https://codemake.fun/fe/css/knowledge/03.%E6%9D%83%E9%87%8D%E4%BC%98%E5%85%88%E7%BA%A7.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">从 CSS 代码存放位置看权重优先级：; 内嵌样式 &amp;gt; 内部样式表 &amp;gt; 外联样式表; 从样式选择器看权重优先级：; important &amp;gt; 内嵌样式 &amp;gt; ID &amp;gt; 类 伪类 属性选择 &amp;gt; 标签 | 伪对象 &amp;gt; 继承 &amp;gt; 通配符。; important 的权重为 1,0,0,0; ID 的权重为 0,1,0,0; 类的权重为 0,0,1,0;...</summary>
    <content type="html"><![CDATA[<!-- more -->
<ul>
<li>从 CSS 代码存放位置看权重优先级：
<ul>
<li>内嵌样式 &gt; 内部样式表 &gt; 外联样式表</li>
</ul>
</li>
<li>从样式选择器看权重优先级：
<ul>
<li>important &gt; 内嵌样式 &gt; ID &gt; 类 | 伪类 | 属性选择 &gt; 标签 | 伪对象 &gt; 继承 &gt; 通配符。
<ul>
<li>important 的权重为 1,0,0,0</li>
<li>ID 的权重为 0,1,0,0</li>
<li>类的权重为 0,0,1,0</li>
<li>伪类的权重为 0,0,1,0</li>
<li>属性的权重为 0,0,1,0</li>
<li>标签的权重为 0,0,0,1</li>
<li>伪对象的权重为 0,0,0,1</li>
<li>通配符的权重为 0,0,0,0</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">过渡</title>
    <id>https://codemake.fun/fe/css/knowledge/04.%E8%BF%87%E6%B8%A1.html</id>
    <link href="https://codemake.fun/fe/css/knowledge/04.%E8%BF%87%E6%B8%A1.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">```css / 关键字：过度属性 所需时间 速度曲线 何时开始 / transition: width 5s liner 5s ``` html结构 ```html ``` 先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡 ```css .box1&amp;gt;div{ / 给元素所有变化都添加过渡动画, 也可以指...</summary>
    <content type="html"><![CDATA[<!-- more -->
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>html结构</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>鼠标经过元素测试效果</p>
</blockquote>
<div class="box1">
  <b>宽度过渡</b>
  <div class="div1"></div>
  <div class="language-css line-numbers-mode"> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div>
<p><b>背景色过渡</b></p>
  <div class="div2"></div>
  <div class="language-css line-numbers-mode"> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div>
<p><b>按贝塞尔曲线设置的过渡</b></p>
  <div class="div3"></div>
  <div class="language-css line-numbers-mode"> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>
<h3> 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</h3><p>通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等
X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。
如：直线linear，即cubic-bezier(0,0,1,1)</p><p>贝塞尔曲线在线工具：<a href="https://cubic-bezier.com/#.17,.67,.83,.67" target="_blank" rel="noopener noreferrer">https://cubic-bezier.com/#.17,.67,.83,.67<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></p>
</div>
<p>参考：<a href="https://www.w3school.com.cn/css3/index.asp" target="_blank" rel="noopener noreferrer">https://www.w3school.com.cn/css3/index.asp<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></p>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">动画</title>
    <id>https://codemake.fun/fe/css/knowledge/05.%E5%8A%A8%E7%94%BB.html</id>
    <link href="https://codemake.fun/fe/css/knowledge/05.%E5%8A%A8%E7%94%BB.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">属性transition-property：要设置动画的所有属性（多个属性逗号隔开，全部属性使用 all）; transition-duration：动画持续的时间，单位为秒 s 或者毫秒 ms; transition-timing-function：时间函数，表示动画进程在时间上的分布，默认值 ease; linear、`ease、ease-...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 属性</h2>
<ul>
<li><code>transition-property</code>：要设置动画的所有属性（多个属性逗号隔开，全部属性使用 <code>all</code>）</li>
<li><code>transition-duration</code>：动画持续的时间，单位为秒 <code>s</code> 或者毫秒 <code>ms</code></li>
<li><code>transition-timing-function</code>：时间函数，表示动画进程在时间上的分布，默认值 <code>ease</code>
<ul>
<li><code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code> 和 <code>ease-in-out</code></li>
</ul>
</li>
<li><code>transition-delay</code>：动画<strong>开始前</strong>的延迟时间，单位为秒 <code>s</code> 或者毫秒 <code>ms</code></li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 关键帧动画</h2>
<blockquote>
<p>通过 CSS 提供的 <code>@keyframes</code> 规则整合多个简单的动画</p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 贝塞尔曲线</h2>
<blockquote>
<p><strong>贝塞尔曲线可以使动画『超出』其原本的范围</strong></p>
<p>cubic-bezier(x1,y1,x2,y2) 通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)</p>
<p><a href="https://cubic-bezier.com" target="_blank" rel="noopener noreferrer">【贝塞尔曲线在线工具】</a></p>
</blockquote>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 阶跃函数</h2>
<blockquote>
<p>让动画分段进行</p>
</blockquote>
<ul>
<li>语法：<code>steps(number of steps[, start/end])</code>
<ul>
<li><code>number of steps</code>：表示需要拆分为多少段</li>
<li><code>start/end</code>
<ul>
<li><code>start</code> 表示在动画开始时，立即开始第一段的动画</li>
<li><code>end</code>：表示改变不应该在最开始的时候发生，而是发生在每一段的最后时刻</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Stylus 混入(Mixins)</title>
    <id>https://codemake.fun/fe/css/knowledge/06.Stylus%20%E6%B7%B7%E5%85%A5(Mixins).html</id>
    <link href="https://codemake.fun/fe/css/knowledge/06.Stylus%20%E6%B7%B7%E5%85%A5(Mixins).html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">混入(Mixins) 混入和函数定义方法一致，但是应用却大相径庭。 一个简单的混入应用，定义一个超出显示省略号的ellipsis()方法，在需要用到的地方只需插入这个方法，其样式会扩展并复制到选择器中。 ```stylus ellipsis() overflow hidden white-space nowrap text-overflow ellip...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 混入(Mixins)</h2>
<p>混入和函数定义方法一致，但是应用却大相径庭。</p>
<p>一个简单的混入应用，定义一个超出显示省略号的<code>ellipsis()</code>方法，在需要用到的地方只需插入这个方法，其样式会扩展并复制到选择器中。</p>
<div class="language-stylus line-numbers-mode" data-ext="styl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-stylus line-numbers-mode" data-ext="styl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面有定义的<code>border-radius(n)</code>方法，其却作为一个<em>mixin</em>（如，作为状态调用，而非表达式）调用。</p>
<p>当<code>border-radius()</code>选择器中调用时候，属性会被扩展并复制在选择器中。</p>
<div class="language-stylus line-numbers-mode" data-ext="styl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用混入书写，你可以完全忽略括号，提供梦幻般私有属性的支持。</p>
<div class="language-stylus line-numbers-mode" data-ext="styl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到我们混合书写中的<code>border-radius</code>当作了属性，而不是一个递归函数调用。</p>
<p>更进一步，我们可以利用<code>arguments</code>这个局部变量，传递可以包含多值的表达式。</p>
<div class="language-stylus line-numbers-mode" data-ext="styl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以像这样子传值：<code>border-radius 1px 2px / 3px 4px</code>!</p>
<p>另外一个很赞的应用是特定的私有前缀支持——例如IE浏览器的透明度：</p>
<div class="language-stylus line-numbers-mode" data-ext="styl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染为：</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来源：<a href="https://www.zhangxinxu.com/jq/stylus/mixins.php" target="_blank" rel="noopener noreferrer">https://www.zhangxinxu.com/jq/stylus/mixins.php</a></p>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">CSS Function 汇总</title>
    <id>https://codemake.fun/fe/css/knowledge/07.CSS%20Function%20%E6%B1%87%E6%80%BB.html</id>
    <link href="https://codemake.fun/fe/css/knowledge/07.CSS%20Function%20%E6%B1%87%E6%80%BB.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <content type="html"><![CDATA[<!-- more -->
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/20200512161232.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">数组去重性能对比</title>
    <id>https://codemake.fun/fe/javascript/knowledge/02.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/02.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">结论 ES5 标准中性能最高的数组去重方法为: ```js // 耗时约23ms arr = arr.sort() let result = [arr[0]] for (let i = 1, len = arr.length; i &amp;lt; len; i++) { arr[i] !== arr[i - 1] &amp;&amp; result.push(arr[i]) } ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 结论</h2>
<p>ES5 标准中性能最高的数组去重方法为:</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 标准中性能最高的数组去重方法为:</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码既简洁性能又相对高的去重方法为：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 测试模板</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 测试代码</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">防抖与节流函数</title>
    <id>https://codemake.fun/fe/javascript/knowledge/03.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/03.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案 区别防抖函数：只会在高频事件结束后 n 毫秒调用一次函数; 节流函数：会在高频事件触发过程当中每隔 n 毫秒调用一次函数。; 防抖函数 触发高频事件后一段时间（wait）只会执行一次函数，如果指定时间（wait）内高频事件再次被触发，则重新计算时间。 ```js // 防抖...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案</p>
</blockquote>
<h2> 区别</h2>
<ul>
<li>防抖函数：只会在高频事件结束后 n 毫秒调用一次函数</li>
<li>节流函数：会在高频事件触发过程当中每隔 n 毫秒调用一次函数。</li>
</ul>
<h2> 防抖函数</h2>
<blockquote>
<p>触发高频事件后一段时间（wait）只会执行一次函数，如果指定时间（wait）内高频事件再次被触发，则重新计算时间。</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 节流函数</h2>
<blockquote>
<p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 应用场景</h2>
<p>常见的应用场景都是使用高频事件来调用函数的过程当中，比如应用于 window 对象的 resize、scroll 事件，拖拽时的 mousemove 事件，文字输入、自动完成的 keyup 事件。</p>
<h3> 防抖应用场景</h3>
<ul>
<li>scroll 事件滚动触发事件</li>
<li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li>
<li>表单验证</li>
<li>按钮提交事件。</li>
<li>浏览器窗口缩放，resize 事件(如窗口停止改变大小之后重新计算布局)等。</li>
</ul>
<h3> 节流的应用场景</h3>
<ul>
<li>DOM 元素的拖拽功能实现（mousemove）</li>
<li>搜索联想（keyup）</li>
<li>计算鼠标移动的距离（mousemove）</li>
<li>Canvas 模拟画板功能（mousemove）</li>
<li>射击游戏的 mousedown/keydown 事件（单位时间只能发射一颗子弹）</li>
<li>监听滚动事件判断是否到页面底部自动加载更多</li>
</ul>
<h2> 示例</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">获取和修改 URL 参数</title>
    <id>https://codemake.fun/fe/javascript/knowledge/04.%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9%20URL%20%E5%8F%82%E6%95%B0.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/04.%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9%20URL%20%E5%8F%82%E6%95%B0.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">可以使用 !qs库 (https://www.npmjs.com/package/qs) 获取 url 参数 ```js /**获取url里的参数; @param arg 参数名; @returns; */ function getURLString(arg) { var reg = new RegExp(&amp;apos;(^&amp;)&amp;apos; + arg + &amp;apos;=(*)...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>可以使用 <img src="https://www.npmjs.com/package/qs" alt="qs库" loading="lazy"></p>
</blockquote>
<h2> 获取 url 参数</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 修改 url 参数</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 不刷新页面修改 url 参数</h2>
<p><a href="https://www.cnblogs.com/wuting/p/8946927.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/wuting/p/8946927.html</a></p>
<h2> URL 的编码和解码</h2>
<p>比如，UTF-8 的操作系统上，<code>http://www.example.com/q=春节</code>这个 URL 之中，汉字“春节”不是 URL 的合法字符，所以被浏览器自动转成<code>http://www.example.com/q=%E6%98%A5%E8%8A%82</code>。其中，“春”转成了<code>%E6%98%A5</code>，“节”转成了<code>%E8%8A%82</code>。这是因为“春”和“节”的 UTF-8 编码分别是<code>E6 98 A5</code>和<code>E8 8A 82</code>，将每个字节前面加上百分号，就构成了 URL 编码。</p>
<p>JavaScript 提供四个 URL 的编码/解码方法。</p>
<ul>
<li><code>encodeURI()</code></li>
<li><code>encodeURIComponent()</code></li>
<li><code>decodeURI()</code></li>
<li><code>decodeURIComponent()</code></li>
</ul>
<p><a href="https://xugaoyi.com/pages/bab4930124ad2c10/#_2%E3%80%81url-%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81" target="_blank" rel="noopener noreferrer">查看文档</a></p>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">for-in 和 for-of 的区别</title>
    <id>https://codemake.fun/fe/javascript/knowledge/06.for-in%20%E5%92%8C%20for-of%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/06.for-in%20%E5%92%8C%20for-of%20%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">循环数组用 for...of，循环对象用 for...in for...in (https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loopsanditeration#for...in_%E8%AF%AD%E5%8F%A5) 遍历的结果是数组元素的下标 遍历对象的可枚举属性，以...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>循环数组用 <code>for...of</code>，循环对象用 <code>for...in</code></p>
</blockquote>
<h2> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener noreferrer">for...in</a></h2>
<blockquote>
<p><strong>遍历的结果是数组元素的下标</strong></p>
</blockquote>
<blockquote>
<p>遍历对象的可枚举属性，以及对象从构造函数原型中继承的属性，对于每个不同的属性，语句都会被执行，可以用 <code>hasOwnProperty()</code> 去掉非自身属性</p>
</blockquote>
<blockquote>
<p><strong>不建议使用 <code>for...in</code> 遍历数组</strong>，因为输出的顺序是不固定的</p>
</blockquote>
<blockquote>
<p>如果迭代的对象的变量值是 <code>null</code> 或者 <code>undefined</code>， <code>for...in</code> 不报错，也不执行循环体，建议在使用 for in 循环之前，先检查该对象的值是不是 <code>null</code> 或者 <code>undefined</code></p>
</blockquote>
<h2> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener noreferrer">for...of</a></h2>
<blockquote>
<p>ES6 新语法</p>
</blockquote>
<blockquote>
<p><strong>遍历的结果是元素的值</strong></p>
</blockquote>
<blockquote>
<p>在可迭代对象（包括 <code>Array</code>、<code>String</code>、<code>Map</code>、<code>Set</code>、 <code>arguments</code> 等等）上创建了一个循环，调用自定义迭代钩子，并为每个不同属性的值执行语句</p>
</blockquote>
<blockquote>
<p>如果迭代的对象的变量值是 <code>null</code> 或者 <code>undefined</code>，<code>Object</code> 等等， <code>for...of</code> 会直接报错</p>
</blockquote>
<h2> 区别</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">同步和异步</title>
    <id>https://codemake.fun/fe/javascript/knowledge/07.%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/07.%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.html"/>
    <updated>2023-02-22T08:05:47.000Z</updated>
    <summary type="text">异步任务进入 Event Table，待读秒结束后 回调函数 进入 Event Queue; 异步时间至少为 4ms，如果 setTimeout 传入值少于 4ms，则会被自动追加至 4ms;</summary>
    <content type="html"><![CDATA[<!-- more -->
<ul>
<li>异步任务进入 Event Table，待读秒结束后 回调函数 进入 Event Queue</li>
<li>异步时间至少为 4ms，如果 setTimeout 传入值少于 4ms，则会被自动追加至 4ms</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/iShot2021-11-07 20.37.19.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">事件和队列</title>
    <id>https://codemake.fun/fe/javascript/knowledge/08.%E4%BA%8B%E4%BB%B6%E5%92%8C%E9%98%9F%E5%88%97.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/08.%E4%BA%8B%E4%BB%B6%E5%92%8C%E9%98%9F%E5%88%97.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">浏览器维护着一个事件队列，在幕后，浏览器不断的从这个队列中取出事件，并调用相应的事件处理程序来处理他们浏览器遍历队列，按先后顺序 逐个处理事件; 事件 onload 浏览器加载网页完毕后触发 onunload 用户关闭浏览器窗口或切换到其他网页时触发 onresize 用户调整浏览器窗口大小时触发 dragstart 用户拖曳网页中元素时触发...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>浏览器维护着一个事件队列，在幕后，浏览器不断的从这个队列中取出事件，并调用相应的事件处理程序来处理他们</p>
</blockquote>
<ul>
<li>浏览器遍历队列，按先后顺序 <strong>逐个处理事件</strong></li>
</ul>
<h2> 事件</h2>
<h3> onload</h3>
<blockquote>
<p>浏览器加载网页完毕后触发</p>
</blockquote>
<h3> onunload</h3>
<blockquote>
<p>用户关闭浏览器窗口或切换到其他网页时触发</p>
</blockquote>
<h3> onresize</h3>
<blockquote>
<p>用户调整浏览器窗口大小时触发</p>
</blockquote>
<h3> dragstart</h3>
<blockquote>
<p>用户拖曳网页中元素时触发</p>
</blockquote>
<h3> drop</h3>
<blockquote>
<p>用户放下拖曳的元素时触发</p>
</blockquote>
<h3> onclick</h3>
<blockquote>
<p>元素单击时触发</p>
</blockquote>
<h3> onmousemove</h3>
<blockquote>
<p>当鼠标在特定元素上移动时触发</p>
</blockquote>
<h3> onmouseover</h3>
<blockquote>
<p>当鼠标移入指定元素时触发</p>
</blockquote>
<h3> onmouseout</h3>
<blockquote>
<p>当鼠标移除指定元素时触发</p>
</blockquote>
<h3> ontouchstart</h3>
<blockquote>
<p>在触摸设备上，用户触摸并按住元素时触发</p>
</blockquote>
<h3> ontouchend</h3>
<blockquote>
<p>在触摸设备上，用户停止触摸时触发</p>
</blockquote>
<h3> ontouchstart</h3>
<blockquote>
<p>在触摸设备上，用户触摸并按住元素时触发</p>
</blockquote>
<h3> onkeyup</h3>
<blockquote>
<p>用户放开任何先前按下的键时触发</p>
</blockquote>
<h3> onkeydown</h3>
<blockquote>
<p>用户按下任何键（包括系统按钮，如箭头键和功能键）时触发</p>
</blockquote>
<h3> onkeypress</h3>
<blockquote>
<p>用户按下并放开任何字母数字键时触发，系统按钮（例如，箭头键和功能键）无法识别</p>
</blockquote>
<h3> onplay</h3>
<blockquote>
<p>用户单击网页中 video 元素的播放按钮时触发</p>
</blockquote>
<h3> Pause</h3>
<blockquote>
<p>用户单击网页中 video 元素的暂停按钮时触发</p>
</blockquote>
<h2> 鼠标位置</h2>
<h3> pageX</h3>
<blockquote>
<p>鼠标位置相对于网页左边缘的距离（像素），会被滚动条影响变化</p>
</blockquote>
<h3> pageY</h3>
<blockquote>
<p>鼠标位置相对于网页上边缘的距离（像素）</p>
</blockquote>
<h3> clientX</h3>
<blockquote>
<p>鼠标位置相对于浏览器窗口左边缘的距离（像素）</p>
</blockquote>
<h3> clientY</h3>
<blockquote>
<p>鼠标位置相对于浏览器窗口上边缘的距离（像素）</p>
</blockquote>
<h3> screenX</h3>
<blockquote>
<p>鼠标位置相对于设备屏幕左边缘的距离（像素）</p>
</blockquote>
<h3> screenY</h3>
<blockquote>
<p>鼠标位置相对于设备屏幕上边缘的距离（像素）</p>
</blockquote>
<h3> movementX</h3>
<blockquote>
<p>当前事件和上一个 <code>mousemove</code> 事件之间鼠标在水平方向上的移动值</p>
</blockquote>
<h3> movementY</h3>
<blockquote>
<p>当前事件和上一个 <code>mousemove</code> 事件之间鼠标在垂直方向上的移动值</p>
</blockquote>
<h2> 元素距离</h2>
<p>offsetTop / offsetLeft ( 元素与父级 定位元素/table/td/th/body 的距离 )</p>
<p>clientTop / clientLeft ( 元素边框宽度 )</p>
<p>scrollTop / scrollLeft ( 元素滚动距离 )</p>
<p>window.scrollY / window.scrollX ( 文档/页面 滚动距离 )
window.pageYOffset / window.pageXOffset ( 另一种写法 -跨浏览器兼容- )</p>
<p>window.screenTop / window.screenLeft ( 浏览器边界到操作系统桌面的距离 )
window.screenY / window.screenX ( 另一种写法 )</p>
<p>---------------- / ---------------</p>
<p>offsetWidth / offsetHeight ( 元素的布局宽高度 -整数-)</p>
<p>clientWidth / clientHeight ( 元素的 内部/视口 宽高度 -整数-)</p>
<p>scrollWidth / scrollHeight ( 元素的内部宽高度 -整数-)</p>
<p>window.innerWidth / window.innerHeight ( 窗口的内部宽高度 )</p>
<p>window.outerWidth / window.outerHeight ( 窗口整体宽高度 )</p>
<p>screen.width / screen.height ( 屏幕宽高度 )</p>
<p>screen.availwidth / screen.availheight ( 浏览器在屏幕中能占用的最大宽高度 )</p>
<p>---------------- / ---------------</p>
<p>getBoundingClientRect( ) ( 元素的大小及其相对于视口的各种距离的集合)</p>
<p>innerWidth innerHeight</p>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Websocket 使用</title>
    <id>https://codemake.fun/fe/javascript/knowledge/09.WebSocket%20%E4%BD%BF%E7%94%A8.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/09.WebSocket%20%E4%BD%BF%E7%94%A8.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">普通 HTML 中使用 ```html Title // WebSocket 测试 var ws = new WebSocket(&amp;apos;ws://websocket.org&amp;apos;) switch (ws.readyState) { case WebSocket.CONNECTING: // 值为 0，表示正在连接 break case WebSocket.OP...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 普通 HTML 中使用</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Vue 中使用</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Canvas 使用</title>
    <id>https://codemake.fun/fe/javascript/knowledge/10.Canvas%20%E4%BD%BF%E7%94%A8.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/10.Canvas%20%E4%BD%BF%E7%94%A8.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">描述 是一门使用 JavaScript 操作 Canvas 元素的技术 是一个行内元素块（inline-block）; 一般需要在 元素上指定三个属性 id、`width、height; 默认宽度（300px），默认高度（150px）; 如果在 CSS` 中定义 的宽高，在使用 JavaScript 获取元素宽高时得到的是默认宽高而非设置的;...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 描述</h2>
<blockquote>
<p>是一门使用 JavaScript 操作 Canvas 元素的技术</p>
</blockquote>
<ul>
<li><code>&lt;canvas&gt;</code> 是一个行内元素块（<code>inline-block</code>）</li>
<li>一般需要在 <code>&lt;canvas&gt;</code> 元素上指定三个属性 <code>id</code>、<code>width</code>、<code>height</code>
<ul>
<li>默认宽度（300px），默认高度（150px）</li>
<li>如果在 <code>CSS</code> 中定义 <code>&lt;canvas&gt;</code> 的宽高，在使用 <code>JavaScript</code> 获取元素宽高时得到的是默认宽高而非设置的</li>
</ul>
</li>
<li>所有操作均使用 <code>W3C</code> 坐标系，而非数学坐标系</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Canvas 与 SVG</h3>
<ul>
<li><code>Canvas</code> 使用 <code>Javascript</code> 动态生成，<code>SVG</code> 使用 <code>XML</code> 静态描述</li>
<li><code>Canvas</code> 基于位图（放大后会失真），<code>SVG</code> 基于矢量图（放大后不会失真）</li>
<li>如果发生修改，<code>Canvas</code> 会重绘，<code>SVG</code> 不需要重绘</li>
</ul>
<h3> 操作步骤</h3>
<ul>
<li>获取 <code>Canvas</code> 对象
<ul>
<li><code>var myCanvas = document.getElementById('canvas')</code></li>
</ul>
</li>
<li>获取上下文环境对象 <code>context</code>（所有 <code>Canvas</code> 图形操作都是基于 <code>context</code> 对象的）
<ul>
<li><code>var ctx = myCanvas.getContext('2d')</code></li>
</ul>
</li>
<li>开始绘制图形
<ul>
<li><code>ctx.stroke()</code></li>
</ul>
</li>
</ul>
<h3> 常用属性</h3>
<h4> width</h4>
<blockquote>
<p>获取 <code>Canvas</code> 对象的宽度</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> height</h4>
<blockquote>
<p>获取 <code>Canvas</code> 对象的高度</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 常用方法</h3>
<h4> getContext("2d")</h4>
<blockquote>
<p>获取 <code>Canvas 2D</code> 上下文环境对象</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> toDataURL(type)</h4>
<blockquote>
<p>获取 <code>Canvas</code> 对象产生的位图的字符串</p>
</blockquote>
<ul>
<li><code>type</code>：可选参数，表示输出的 <code>MIME</code> 类型，如果被省略，将使用 <code>image/png</code> 类型</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 上下文全局属性</h3>
<h4> globalAlpha</h4>
<blockquote>
<p>定义 Canvas 环境的透明度，对整个画布都起作用</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> globalCompositeOperation</h4>
<blockquote>
<p>定义全局图形交叉显示方式</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>source-over</code></td>
<td>默认值，新图形覆盖旧图形</td>
</tr>
<tr>
<td><code>source-atop</code></td>
<td>只显示新图形中与旧图形重叠的部分以及旧图形的其余部分，其他部分做透明处理</td>
</tr>
<tr>
<td><code>source-in</code></td>
<td>只显示新图形中与旧图形重叠部分，其他部分做透明处理</td>
</tr>
<tr>
<td><code>source-out</code></td>
<td>只显示新图形中与旧图形不重叠部分，其他部分做透明处理</td>
</tr>
<tr>
<td><code>destination-over</code></td>
<td>与 <code>source-over</code> 相反，旧图形覆盖新图形</td>
</tr>
<tr>
<td><code>destination-atop</code></td>
<td>只显示旧图形中与新图形重叠的部分以及新图形的其余部分，其他部分做透明处理</td>
</tr>
<tr>
<td><code>destination-in</code></td>
<td>只显示旧图形中与新图形重叠部分，其他部分做透明处理</td>
</tr>
<tr>
<td><code>destination-out</code></td>
<td>只显示旧图形中与新图形不重叠部分，其他部分做透明处理</td>
</tr>
<tr>
<td><code>lighter</code></td>
<td>两种图形都显示，在图形重叠部分，颜色由两种图形的颜色值相加后形成</td>
</tr>
<tr>
<td><code>copy</code></td>
<td>只显示新图形，旧图形做透明处理</td>
</tr>
<tr>
<td><code>xor</code></td>
<td>两种图形都绘制，其中重叠部分做透明处理</td>
</tr>
<tr>
<td><code>darker</code></td>
<td>两种图形都挥之，在重叠部分，颜色由两种图形的颜色值相减后形成</td>
</tr>
</tbody>
</table>
<h2> 直线图形</h2>
<h3> 直线</h3>
<h4> moveTo(x,y)</h4>
<blockquote>
<p>将画笔移动到 <code>(x,y)</code> 坐标处，然后开始绘图</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> lineTo(x,y)</h4>
<blockquote>
<p>画笔从起点开始画直线，一直画到 <code>(x,y)</code> 坐标处</p>
</blockquote>
<ul>
<li>如果之前未设置起点，则 <code>(x,y)</code> 即为之后绘画起点</li>
<li>第一次使用该方法后，画笔自动移动到终点，即 <code>(x,y)</code> 坐标的位置</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> stroke()</h4>
<blockquote>
<p>真正开始绘制直线，其他方法只是用来确定坐标位置</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 描边矩形</h3>
<h4> strokeStyle</h4>
<blockquote>
<p>边框颜色属性，有 <code>颜色值</code>、<code>渐变色</code>、<code>图案</code> 三种类型的值</p>
</blockquote>
<ul>
<li><code>strokeStyle</code> 属性必须在 <code>strokeRect()</code> 方法调用前定义，否则无效</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> strokeRect(x,y,w,h)</h4>
<blockquote>
<p>立即绘制描边矩形，前两个参数为矩形左上角坐标，后两个参数分别为矩形的宽度和高度</p>
</blockquote>
<h3> 填充矩形</h3>
<h4> fillStyle</h4>
<blockquote>
<p>填充颜色属性，有 <code>颜色值</code>、<code>渐变色</code>、<code>图案</code> 三种类型的值</p>
</blockquote>
<ul>
<li><code>fillStyle</code> 属性必须在 <code>fillRect()</code> 方法调用前定义，否则无效</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> fillRect(x,y,w,h)</h4>
<blockquote>
<p>立即绘制填充矩形，前两个参数为矩形左上角坐标，后两个参数分别为矩形的宽度和高度</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> rect(x,y,w,h)</h3>
<blockquote>
<p>绘制矩形的另一种方法</p>
<p>该方法调用之后不会立即绘制，而是在其后调用其他方法来实现绘制描边矩形或填充矩形</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> clearRect(x,y,w,h)</h4>
<blockquote>
<p>清空指定矩形区域，前两个参数为被清空矩形左上角坐标，后两个参数分别为矩形的宽度和高度</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 曲线图形</h2>
<blockquote>
<p>可以用来绘制圆形或者弧线</p>
<p>语法：<code>arc(x, y, 半径, 开始角度, 结束角度, anticlockwise)</code></p>
<p>此方法只是对圆的描述，具体绘制是需要调用 <code>stroke()</code> 或者 <code>fill()</code> 方法来进行描边或填充</p>
</blockquote>
<ul>
<li>
<p><strong><code>x</code>、<code>y</code></strong>：表示圆心的横纵坐标</p>
</li>
<li>
<p><strong><code>开始角度、结束角度</code></strong>：以 <strong>弧度</strong> 为单位，推荐写法 <strong><code>角度数 * Math.PI / 180</code></strong>（可以方便一眼看出角度值）</p>
</li>
<li>
<p><strong><code>anticlockwise</code></strong>：布尔值，默认为 <code>false</code></p>
<ul>
<li><code>false</code>：顺时针绘制</li>
<li><code>true</code>：逆时针绘制</li>
</ul>
</li>
</ul>
<h3> 圆形</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 弧线</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 线条操作</h2>
<blockquote>
<p>必须使用 <code>beginPath()</code> 方法才能开始新的路径，否则之前定义的状态会被一直使用</p>
</blockquote>
<h3> lineWidth</h3>
<blockquote>
<p>定义线条宽度，整数，默认为 <code>1</code>，默认单位 <code>px</code></p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> lineCap</h3>
<blockquote>
<p>定义线条开始出和结束处的线帽样式，定义线帽会使线条稍微变长</p>
</blockquote>
<ul>
<li><code>butt</code>：（默认值）无线帽，不做任何处理</li>
<li><code>round</code>：线条开始处和结尾处都增加一个半圆，半圆的直径为线宽</li>
<li><code>square</code>：线条开始处和结尾处都增加一个长方形，长方形长度为线宽的一半，高度为线宽</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> lineJoin</h3>
<blockquote>
<p>定义两个线条交接处样式</p>
</blockquote>
<ul>
<li><code>miter</code>：（默认值）线条在交接处延伸至交于一点</li>
<li><code>round</code>：交接处是一个圆角，远交所在圆的直径等于线宽</li>
<li><code>bevel</code>：交接处是一个斜角，斜角所在正方形的对角线长等于线宽</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> setLineDash(array)</h3>
<blockquote>
<p>定义线条的虚实样式，参数是一个数组组合，数组元素为线条长度和空白长度的重复排列</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 文本操作</h2>
<h3> font</h3>
<blockquote>
<p>定义字体样式（大小、粗细等）</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> textAlign</h3>
<blockquote>
<p>定义文本水平对齐方式</p>
<p><code>start</code> 和 <code>end</code> 与阅读方向有关，从左到右阅读，<code>start</code> 对应左边，<code>end</code> 对应右边。从右到左阅读，<code>start</code> 对应右边，<code>end</code> 对应左边</p>
<p><code>left</code> 和 <code>right</code> 始终是指文字的左右方向，与阅读方向无关</p>
</blockquote>
<ul>
<li>
<p><code>start</code>：文本在指定的横坐标开始</p>
</li>
<li>
<p><code>end</code>：文本在指定的横坐标结束</p>
</li>
<li>
<p><code>left</code>：文本左对齐（类似于 <code>start</code>）</p>
</li>
<li>
<p><code>right</code>：文本右对齐（类似于 <code>end</code>）</p>
</li>
<li>
<p><code>center</code>：文本的中心在指定的横坐标</p>
</li>
</ul>
<h3> textBaseline</h3>
<blockquote>
<p>定义文本垂直对齐方式</p>
</blockquote>
<ul>
<li><code>alphabetic</code>：（默认）文本基线是普通英文字母的基线</li>
<li><code>top</code>：文本基线是 <code>em</code> 方框的顶端</li>
<li><code>middle</code>：文本基线是 <code>em</code> 方框的中心</li>
<li><code>bottom</code>：文本基线是 <code>em</code> 方块的底端</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> fillStyle</h3>
<blockquote>
<p>定义画笔填充路径的颜色，与 <code>fillText()</code> 配合使用，用于绘制填充文本</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> strokeStyle</h3>
<blockquote>
<p>定义画笔描边路径的颜色，与 <code>strokeStyle()</code> 配合使用，用于绘制描边文本</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> direction</h3>
<blockquote>
<p>当前文本方向，此功能某些浏览器尚在开发中，存在兼容性问题</p>
</blockquote>
<ul>
<li><code>ltr</code>：文本方向从左向右</li>
<li><code>rtl</code>：文本方向从右向左</li>
<li><code>inherit</code>：根据情况继承 <code>&lt;canvas&gt;</code> 元素或者 <code>Document</code></li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> fillText()</h3>
<blockquote>
<p>绘制填充文本</p>
</blockquote>
<ul>
<li>
<p><code>text</code>：要绘制的字符串文本</p>
</li>
<li>
<p><code>x</code>：要绘制文本的横坐标，也就是文本最 <strong>左</strong> 边的坐标</p>
</li>
<li>
<p><code>y</code>：要绘制文本的纵坐标，也就是文本最 <strong>下</strong> 边的坐标</p>
</li>
<li>
<p><code>maxWidth</code>：可选，表示允许的文本最大宽度，单位 <code>px</code>，如果文本超过 <code>maxWidth</code> 会被压缩至 <code>maxWidth</code> 的宽度</p>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> strokeText(text,x,y,maxWidth)</h3>
<blockquote>
<p>绘制描边文本</p>
</blockquote>
<ul>
<li>
<p><code>text</code>：要绘制的字符串文本</p>
</li>
<li>
<p><code>x</code>：要绘制文本的横坐标，也就是文本最 <strong>左</strong> 边的坐标</p>
</li>
<li>
<p><code>y</code>：要绘制文本的纵坐标，也就是文本最 <strong>下</strong> 边的坐标</p>
</li>
<li>
<p><code>maxWidth</code>：可选，表示允许的文本最大宽度，单位 <code>px</code>，如果文本超过 <code>maxWidth</code> 会被压缩至 <code>maxWidth</code> 的宽度</p>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> measureText()</h3>
<blockquote>
<p>用于 获取文本长度</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 图片操作</h2>
<blockquote>
<p><strong>必须等图片完全载入后才能开始绘制图片</strong></p>
<p>d：destination，目标图片</p>
<p>s：source，源图片</p>
</blockquote>
<h3> 绘制图片</h3>
<h4> 绘制原大小的图片</h4>
<blockquote>
<p><code>drawImage(image, dx, dy)</code></p>
</blockquote>
<ul>
<li>
<p><code>image</code>：表示页面中的图片，该图片可以是页面中的 <code>img</code> 元素，也可以是 <code>JavaScript</code> 创建的 <code>Image</code> 对象</p>
</li>
<li>
<p><code>dx</code>：表示图片左上角的横坐标</p>
</li>
<li>
<p><code>dy</code>：表示图片左上角的纵坐标</p>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 绘制固定大小的图片</h4>
<blockquote>
<p><code>drawImage(image, dx, dy, dw, dh)</code>，用于绘制一张大小和原图不一样的图片</p>
</blockquote>
<ul>
<li>
<p>前三个参数同 <code>drawImage(image, dx, dy)</code></p>
</li>
<li>
<p><code>dw</code>：定义图片的宽度</p>
</li>
<li>
<p><code>dy</code>：定义图片的高度</p>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 复制固定大小的图片</h4>
<blockquote>
<p>ctx.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)，用于将图片某一部分复制到 Canvas 中，图像只需要加载一次，可以极大提高页面的加载速度</p>
</blockquote>
<ul>
<li>
<p><code>image</code>、<code>dx</code>、<code>dy</code>、<code>dw</code>、<code>dh</code> 四个参数同 <code>drawImage(image, dx, dy)</code></p>
</li>
<li>
<p><code>sx</code>：表示源图片被截取部分的横坐标</p>
</li>
<li>
<p><code>sy</code>：表示源图片被截取部分的纵坐标</p>
</li>
<li>
<p><code>sw</code>：表示源图片被截取部分的宽度</p>
</li>
<li>
<p><code>sh</code>：表示源图片被截取部分的高度</p>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 平铺图片</h3>
<blockquote>
<p><code>createPattren(image, type)</code></p>
</blockquote>
<ul>
<li><code>image</code>：表示被平铺的图片对象或其他 Canvas 元素</li>
<li><code>type</code>：表示图片的平铺方式
<ul>
<li><code>repeat</code>：（默认值）在水平方向和垂直方向同时平铺图片</li>
<li><code>repeat-x</code>：只在水平方向上平铺图片</li>
<li><code>repeat-y</code>：只在垂直方向上平铺图片</li>
<li><code>no-repeat</code>：不平铺（只显示一次）</li>
</ul>
</li>
</ul>
<h4> 使用图像平铺</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 使用 canvas 对象平铺</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 在文字上平铺图片</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 切割图片或图形</h3>
<blockquote>
<p><code>ctx.clip()</code>，用于切割图片或为 Canvas 划分一个显示区域</p>
<p>不支持 <code>strokeRect()</code> 和 <code>fillRect()</code> 方法，只能使用 <code>fill()</code> 或 <code>rect()</code> 等方法代替</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 变形操作</h2>
<blockquote>
<p>变形相关方法必须在 <code>fillRect()</code> 等类似绘画动作之前调用，否则无效</p>
</blockquote>
<h3> 平移</h3>
<blockquote>
<p><code>ctx.translate(x, y)</code></p>
</blockquote>
<ul>
<li><code>x</code>：表示在 <code>x</code> 轴方向运动的距离（带符号），默认单位 <code>px</code></li>
<li><code>y</code>：表示在 <code>y</code> 轴方向运动的距离（带符号），默认单位 <code>px</code></li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 缩放</h3>
<blockquote>
<p><code>ctx.scale(x, y)</code>，一般情况况下 <code>x</code>、<code>y</code> 值都是正数。取值为 <code>0~1</code> 时图像缩小，大于 <code>1</code> 时图像放大</p>
<p>每一次缩小或放大的依据都是上次的图像，图形缩放时，左上角的坐标及线条宽度等其他属性也会跟着缩放</p>
</blockquote>
<ul>
<li><code>x</code>：表示图形在 <code>x</code> 轴上的缩放倍数</li>
<li><code>y</code>：表示图形在 <code>y</code> 轴上的缩放倍数</li>
</ul>
<h3> 旋转</h3>
<blockquote>
<p><code>ctx.rotate((角度 * Math.PI) / 180)</code></p>
</blockquote>
<ul>
<li>参数为旋转的角度，使用弧度表示的（Canvas 所有涉及角度的方法，都是用弧度表示的）</li>
<li>旋转的中心为 <code>W3C</code> 坐标系原点</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 像素操作</h2>
<h3> 获取图片像素数据</h3>
<blockquote>
<p>getImageData(x, y, width, height)，该方法返回的是一个 <code>canvasPixelArray</code> 对象（<code>imgData</code>），对象中有一个 <code>data</code> 属性（<code>imgData.data</code>），这个属性是一个保存了这张图片像素数据的数组，取值为 <code>[r1,g1,b1,a1,r2,g2,b2,a2,r3...]</code>，每 4 个数存存储着 1 个像素的 RGBA 颜色值</p>
</blockquote>
<ul>
<li><code>x</code>、<code>y</code>：表示所选图片区域左上角的横纵坐标</li>
<li><code>width</code>、<code>height</code>：表示所选图片区域的宽度和高度</li>
</ul>
<h3> 输出图片像素数据</h3>
<blockquote>
<p>putImageData(image, x, y)，简单来说就是在 Canvas 中显示一张图片</p>
</blockquote>
<ul>
<li><code>image</code>：表示重新绘制的图形，就是使用 <code>getImageData()</code> 获取的 <code>canvasPixelArray</code> 对象</li>
<li><code>x</code>、<code>y</code>：表示重新绘制图形左上角的横纵坐标</li>
</ul>
<h3> 创建像素区域</h3>
<h4> createImageData(sw, sh)</h4>
<blockquote>
<p>按 <strong>固定宽高</strong> 创建一个像素区域</p>
</blockquote>
<h4> createImageData(imgData)</h4>
<blockquote>
<p>按照传入 <strong>像素对象</strong> 的宽高创建一个像素区域</p>
</blockquote>
<h3> 实例</h3>
<h4> 反转颜色</h4>
<blockquote>
<p>指颠倒图片的颜色</p>
<p>算法： <code>255 - 原值</code></p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 黑白效果</h4>
<blockquote>
<p>指将图片变成只含黑白灰的颜色</p>
<p>算法：红绿蓝三通道取平均值，然后让三通道都等于这个值，也可以对三通道加权取平均值</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 亮度效果</h4>
<blockquote>
<p>指让图片变得更亮或者更暗</p>
<p>算法：将红绿蓝三个通道同时加上一个正值（变亮）或一个负值（变暗）</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 复古效果</h4>
<blockquote>
<p>指使一张图片有一种复古的效果</p>
<p>算法：分别取 红、绿、蓝 三个通道的某种加权平均值</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 红色蒙版</h4>
<blockquote>
<p>指让图片呈现一种偏红的效果</p>
<p>算法：将红通道赋值为 红、绿、蓝 三通道的平局值，且将 绿、蓝 两个通道都赋值为 <code>0</code></p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 透明效果</h4>
<blockquote>
<p>使图片变得透明，只需要改变 alpha 通道的值</p>
<p>不能使用 <code>ctx.globalAlpha</code>，会对整个 Canvas 其作用</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 渐变</h2>
<h3> 线性渐变</h3>
<blockquote>
<p>使用 <code>createLinearGradient(x1, y1, x2, y2)</code> 和 <code>addColorStop(value, color)</code> 配合实现</p>
</blockquote>
<ul>
<li>调用 <code>createLinearGradient(x1, y1, x2, y2)</code> 方法创建一个 <code>linearGradient</code> 对象
<ul>
<li>如果 <code>y1</code>、<code>y2</code> 相等，则表示沿水平方向从左到右或从右到左的渐变</li>
<li>如果 <code>x1</code>、<code>x2</code> 相等，则表示沿垂直方向从上到下或从下到上的渐变</li>
<li>如果 <code>x1</code>、<code>x2</code> 不相等，且 <code>y1</code>、<code>y2</code> 也不相等，则沿矩形对角线方向渐变</li>
</ul>
</li>
<li>对得到的 <code>linearGradient</code> 对象调用 n 次 <code>addColorStop(value, color)</code> 方法设置颜色</li>
<li>将 <code>linearGradient</code> 对象赋值给 <code>fillStyle</code> 属性</li>
<li>调用 <code>fill()</code> 、<code>fillRect()</code>、<code>fillText()</code> 等方法绘制颜色渐变</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 径向渐变</h3>
<blockquote>
<p>使用 <code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code> 和 <code>addColorStop(value, color)</code> 配合实现</p>
</blockquote>
<ul>
<li>调用 <code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code> 方法创建一个 <code>radialGradient</code> 对象
<ul>
<li><code>x1</code>、<code>y1</code>：表示渐变开始时圆心的坐标</li>
<li><code>r1</code>：表示渐变开始时圆的半径</li>
<li><code>x2</code>、<code>y2</code>：表示渐变结束时圆心的坐标</li>
<li><code>r2</code>：表示渐变结束时圆的半径</li>
</ul>
</li>
<li>对得到的 <code>radialGradient</code> 对象调用 n 次 <code>addColorStop(value, color)</code> 方法设置颜色</li>
<li>将 <code>linearGradient</code> 对象赋值给 <code>fillStyle</code> 属性</li>
<li>调用 <code>fill()</code> 等方法绘制颜色渐变</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 阴影</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> shadowOffsetX</h3>
<blockquote>
<p>阴影与图形的水平距离，默认值为 <code>0</code>，大于 <code>0</code> 时向右偏移，小于 <code>0</code> 时向左偏移</p>
</blockquote>
<h3> shadowOffsetY</h3>
<blockquote>
<p>阴影与图形的垂直距离，默认值为 <code>0</code>，大于 <code>0</code> 时向下偏移，小于 <code>0</code> 时向上偏移</p>
</blockquote>
<h3> shadowColor</h3>
<blockquote>
<p>阴影的颜色，默认为黑色</p>
</blockquote>
<h3> shadowBlur</h3>
<blockquote>
<p>阴影的模糊值，默认为 <code>0</code>，值越大模糊度越强，值越小模糊度越弱</p>
</blockquote>
<h2> 路径</h2>
<blockquote>
<p>判断是否属于同一条路径的标准是 <strong>是否使用了 <code>beginPath()</code> 方法，而不是视觉上是否有首尾相连</strong></p>
</blockquote>
<h3> beginPath()</h3>
<blockquote>
<p>开始一条新路径，并且只有使用此方法开会开始一条新路径</p>
</blockquote>
<ul>
<li>Canvas 是基于 <strong>状态</strong> 来绘制图形的，每一次绘制前，Canvas 会检查整个程序定义的所有状态（包括 <code>strokeStyle</code>、<code>fillStyle</code>、<code>lineWidth</code>）等
<ul>
<li>当一个状态值没有改变时，Canvas 一直使用最初的状态</li>
<li>当一个状态发生改变时
<ul>
<li>如果使用 <code>beginPath()</code> 开始一个新路径，则不同的路径使用不同的值</li>
<li>如果没有开始新路径，则后面的值会覆盖前面的值，导致路径使用相同属性，绘制出相同的路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> closePath()</h3>
<blockquote>
<p>关闭当前路径，指将同一个路径的起点与终点连接起来，使其成为一个封闭的图形，并不会开始一条新路径</p>
</blockquote>
<ul>
<li><strong>首尾相连的路径，一般最后一步使用 <code>closePath()</code> 进行 关闭，否则可能会在连接点处出现缺口</strong></li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> isPointInPath(x, y)</h3>
<blockquote>
<p>判断某一个点是否存在于当前路径内</p>
<p>该方法不支持 <code>strokeRect()</code> 和 <code>fillRect()</code>，需要用 <code>rect()</code> 代替</p>
</blockquote>
<ul>
<li>如果点 <code>(x, y)</code> 在当前路径中，则返回 <code>true</code></li>
<li>如果点 <code>(x, y)</code> 不在当前路径中，则返回 <code>false</code></li>
</ul>
<h2> 状态</h2>
<blockquote>
<p><code>save()</code> 和 <code>restore()</code> 一般都是成对出现的</p>
</blockquote>
<h3> save()</h3>
<blockquote>
<p>保存当前状态</p>
</blockquote>
<ul>
<li>
<p>保存的状态包括三种，分别是 绘图状态、剪切状态、变形状态</p>
</li>
<li>
<p>不能保存路径状态，如果想开始新的路径，必须使用 <code>beginPath()</code></p>
</li>
<li>
<p>该方法只能保存状态，不能保存图形，因为 Canvas 只有一个上下文环境，如果要恢复图形，只能清空画布再重绘</p>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> restore()</h3>
<blockquote>
<p>回复之前保存的状态</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 事件</h2>
<h3> 鼠标事件</h3>
<h3> 键盘事件</h3>
<h3> 循环事件</h3>
<h2> 图形绘制实例</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 正多边形</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 五角形</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 调色板</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">问题记录（待合并）</title>
    <id>https://codemake.fun/fe/javascript/knowledge/1000.%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E5%BE%85%E5%90%88%E5%B9%B6%EF%BC%89.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/1000.%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E5%BE%85%E5%90%88%E5%B9%B6%EF%BC%89.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">小知识点引用独立的 JavaScript 文件时， 元素不能包含任何JavaScript代码。; alert()：仅当你要停止一切并提醒用户时，才应使用它; 在任何情况下， 结束标签都是必不可少的; 浏览器分 两遍 读取网页:第一遍读取所有的函数定义，第二遍开始执行代码。这让你可以将函数放在文件的任何地方。; 没有使用 var 声明的变量是全...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 小知识点</h2>
<ul>
<li>
<p>引用独立的 <strong>JavaScript</strong> 文件时，<code>&lt;script&gt;</code> 元素不能包含任何<strong>JavaScript</strong>代码。</p>
</li>
<li>
<p><code>alert()</code>：仅当你要停止一切并提醒用户时，才应使用它</p>
</li>
<li>
<p>在任何情况下，<code>&lt;/script&gt;</code> 结束标签都是必不可少的</p>
</li>
<li>
<p>浏览器分 <strong>两遍</strong> 读取网页:第一遍读取所有的函数定义，第二遍开始执行代码。这让你可以将函数放在文件的任何地方。</p>
</li>
<li>
<p>没有使用 <code>var</code> 声明的变量是全局变量</p>
</li>
</ul>
<h2> 特殊类型</h2>
<blockquote>
<p><code>null</code>：在应该提供一个对象，但无法创建或找到时，将提供 null（null 用于表示不存在的对象 typeof null 结果为 object）</p>
<p><code>undefined</code>：在变量未初始化、对象没有指定属性或数组没有指定元素时，将返回 undefined</p>
<p><code>NaN</code>：无法表示的数字（typeof NaN 结果为 number），并且 NaN 不等于 NaN，使用函数 <code>isNaN()</code> 检测</p>
</blockquote>
<h3> 相等性判断</h3>
<ul>
<li>
<p>类型相同，直接判断</p>
</li>
<li>
<p>类型不同，尝试转换为相同类型再进行比较</p>
<ul>
<li>数字和字符串，转换为数字</li>
<li>布尔值和其他类型，转换为数字再进行比较</li>
</ul>
</li>
<li>
<p><code>undefined == null</code> 返回 <code>true</code></p>
</li>
<li>
<p>被视为假值的值：<code>undefined</code>、<code>null</code>、<code>0</code> 、<code>空字符串</code>、<code>NaN</code></p>
</li>
</ul>
<h2> 编码指南</h2>
<ul>
<li>在开头声明全局变量</li>
<li>将函数定义统一放在文件的开头或结尾</li>
<li>在函数开头声明局部变量</li>
</ul>
<h2> 函数声明与函数表达式</h2>
<h3> 浏览器执行流程</h3>
<ul>
<li>
<p>浏览器会在执行所有 JS 代码之前分析网页，查找其中的函数声明</p>
</li>
<li>
<p>找到函数声明时</p>
<ul>
<li>创建相应的函数</li>
<li>将得到的函数引用赋值给与函数同名的变量</li>
</ul>
</li>
<li>
<p>处理所有的函数声明后，浏览器回到代码开头，开始从头到尾顺序执行代码</p>
<ul>
<li>如果遇到函数声明，因为之前已经处理够了，所以直接跳过</li>
</ul>
</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 区别</h3>
<ul>
<li>函数声明是一条语句，可以认为它包含一条隐藏的赋值语句，将函数引用创建并赋值给一个函数同名变量</li>
<li>函数表达式不自动将函数引用赋值给任何变量，必须显式的这样做，要么将函数（引用）赋值给一个变量，要么以其他方式使用函数表达式</li>
<li>使用函数声明时，函数将在执行代码前创建</li>
<li>使用函数表达式时，函数将在运行阶段执行代码时创建</li>
</ul>
<h3> 一等值</h3>
<ul>
<li>可以将其赋给变量或存储在数组和对象等数据结构中</li>
<li>可以将其传递给函数</li>
<li>可以从函数中返回它们</li>
</ul>
<h2> 闭包</h2>
<blockquote>
<p>名词，指的是函数和引用环境</p>
</blockquote>
<ul>
<li>局部变量：在函数体内部定义的变量，<strong>包括所有的形参</strong></li>
<li>自由变量：不在本地定义的变量（不是在本地声明的，没有绑定到任何值）</li>
<li>对于函数体内的变量，如果它既不是在本地定义的，又不是全局变量， 便可肯定它来自包含当前函数的其他 函数，可从环境中获取其值</li>
<li>包含自由变量的函数与为所有这些自由变量提供了变量绑定的环境一起，被称为闭包</li>
<li>并非只能通过从<code>函数返回函数来创建闭包</code>，如果<code>函数使用了自由变量，则每当你在创建该函数的上下文外面执行它时，都将创建一个闭包</code></li>
<li>将 <code>函数传递给函数时，也将创建闭包</code>。在这种情况下，传递的函数将在完全不同于定义它的上下文中执行</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 构造函数工作原理</h2>
<ol>
<li><code>new</code> 首先创建一个空对象</li>
<li>接下来，<code>new</code> 设置 <code>this</code>，使其指向这个对象</li>
<li>设置 <code>this</code> 后，调用函数构造函数 <code>Person</code> 并将实参进行传递</li>
<li>执行构造函数 <code>Person</code> 代码，给新创建的 <code>this</code> 对象的属性赋值</li>
<li><code>Person</code> 函数执行完毕后，运算符 <code>new</code> 返回 <code>this</code>（自动返回，武学在代码中显式返回），指向新创建的对象的引用 （构造函数返回值，除非返回的是 <code>this</code>）</li>
</ol>
<ul>
<li>
<p>构造函数名采用驼峰命名法，并且首字母要大写（约定俗成）</p>
</li>
<li>
<p>使用构造函数创建的对象时，<code>this</code> 被设置为一个引用，指向正在创建的新对象，因此构造函数的所有代码针对的都是这个新对象</p>
</li>
<li>
<p>对象创建后，当对其调用方法时，<code>this</code> 被设置为方法被调用的对象，因此，在方法中，<code>this</code> 总是表示方法被调用的对象</p>
</li>
</ul>
<blockquote>
<p>在任何情况下，this 都指向原始对象即方法被调 用的对象，即便该方法位于原型中也是如此</p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">常用操作符</title>
    <id>https://codemake.fun/fe/javascript/knowledge/11.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/11.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">常用操作符 一元操作符 递增操作符前置型 ++i; 后置型 i++; 递减操作符前置型 --i; 后置型 i--; 递增递减操作规则在应用于一个包含有效数字字符的字符串时，现将其转化为十进制数字值，在执行加减 1 的操作，字符串变量变成数值变量; 在应用于一个不包含有效数字字符的字符串时，将变量设置为 NaN，字符串变量变成数值变量; 在...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 常用操作符</h2>
<h3> 一元操作符</h3>
<h4> 递增操作符</h4>
<ul>
<li>前置型 ++i</li>
<li>后置型 i++</li>
</ul>
<h4> 递减操作符</h4>
<ul>
<li>前置型 --i</li>
<li>后置型 i--</li>
</ul>
<h4> 递增递减操作规则</h4>
<ul>
<li>在应用于一个包含有效数字字符的字符串时，现将其转化为十进制数字值，在执行加减 1 的操作，字符串变量变成数值变量</li>
<li>在应用于一个不包含有效数字字符的字符串时，将变量设置为 NaN，字符串变量变成数值变量</li>
<li>在应用于布尔值 false 时，现将其转化为 0 再执行加减 1 的操作，布尔值转化为数值变量</li>
<li>在应用于布尔值 true 时，现将其转化为 1 再执行加减 1 的操作，布尔值转化为数值变量</li>
<li>在应用于浮点数值时，执行加减 1 的操作</li>
<li>在应用于对象时，先调用对象的 valueOf()以取得一个可供操作的值。然后对该值应用前述规则 。如果结果我是 NaN，则在调用 toString()方法后在应用前述规则。如果结局仍是 NaN，则在调用 toString()方法后再应用前述规则。对象变量变成数值变量</li>
</ul>
<h4> 注意</h4>
<ul>
<li>前置型操作时，递增递减操作都是在包含他们的语句求值之前执行的</li>
<li>后置型操作时，递增递减操作都是在包含他们的语句求值之后执行的</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 布尔操作符</h3>
<ul>
<li>一共有 3 个
<ul>
<li>非（ ! ）</li>
<li>与（ &amp;&amp; ）</li>
<li>或（ || ）</li>
</ul>
</li>
</ul>
<h4> 逻辑非（ ! ）</h4>
<ul>
<li>无论这个值是什么数据类型，这个操作符都会返回一个布尔值</li>
<li>首先将它的操作数转换为一个布尔值，而后对其求反</li>
<li>两个逻辑非操作符可以得到这个值对应的布尔值</li>
</ul>
<h5> 逻辑非操作符返回规则</h5>
<table>
<thead>
<tr>
<th>操作数</th>
<th>操作符返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>对象</td>
<td>false</td>
</tr>
<tr>
<td>空字符串</td>
<td>true</td>
</tr>
<tr>
<td>非空字符串</td>
<td>false</td>
</tr>
<tr>
<td>数值 0</td>
<td>true</td>
</tr>
<tr>
<td>任意非 0 数值（包括 Infinity）</td>
<td>false</td>
</tr>
<tr>
<td>null</td>
<td>true</td>
</tr>
<tr>
<td>NaN</td>
<td>true</td>
</tr>
<tr>
<td>undefined</td>
<td>true</td>
</tr>
</tbody>
</table>
<h4> 逻辑与（ &amp;&amp; ）</h4>
<ul>
<li>有两个或以上操作数</li>
<li>逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值</li>
<li>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值</li>
<li>该操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值
<ul>
<li>如果第一个操作数是 false ，则结果一定是 false</li>
</ul>
</li>
<li>与运算返回第一个假值，如果没有假值就返回最后一个值</li>
<li>与运算 &amp;&amp; 的优先级比或运算 || 要高。 #####逻辑与真值表
<table>
<thead>
<tr>
<th>第一个操作数</th>
<th>第二个操作数</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>#####当有一个值不是布尔值的时候返回情况</p>
<ul>
<li>如果第一个数是对象，则返回第二个操作数</li>
<li>如果第二个操作数是对象，则只有在第一个操作数的求值结果为 true 的情况下才会返回该对象</li>
<li>如果两个操作数都是对象，则返回第二个操作数</li>
<li>如果有一个操作数是 null ，则返回 null</li>
<li>如果有一个操作数是 NaN ，则返回 NaN</li>
<li>如果有一个操作数是 undefined ，则返回 undefined</li>
</ul>
<h4> 逻辑或（ || ）</h4>
<ul>
<li>有两个或以上操作数</li>
<li>逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值</li>
<li>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值</li>
<li>该操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值</li>
<li>如果第一个操作数是 true，则结果一定是 true</li>
</ul>
<p>#####逻辑或真值表</p>
<table>
<thead>
<tr>
<th>第一个操作数</th>
<th>第二个操作数</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>#####当有一个值不是布尔值的时候返回情况</p>
<ul>
<li>如果第一个数是对象，则返回第一个操作数</li>
<li>如果第一个操作数的求值结果为 false，则返回第二个操作数</li>
<li>如果两个操作数都是对象，则返回第一个操作数</li>
<li>如果两个操作数都是 null ，则返回 null</li>
<li>如果两个操作数都是 NaN ，则返回 NaN</li>
<li>如果两个操作数都是 undefined ，则返回 undefined -一个或运算 || 的链，将返回第一个真值，如果不存在真值，就返回该链的最后一个值</li>
</ul>
<h3> 乘性操作符</h3>
<ul>
<li>三种乘性操作符：乘法、除法、求模</li>
<li>操作数为非数值的情况下会执行自动的类型转换
<ul>
<li>先用 Number() 函数将其转换为数值
<ul>
<li>空字符串会被转换成 0</li>
<li>布尔值 true 会被转换成 1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4> 乘法</h4>
<ul>
<li>由一个星号（ * ）表示</li>
<li>用于表示两个数值的乘积</li>
</ul>
<h5> 乘法规则</h5>
<ul>
<li>如果操作数都是数值，执行常规的乘法计算
<ul>
<li>两个正数或者两个负数相乘的结果还是正数</li>
<li>如果只有一个操作数有符号，则结果为负数</li>
<li>如果乘积超过了 ECMAScript 数值的表示范围，则返回 Infinity 或 -Infinity</li>
</ul>
</li>
<li>如果有一个操作数是 NaN，则结果是 NaN</li>
<li>如果 Infinity 与 0 相乘，则结果是 NaN</li>
<li>如果 Infinity 与 非 0 数值相乘，则结果是 Infinity 或 -Infinity（取决于有符号操作数的符号）</li>
<li>如果是 Infinity 与 Infinity 相乘，则结果是 Infinity</li>
<li>如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则</li>
</ul>
<h4> 除法</h4>
<ul>
<li>由一个斜杠（ / ）表示</li>
<li>表示第一个操作数除以第二个操作数</li>
</ul>
<h5> 除法规则</h5>
<ul>
<li>如果操作数都是数值，执行常规的除法计算
<ul>
<li>两个正数或者两个负数相除的结果还是正数</li>
<li>如果只有一个操作数有符号，则结果为负数</li>
<li>如果乘积超过了 ECMAScript 数值的表示范围，则返回 Infinity 或 -Infinity</li>
</ul>
</li>
<li>如果有一个操作数是 NaN，则结果是 NaN</li>
<li>如果是 Infinity 被 Infinity 除，则结果是 NaN</li>
<li>如果 0 被 0 除，则结果是 NaN</li>
<li>如果是非零有限数被零除没则结果是 Infinity 或 -Infinity（取决于有符号操作数的符号）</li>
<li>如果是 Infinity 被任何非 0 数值除，则结果是 Infinity 或 -Infinity 取决于有符号操作数的符号）</li>
<li>如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则</li>
</ul>
<h4> 求模</h4>
<ul>
<li>由一个百分号（ % ）表示</li>
<li>返回两个数相除的余数</li>
</ul>
<h5> 求模规则</h5>
<ul>
<li>如果两个数都是数值，执行常规的除法计算，返回除得的余数</li>
<li>如果被除数是无穷大值而除数是有限大的数值，则结果是 NaN</li>
<li>如果被除数是有限大的数值，而除数是 0 ，则结果是 NaN</li>
<li>如果是 Infinity 被 inifinity 除，则结果是 NaN</li>
<li>如果被除数是有限大的数值，而除数是无穷大的数值，则结果是被除数</li>
<li>如果被除数是 0 ，则结果是 0</li>
<li>如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则</li>
</ul>
<h3> 加性操作符</h3>
<ul>
<li>加法（ + ）</li>
<li>减法（ - ）</li>
</ul>
<h4> 加法规则</h4>
<h5> 两个操作数都是数值</h5>
<ul>
<li>执行常规加法计算</li>
<li>如果有一个操作数是 NaN，则结果是 NaN</li>
<li>如果是 Infinity 加 Infinity ，则结果是 Infinity</li>
<li>如果是 -Infinity 加 -Infinity ，则结果是 -Infinity</li>
<li>如果是 Infinity 加 -Infinity ，则结果是 NaN</li>
<li>如果是 +0 加 +0 ，则结果是 +0</li>
<li>如果是 -0 加 -0 ，则结果是 -0</li>
<li>如果是 +0 加 -0 ，则结果是 +0</li>
</ul>
<h5> 有一个操作数不是数值</h5>
<ul>
<li>如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来</li>
<li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个操作数拼接起来</li>
<li>如果有一个操作数是对象、数值或布尔值，则调用他们的 toString() 方法取得相应的字符串值，再应用前面规则</li>
<li>对于 undefined 和 null ，则分别调用 String() 函数并取得字符串 “undefined” 和 ”null“</li>
</ul>
<h4> 减法规则</h4>
<h5> 两个操作数都是数值</h5>
<ul>
<li>执行常规减法计算</li>
<li>如果有一个操作数是 NaN ，则结果是 NaN</li>
<li>如果是 Infinity 减 Infinity，则结果是 NaN</li>
<li>如果是 -Infinity 减 -Infinity ，则结果是 NaN</li>
<li>如果是 Infinity 减 -Infinity ，则结果是 Infinity</li>
<li>如果是 -Infinity 减 Infinity，则结果是 -Infinity</li>
<li>如果是 +0 减 +0 ，则结果是 +0</li>
<li>如果是 +0 减 -0 ，则结果是 +0</li>
<li>如果是 -0 减 -0 ，则结果是 +0</li>
</ul>
<h5> 有一个操作数不是数值</h5>
<ul>
<li>如果有一个操作数是字符串、布尔值、null 或 undefined ，则先在后台调用 Number() 函数将其转换为数值，再根据前面的规则执行减法计算，如果转换的结果是 NaN，则计算的结果就是 NaN</li>
<li>如果有一个操作符是对象，则调用对象的 valueOf() 方法以取得表示该对象的数值，如果得到结果是 NaN，则计算的结果就是 NaN，如果对象没有 valueOf() 方法，则日澳用器 toString() 方法并将得到的字符串转换为数值</li>
</ul>
<h3> 关系操作符</h3>
<ul>
<li>四种</li>
<li>小于（ &lt; ）</li>
<li>大于（ &gt; ）</li>
<li>小于等于（ &lt;= ）</li>
<li>大于等于（ &gt;= ）</li>
<li>对两个值进行比较，返回布尔值</li>
</ul>
<h4> 比较规则</h4>
<ul>
<li>如果两个操作数都是数值，则执行数值比较</li>
<li>如果两个操作数都是字符串，则比较两个字符串对应的字符编码值（依次比较每个字符）</li>
<li>如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值的比较</li>
<li>如果一个操作数是对象，则调用这个对象的 valueOf() 方法，用得到的结果按照前面的规则进行比较
<ul>
<li>如果这个对象没有 valueOf() 方法，则调用 toString() 方法，并用得到的结果根据前面的规则执行比较</li>
</ul>
</li>
<li>如果一个操作数是布尔值，则先将其转换为数值，然后再进行比较</li>
<li>任何数与 NaN 进行比较时结果都是 false</li>
</ul>
<h3> 相等操作符</h3>
<ul>
<li>用于确定两个变量是否相等</li>
<li>相等和不相等：先转换再比较</li>
<li>全等和不全等：仅比较而不转换</li>
</ul>
<h4> 相等和不相等</h4>
<ul>
<li>相等（ == ）
<ul>
<li>两个操作数相等，返回 true，反之则返回 false</li>
</ul>
</li>
<li>不相等（ != ）
<ul>
<li>两个操作数不相等，返回 true，反之则返回 false</li>
</ul>
</li>
<li>这两种操作符都会先转换操作数（强制转换），然后再比较相等性</li>
</ul>
<h5> 数据类型转换规则</h5>
<ul>
<li>如果有一个操作数是布尔值，则在比较相等性之前现将其转换为数值
<ul>
<li>true 转换为 1</li>
<li>false 转换为 0</li>
</ul>
</li>
<li>如果一个操作数是字符串，另一个操作是数值，在比较相等性之前现将字符串转换为数值</li>
<li>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较</li>
</ul>
<h5> 操作符比较规则</h5>
<ul>
<li>null 和 undefined 是相等的</li>
<li>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值</li>
<li>如果有一个操作数是 NaN ，则相等性操作符返回 false ，而不相等操作符返回 true
<ul>
<li>即使两个操作数都是 NaN，相等性操作符也返回 false ，不相等操作符返回 true</li>
</ul>
</li>
<li>如果两个操作数都是对象，则比较他们是不是同一个对象
<ul>
<li>如过两个操作数都指向同一对象，则相等性操作符返回 true，否则返回 false</li>
</ul>
</li>
</ul>
<h5> 一些特殊情况的比较结果</h5>
<table>
<thead>
<tr>
<th>表达式</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>null == undefined</td>
<td>true</td>
</tr>
<tr>
<td>"NaN" == NaN</td>
<td>false</td>
</tr>
<tr>
<td>5 == NaN</td>
<td>false</td>
</tr>
<tr>
<td>NaN == NaN</td>
<td>false</td>
</tr>
<tr>
<td>NaN != NaN</td>
<td>true</td>
</tr>
<tr>
<td>false == 0</td>
<td>true</td>
</tr>
<tr>
<td>true == 1</td>
<td>true</td>
</tr>
<tr>
<td>true == 2</td>
<td>false</td>
</tr>
<tr>
<td>undefined == 0</td>
<td>false</td>
</tr>
<tr>
<td>null == 0</td>
<td>false</td>
</tr>
<tr>
<td>"5" == 5</td>
<td>true</td>
</tr>
</tbody>
</table>
<h4> 全等和不全等</h4>
<ul>
<li>全等（ === ）</li>
<li>不全等（ !== ）</li>
<li>除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符相同</li>
</ul>
<h3> 条件操作符</h3>
<ul>
<li>let v = boolean_expression ? true_value : false_value;</li>
</ul>
<h3> 赋值操作符</h3>
<ul>
<li>简单的复制操作符由（ = ）表示，作用就是把右边的值赋给左侧的变量
<ul>
<li>let num = 10</li>
</ul>
</li>
<li>在等号前添加乘性操作符、加性操作符或位操作符，可完成复合赋值操作
<ul>
<li>乘/赋值（ *= ）</li>
<li>除/赋值（ /= ）</li>
<li>模/赋值（ %= ）</li>
<li>加/赋值（ += ）</li>
<li>减/赋值（ -= ）</li>
</ul>
</li>
</ul>
<h3> 逗号操作符</h3>
<ul>
<li>（ , ）</li>
<li>使用逗号操作符可以在一条语句中执行多个操作
<ul>
<li>var num = 1, num2 = 2, num3 = 3;</li>
</ul>
</li>
<li>可用于赋值，返回表达式中最后一项
<ul>
<li>var num = (5, 1, 4, 8, 0); // num 的值为 0</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">引用类型</title>
    <id>https://codemake.fun/fe/javascript/knowledge/12.%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/12.%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">引用类型引用类型的值（对象）是引用类型的一个实例; 新对象是使用 new 操作符后跟一个构造函数来创建的; 构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的; 引用类型是一种数据结构，在技术上讲是一门面向对象的语言; 不具备传统面向对象语言所支持的类和接口等基本结构; Object 类型创建 Object 实例的方法; ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 引用类型</h2>
<ul>
<li>引用类型的值（对象）是引用类型的一个实例
<ul>
<li>新对象是使用 new 操作符后跟一个构造函数来创建的
<ul>
<li>构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的</li>
</ul>
</li>
</ul>
</li>
<li>引用类型是一种数据结构，在技术上讲是一门面向对象的语言
<ul>
<li>不具备传统面向对象语言所支持的类和接口等基本结构</li>
</ul>
</li>
</ul>
<h3> Object 类型</h3>
<ul>
<li>创建 Object 实例的方法
<ul>
<li>new Object</li>
<li>字面量表示法
<ul>
<li>不会调用 Object 构造函数</li>
</ul>
</li>
</ul>
</li>
<li>访问对象属性方法
<ul>
<li>点表示法</li>
<li>方括号表示法
<ul>
<li>可通过变量访问</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> Array 类型</h3>
<ul>
<li>有序列表</li>
<li>每一项可以保存任何类型的数据</li>
<li>数组大小可以动态调整，即可以随数据添加自动增长以容纳新数据</li>
<li>创建数组方法
<ul>
<li>new Array ：var colors = new Array();</li>
<li>字面量表示法 [ ]</li>
</ul>
</li>
</ul>
<h4> 检测数组</h4>
<ul>
<li>instanceof 操作符
<ul>
<li>instanceof 是假定单一的全局环境，如果网页中包含多个框架，那实际上就存在两个以上不同的全局环境，就会有两个不同版本的 Array 构造函数，如果从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数</li>
</ul>
</li>
<li>Array.isArray() 方法
<ul>
<li>if ( Array.isArray(value) )</li>
</ul>
</li>
</ul>
<h4> 转换方法</h4>
<ul>
<li>toString：调用数组的 toString() 方法会返回数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串
<ul>
<li>会调用数组每一项的 toString() 方法</li>
</ul>
</li>
<li>valueOf：调用数组的 valueOf() 方法反悔的还是数组</li>
<li>toLocalString：经常返回与 toString() 和 valueOf() 方法相同的值，会调用数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串
<ul>
<li>会调用数组每一项的 toLocalString() 方法</li>
</ul>
</li>
</ul>
<h4> 数组方法</h4>
<h5> 栈方法</h5>
<ul>
<li><strong>push()</strong>：接受任意数量参数，逐个添加到数组末尾，并返回修改后的数组长度</li>
<li><strong>pop()</strong>：从数组末尾移除最后一项，减少数组的 length 值，并返回移除的项</li>
</ul>
<h5> 队列方法</h5>
<ul>
<li><strong>shift()</strong>：移除数组中第一个项，并返回该项，同时使数组长度减 1</li>
<li><strong>unshift()</strong>：在数组前端添加任意个项并返回新数组的长度</li>
</ul>
<h5> 重排序方法</h5>
<ul>
<li><strong>reverse()</strong>：翻转数组（不灵活）</li>
<li><strong>sort()</strong>
<ul>
<li>接收数组，数组的每一项进行 toString() 转换为字符串，然后去比较得到的字符串
<ul>
<li>即使每一项都是数值，比较的也是字符串，10 会位于 5 的前面（不是最佳方案）</li>
</ul>
</li>
<li>接受一个比较函数作为参数
<ul>
<li>比较函数接受两个参数
<ul>
<li>如果第一个参数应该位于第二个之前则返回一个负数</li>
<li>如果两个参数相等则返回 0</li>
<li>如果第一个参数应该在第二个之后则返回一个正数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5> 操作方法</h5>
<ul>
<li><strong>concat()</strong>：基于当前数组的所有项创建一个新数组
<ul>
<li>这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组
<ul>
<li>没有传递参数的情况下，仅复制当前数组并返回副本</li>
<li>穿第一个或多个数组时，该方法会将这些数组中的每一项都添加到结果数组中</li>
<li>如果传递的值不是数组，这些值会被简单的添加到结果数组的末尾</li>
</ul>
</li>
</ul>
</li>
<li><strong>slice()</strong>：基于当前数组中的一个或多个项创建一个新数组
<ul>
<li>接受一个或两个参数：即返回项的起始和结束位置
<ul>
<li>只有一个参数时，返回从该参数指定位置开始到当前数组末尾的所有项</li>
<li>有两个参数时，返回起始位置和结束位置之间的项（不包括结束位置的项）</li>
<li>如果改参数中有负数，则用数组长度加上该数老确定相应的位置
<ul>
<li>例如一个包含五项的数组上调用 slice(-2,1) 与 slice(3,4) 结果是相通的</li>
<li>如果结束位置小于起始位置，则返回空数组</li>
</ul>
</li>
<li>该方法不会影响原始数组</li>
</ul>
</li>
</ul>
</li>
<li><strong>splice()</strong>
<ul>
<li>三种使用方式
<ul>
<li>删除元素：可以删除任意数量的项，需要指定两个参数：要删除的第一项的位置和要删除的项数
<ul>
<li>只传一个参数怎会删除从这个位置开始到最后的所有元素</li>
</ul>
</li>
<li>插入元素：向指定位置插入任意数量的项
<ul>
<li>需要提供 3 个参数
<ul>
<li>起始位置</li>
<li>0（要删除的项数）</li>
<li>要插入的项，如果需要插入多个项，可以再传入第四、第五以致任意多个项</li>
</ul>
</li>
</ul>
</li>
<li>替换元素：向指定位置插入任意数量的项，且同时删除任意数量的项
<ul>
<li>需要提供 3 个参数
<ul>
<li>起始位置</li>
<li>要删除的项数</li>
<li>要插入的任意数量的项</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>该方法始终会返回一个数组，其中包含从原始数组中删除的项
<ul>
<li>没有删除任何项，则返回一个空数组</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5> 位置方法</h5>
<ul>
<li><strong>indexOf()</strong>
<ul>
<li>接收两个参数
<ul>
<li>要查找的项和（可选的）表示查找起点位置的索引</li>
<li>从数组的开头（位置 0）开始向后查找</li>
<li>返回要查要的项在数组中的位置，没找到的情况下返回 -1</li>
<li>比较时采用的是全等操作符</li>
</ul>
</li>
</ul>
</li>
<li><strong>lastIndexOf()</strong>
<ul>
<li>接收两个参数
<ul>
<li>要查找的项和（可选的）表示查找起点位置的索引</li>
<li>从数组的末尾开始向前查找</li>
<li>返回要查要的项在数组中的位置，没找到的情况下返回 -1</li>
<li>比较时采用的是全等操作符</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5> 迭代方法</h5>
<ul>
<li>每个方法都接受两个参数
<ul>
<li>要在每一项上运行的函数</li>
<li>（可选的）运行该函数的作用域对象 - 影响 this 的值</li>
</ul>
</li>
<li>传入这些方法中的函数会接收三个值
<ul>
<li>数组项的值</li>
<li>该项在数组中的位置（索引）</li>
<li>数组对象本身</li>
</ul>
</li>
<li>5 个迭代方法及作用（这几个方法都不会修改数组中包含的值）
<ul>
<li><strong>every()</strong>：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true ，则返回 true
<ul>
<li>用于查询数组中的项是否满足某个条件</li>
</ul>
</li>
<li><strong>some()</strong>：对数组中的每一项运行给定函数，如果该函数对任一项返回 true ，则返回 true
<ul>
<li>用于查询数组中的项是否满足某个条件</li>
</ul>
</li>
<li><strong>filter()</strong>：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组
<ul>
<li>返回数组中满足函数中条件的项</li>
</ul>
</li>
<li><strong>map()</strong>：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组
<ul>
<li>返回在原始数组中对应项上运行传入函数的结果的数组</li>
</ul>
</li>
<li><strong>forEach()</strong>：对数组中的每一项运行给定函数，该方法没有返回值
<ul>
<li>本质上与 for 循环迭代数组一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5> 缩小方法</h5>
<ul>
<li><strong>reduce()</strong> 和 <strong>reduceRight()</strong>
<ul>
<li>都会迭代数组的所有项，然后构建一个最终返回的值</li>
<li>reduce() 方法从数组第一项开始，逐个遍历到最后</li>
<li>reduceRight() 方法从数组最后一项开始，向前遍历到第一项</li>
<li>都接受两个参数
<ul>
<li>在每一项上调用的函数
<ul>
<li>函数接收四个参数（前一个值、当前值、项的索引、数组对象）</li>
<li>函数返回的任何值都会作为第一个参数自动传给下一项</li>
<li>第一次迭代发生在数组的第二项上，此时第一个参数是数组的第一项，第二个参数是数组的第二项</li>
</ul>
</li>
<li>（可选的）用作第一个调用函数的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> Date 类型</h3>
<ul>
<li>使用 UTC（国际协调时间）1970 年 1 月 1 时午夜（零时）开始经过的毫秒数来保存日期，能精确到 1970 年 1 月 1 日之前货之后的 285616 年</li>
<li>创建一个日期对象，使用 new 操作符和 Date 构造函数
<ul>
<li>如果第一个值是数值，Date 构造函数就会假设该值是日期中的年份，第二个是月份</li>
</ul>
</li>
<li>根据特定的日期或者时间创建日期对象，必须传入该日期的毫秒数，为了简化这一过程，ECMAScript 提供了两个方法 Date.parse() 和 Date.UTC()
<ul>
<li>Date.parse() ：接收一个表示日期的字符串参数，然后尝试根据这个字符串返回相应日期的毫秒数，字符串形式如下面几种方法所示
<ul>
<li>"月/日/年"，如 6/13/2004</li>
<li>"英文月名 日,年"，如 January 12,2004</li>
<li>"英文星期几 英文月名 日 年 时:分:秒 时区"，如 Tue May 25 2004 00:00:00 GMT-0700</li>
<li>"YYYY-MM-DDTHH:mm:ss.sssZ"， 如 2004-05-25T00:00:00 (兼容 ECMAScript5 才支持)</li>
<li>如果传入的字符串不能表示日期，则会返回 NaN</li>
<li>实际上如果直接将表示日期的字符串传给 Date 构造函数，也会在后台调用 Date.parse()</li>
</ul>
</li>
<li>Date.UTC() ：返回表示日期的毫秒数，与 Date().parse() 在狗键值时使用不同的信息
<ul>
<li>参数分别是 年份、基于 0 的月份（一月是 0、二月是 1，以此类推）、月中的哪一天（1-31）、小时数（0-23）、分钟、秒以及毫秒数
<ul>
<li>只有两个参数（年和月）是必填的，如果没有提供天数则设天数为 1，如果省略其他参数，则统统设为 0</li>
</ul>
</li>
</ul>
</li>
<li><strong>Date.now()</strong>：返回表示调用这个方法时的日期和时间的毫秒数</li>
</ul>
</li>
</ul>
<h4> 日期时间组件方法</h4>
<ul>
<li>getTime()：返回表示日期的毫秒数，与 valueOf() 方法返回的值相同</li>
<li>getFullYear()：取得四位数年份</li>
<li>getMonth()：返回日期中的月份，0 表示一月，11 表示 12 月</li>
<li>getDate()：返回日期月份中的天数（1-31）</li>
<li>getDay()：返回日期中的星期的星期几（0 表示星期日，6 表示星期日）</li>
<li>getHours()：返回日期中的小时数（0-23）</li>
<li>getMinutes()：返回日期中的分钟数（0-59）</li>
<li>getSeconds()：返回日期中的秒数（0-59）</li>
<li>getMilliseconds()：返回日期中的毫秒数</li>
</ul>
<h3> RegExp 类型（未完成）</h3>
<ul>
<li>ECMAScript 通过 RegExp 类型来支持正则表达式。</li>
<li>使用下面的语法可以创建一个正则表达式
<ul>
<li><code>var exoression = / pattern / flags</code>
<ul>
<li><code>pattern</code>：可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。</li>
<li>每个正则表达式都可带有一个或多个标志（ <code>flags</code> ），用以标明正则表达式的行为。</li>
<li>正则表达式的匹配模式支持下列三个标志
<ul>
<li><code>g</code>：表示全局（global）模式，即模式将被应用与所有字符串，而非在发现第一个匹配项时立即停止</li>
<li><code>i</code>：表示不区分大小写模式，即在确定匹配项时忽略模式与字符串的大小写</li>
<li><code>m</code>：表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否讯在于模式匹配的项</li>
</ul>
</li>
<li>一个正则表达式就是一个模式与上述三个标志的组合体</li>
<li>模式中所有的元字符都必须转义， 正则表达式中的元字符包括：<code>()</code></li>
<li>例子
<ul>
<li><code>var pattern1 = /at/g</code>：匹配字符串中所有 “at” 的实例</li>
<li><code>vat pattern2 = /[bc]at/i]</code>：匹配第一个 “bat” 或 "cat"，不区分大小写</li>
<li><code>var pattern3 = /.at/gi</code>：匹配所有以 “at” 结尾的 3 个字符的组合，不区分大小写</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> Function 类型</h3>
<ul>
<li>没有重载，同名函数会直接覆盖</li>
<li>函数声明与函数表达式
<ul>
<li>优先读取函数声明，并使其在执行任何代码之前可用（可以访问）</li>
<li>函数表达式必须等到解释器执行到他所在的代码行才会被解释执行</li>
<li>作为值的函数</li>
</ul>
</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>函数的内部属性
<ul>
<li>函数内部，有两个特殊的对象：<code>arguments</code> 和 <code>this</code>
<ul>
<li><code>arguments</code>：类数组对象，包含传入函数中的所有参数
<ul>
<li>这个对象还有一个名叫 <code>callee</code> 的属性，该属性是一个指针，指向拥有这个 <code>arguments</code> 对象的函数</li>
</ul>
</li>
<li><code>this</code>：是函数据以执行的环境对象，或者也可以说是 this 值（当在网页的全局作用域中调用函数时，this 对象的引用就是 window）</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>ECMAScript 5 也规范了另一个函数对象的属性：<code>caller</code></p>
<ul>
<li>这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为 <code>null</code></li>
<li>严格模式下 <code>arguments.callee</code> 会导致错误</li>
<li>ECMAScript 5 还定义了 <code>arguments.caller</code> 属性，但在严格模式下访问它也会导致错误，而在非严格模式下这个属性始终是 <code>undefined</code></li>
<li>定义这个属性是为了分清 <code>arguments.caller</code> 和 函数的 <code>caller</code> 属性，以上变化都是为了加强这门语言的安全性，这样第三方代码库就不能在相同的环境里窥视其它代码了</li>
<li>严格模式还有一个限制：不能为函数的：<code>caller</code> 属性复制，否则会导致 错误</li>
</ul>
</li>
<li>
<p>函数属性和方法</p>
<ul>
<li>每个函数都包含两个属性：<code>length</code> 和 <code>prototype</code>
<ul>
<li><code>length</code>：表示函数希望接收的命名参数的个数，</li>
<li><code>prototype</code>
<ul>
<li>每个函数都包括两个非继承而来的方法：<code>apply()</code> 和 <code>call()</code>，这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内 this 的值。
<ul>
<li><strong>apply()</strong> ：接受两个参数，一个是在其中运行函数的作用域，另一个是参数数组。 其中，第二个参数可以是 Array 的实例，也可以是 arguments 对象</li>
<li><strong>call()</strong>：与 apply() 方法的作用基本相同，它们的区别仅在于接收参数的方式不同。第一个参数 this 值没有变化，变化的是其余参数都是直接传递给函数。换句话说，在使用 call() 方法时，传递给函数的参数据需逐个列举出来</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>bind()</strong>：创建一个函数的实例，其 this 值会被绑定到传给 bind() 函数的值</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>每个函数继承的 <code>toLocaleString()</code> 和 <code>toString()</code> 方法始终返回函数的代码。
<ul>
<li>返回代码的格式因浏览器而异，有的返回的代码与源代码中的函数代码一样，而有的则返回函数代码的内部表示，即由解释器删除了注释并对某些代码做了改动后的代码。由于这些差异，我们无法根据这两个方法来实现任何功能，不过这些信息在调试代码时很有用。另一个继承的 valueOf() 方法同样也只返回函数代码。</li>
</ul>
</li>
</ul>
<h3> 基本包装 类型</h3>
<h4> Boolean 类型</h4>
<ul>
<li>重写了 <code>valueOf()</code> 方法，返回基本类型值 true 或 false</li>
<li>重写了 <code>toString() </code> 方法，返回字符串 “true” 和 “false”</li>
<li>建议永远不要使用 Boolean 对象</li>
</ul>
<h4> Number 类型</h4>
<ul>
<li>重写了 <code>valueOf()</code> 方法，返回对象表示的基本类型的数值</li>
<li>另外两个方法则返回字符串形式的数值</li>
<li>将数值格式化为字符串的方法
<ul>
<li><code>tofixed()</code>：按照指定的小数位（0~20）返回数值的字符串表示（如果数值本身包含的小数位比指定的还多，那么接近指定的最大小数位的值就会舍入）</li>
<li><code>toExponential()</code>：该方法会返回以指数表示法（也成 e 表示法）表示的数值的字符串形式，与 tofixed() 一样，toExponential() 也接受一个参数，而且该参数也是指定输出结果中的小数位数</li>
<li><code>toPrecision()</code>：该方法可能会赶回固定格式大小（ fixed ）格式，也可能返回指数格式，接受一个参数，即表示数值的所有数字位数（不包括指数部分 1~21）</li>
</ul>
</li>
<li>仍然不建议直接实例化 Number 类型</li>
</ul>
<h4> String 类型</h4>
<ul>
<li><code>String</code> 对象的方法也可以在所有基本的字符串值中访问到。其中，继承的 valueOf()、toLocaleString()、toString() 方法都返回对象所表示的基本字符串的值</li>
<li>即使字符串中包含双字节字符（不是占一个字节的 ASCLL 字符），每个字符仍算一个字符</li>
</ul>
<h5> 字符方法</h5>
<ul>
<li><code>chartAt()</code> 和 <code>charCodeAt()</code>，这两个方法都接受一个参数，即基于 0 的字符串位置。
<ul>
<li><strong>charAt()</strong> 方法以单字符字符串形式返回给定位置的那个字符</li>
<li><strong>charCodeAt()</strong> 方法返回字符编码</li>
<li><code>str[index]</code> 的形式也可访问字符串中的特定字符（IE8 以前版本的 IE 浏览器不支持）</li>
</ul>
</li>
</ul>
<h5> 字符串操作方法</h5>
<ul>
<li><code>contact()</code>：用于将一个或多个字符串拼接起来，返回拼接得到的新字符串</li>
<li><code>slice()</code>、<code>substr()</code>、<code>substring()</code>
<ul>
<li>这三个方法都会返回被操作字符串的一个子字符串</li>
<li>都接受一或两个参数，第一个参数指定子字符串的开始位置</li>
<li><code>slice()</code> 和 <code>substring()</code> 的第二个参数指定的是子字符串最后一个字符后面的位置</li>
<li><code>substr()</code> 的第二个参数指定的是返回字符个数</li>
<li>如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置</li>
<li>与 <code>contact()</code> 方法一样，这三个函数不会修改字符串本身的值，只是返回一个基本类型的字符串值，对原始字符串没有任何影响</li>
<li>当传入参数存在负值时
<ul>
<li><code>slice() </code>：将传入的负值与字符串的长度相加</li>
<li><code>substr()</code>：将负的第一个参数加上字符串的长度，将负的第二个参数转换为 0</li>
<li><code>substring()</code>：将所有负值参数都转换为 0，<strong>该方法会将较小的数作为开始位置，将较大的数作为结束位置</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5> 字符串位置方法</h5>
<ul>
<li><code>indexOf()</code>、<code>lastIndexOf()</code>
<ul>
<li>在一个字符串中搜索给定字符串，然后返回字符串位置，如果没有找到该字符串，则返回 -1</li>
<li><code>indexOf()</code> 从字符串的开头向后搜索字符串</li>
<li><code>lastIndexOf()</code> 从字符串的末尾向前搜索字符串</li>
<li>这两个方法都可以接受第二个参数，表示从字符串的哪个位置开始搜索
<ul>
<li><code>indexOf()</code> 从该参数指定的位置向后搜索，忽略该位置之前的所有字符串</li>
</ul>
</li>
<li><code>lastIndexOf()</code> 从该参数指定的位置向前搜索，忽略该位置之后的所有字符串</li>
</ul>
</li>
</ul>
<h5> trim() 方法</h5>
<ul>
<li>创建一个字符串的副本删除前置及后缀的所有空格，然后返回结果</li>
</ul>
<h5> 字符串大小写转换方法</h5>
<ul>
<li><code>toLowerCase()</code>：将字符串转化为小写</li>
<li><code>toLocaleLowerCase()</code>：将字符串转化为小写</li>
<li><code>toUpperCase</code>：将字符串转化为大写</li>
<li><code>toLocaleUpperCase()</code>：将字符串转化为大写</li>
<li><code>toLocaleLowerCase()</code> 和 <code>toLocaleUpperCase()</code> 是针对特定地区实现。对有些地区来说，针对地区方法与其通用方法得到的结果相同，但少数语言（如土耳其语）会为 Unicode 大小写转换应用特殊的规则，这时候就必须使用针对地区的方法来保证实现正确的转换。</li>
<li>在不知道自己的代码将在哪种语言环境中运行的情况下，使用针对地区的方法更稳妥一些</li>
</ul>
<h5> 字符串的模式匹配方法（未完成）</h5>
<ul>
<li><code>match()</code>：在字符串上调用这个方法，本质上与调用 RegExp 的 exec() 方法相同
<ul>
<li>只接收一个参数，要么是一个正则表达式，要么是一个 RegExp 对象</li>
</ul>
</li>
</ul>
<h5> localeCompare() 方法</h5>
<ul>
<li>比较两个字符串，并返回下列值中的一个
<ul>
<li>如果字符串在字母表中应该排在字符串参数之前，则返回一个负数（大多数情况返回 -1，具体的值要视实现而定）</li>
<li>如果字符串等于字符串参数，则返回 0</li>
<li>如果字符串在字母表中应该排在字符串参数之后，则返回一个正数（大多数情况返回 1，具体的值同样要视实现而定）</li>
</ul>
</li>
</ul>
<h5> fromCharCode() 方法</h5>
<ul>
<li>接受一或多个字符编码，然后将它们转换成一个字符串</li>
<li>从本质上来看，这个方法与实例方法 charCodeAt() 执行的是相反的操作</li>
</ul>
<h4> 单体内置对象</h4>
<ul>
<li>ECMA-262 对内置对象的定义是：由 ECMAScript 实现提供的、不依赖宿主环境的对象，这些对象在 ECMAScript 程序执行之前就已经存在了。”意思就是说，开发人员不必显式的实例化内置对象，因为它们已经实例化了。</li>
<li><code>Object</code>、<code>Array</code>、<code>Strinfg</code>、<code>Global</code>、<code>Math</code></li>
</ul>
<h5> Global 对象</h5>
<ul>
<li>ECMAScript 中最特别的一个对象，因为不管你从什么角度上看，这个对象都是不存在的。</li>
<li>ECMAScript 中的 Global 对象在某种意义上是最为一个终极的 “兜底儿对象”来定义的。换句话说，<strong>不属于任何其他对象的属性和方法，最终都是它的属性和方法，事实上没有全局变量或者全局函数，所有在全局作用于中定义的函数和方法都是 Global 对象的属性</strong>。</li>
</ul>
<h6> Global 对象包含的一些方法</h6>
<p>####### URL 编码方法</p>
<ul>
<li><code>encodeURI()</code> 和 <code>encodeURIComponent()</code> 方法可以对 URI（通用资源标识符）进行编码以便发送给浏览器
<ul>
<li>有效的 URI 中不能包含某些字符，例如空格</li>
<li>这两个 URI 编码方法就可以对 URI 进行编码，它们用特殊的 UTF-8 编码替换所有无效的字符，从而让浏览器能够接受和理解</li>
<li><code>encodeURI()</code> 主要用于整个 URI，而 <code>encodeURIComponent()</code> 主要用于对 URI 中的某一段进行编码。</li>
<li>两个函数主要的区别在于 <code>encodeURI()</code> 不会对本身属于 URI 的特殊字符进行编码，如冒号、正斜杠、问好和井字号，而 <code>encodeURIComponent()</code> 会对它发现的任何非标准字符进行编码</li>
</ul>
</li>
<li>与 <code>encodeURI()</code> 和 <code>encodeURIComponent()</code> 对应的两个方法分别是 <code>decodeURI()</code> 和 <code>decodeURIComponent()</code>
<ul>
<li>其中 decodeURI() 只能对使用 <code>encodeURI()</code> 替换的字符进行解码，同样的，decodeURIComponent() 能够解码使用 encodeURIComponent() 编码的所有字符，即它可以解码任何特殊字符的编码</li>
</ul>
</li>
</ul>
<h6> eval() 方法</h6>
<ul>
<li>只接受一个参数，即要执行的 ECMAScript（或 JavaScript）字符串</li>
<li>当解析器发现代码中调用 eval() 方法时，它会将传入的参数当做实际的 ECMAScript 语句来解析，然后把执行结果插入到原来的位置。</li>
<li>通过 eval() 执行的代码被认为是包含该次调用的执行环境的一部分，因此被执行的代码具有与该执行环境相同的作用域链。这意味着通过 eval() 执行的代码可以引用在包含环境中定义的变量</li>
<li>在 eval() 中创建的任何变量或函数都不会被提升，因为在解析代码的时候，他们被包含在一个字符串中，他们只有在 eval() 执行的时候创建</li>
<li>严格模式下，在外部访问不到 eval() 中创建的任何变量或函数，同样，在严格模式下，为 eval 赋值也会导致错误</li>
</ul>
<h6> Global 对象的属性</h6>
<ul>
<li>window 对象 ECMAScript 虽然没有指出如何直接访问 Global 对象，但 Web 浏览器都是将这个全局对象作为 window 对象的一部分加以实现的。因此，在全局作用域中声明的所有变量和函数，就都成为了 window 对象的属性</li>
</ul>
<h5> Math 对象</h5>
<h6> Math 对象的属性</h6>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Math.E</td>
<td>自然对数的底数，即常量 e 的值</td>
</tr>
<tr>
<td>Math.LN10</td>
<td>10 的自然对数</td>
</tr>
<tr>
<td>Math.LN2</td>
<td>2 的自然对数</td>
</tr>
<tr>
<td>Math.LOG2E</td>
<td>以 2 为底 e 的对数</td>
</tr>
<tr>
<td>Math.LOG10E</td>
<td>以 10 为底 e 的对数</td>
</tr>
<tr>
<td>Math.PI</td>
<td>π 的值</td>
</tr>
<tr>
<td>Math.SQRT1_2</td>
<td>1/2 的平方根（即 2 的平方根的倒数）</td>
</tr>
<tr>
<td>Math.SQRT2</td>
<td>2 的平方根</td>
</tr>
</tbody>
</table>
<h6> Math 对象的方法</h6>
<p>####### <code>min()</code> 和 <code>max()</code> 方法</p>
<ul>
<li>用于确定一组数值中的最小值和最大值，这两个方法都可以接收任意多个数值参数</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>####### 舍入方法</p>
<ul>
<li><code>Math.ceil()</code>：执行向上舍入，即它总是将数值向上舍入为最接近的整数</li>
<li><code>Math.floor()</code>：执行向下舍入，即它总是将数值向下舍入为最接近的整数</li>
<li><code>Math.round()</code>：执行标准舍入，即它总是将数值四舍五入为最接近的整数</li>
</ul>
<p>####### random() 方法</p>
<ul>
<li>返回介于 0 和 1 之间的一个随机数，不包括 0 和 1</li>
<li>可以用以下公式来从某个整数范围内随机选择一个值
<ul>
<li><strong>值 = Math.floor( Math.random() * 可能值的总数 + 第一个可能的值 )</strong></li>
</ul>
</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6> 其他方法</h6>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Math.abs(num)</td>
<td>返回 num 的绝对值</td>
</tr>
<tr>
<td>Math.exp(num)</td>
<td>返回 Math.E 的 num 次幂</td>
</tr>
<tr>
<td>Math.log(num)</td>
<td>返回 num 的自然数对</td>
</tr>
<tr>
<td>Math.pow(num,power)</td>
<td>返回 num 的 power 次幂</td>
</tr>
<tr>
<td>Math.sqrt(num)</td>
<td>返回 num 的平方根</td>
</tr>
<tr>
<td>Math.acos(x)</td>
<td>返回 x 的反余弦值</td>
</tr>
<tr>
<td>Math.asin(x)</td>
<td>返回 x 的反正弦值</td>
</tr>
<tr>
<td>Math.atan(x)</td>
<td>返回 x 的反正切值</td>
</tr>
<tr>
<td>Math.stan2(y,x)</td>
<td>返回 y/x 的反正切值</td>
</tr>
<tr>
<td>Math.cos(x)</td>
<td>返回 x 的余弦值</td>
</tr>
<tr>
<td>Math.sin(x)</td>
<td>返回 x 的正弦值</td>
</tr>
<tr>
<td>Math.tan(x)</td>
<td>返回 x 的正切值</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">面向对象</title>
    <id>https://codemake.fun/fe/javascript/knowledge/13.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/13.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">理解对象 属性类型 ECMAScript-262 第五版在定义只有内才用的特性时，描述了属性的各种特征。ECMAScript-262 定义这些特性是为了实现 JavaScript 引擎用的，因此在 JavaScript 中不能直接访问和他们。为了表示特性是内部值，该规范把他们放在了两对儿方括号中，例如 [[Enumerable]] 数据属性[[Co...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 理解对象</h2>
<h3> 属性类型</h3>
<blockquote>
<p>ECMAScript-262 第五版在定义只有内才用的特性时，描述了属性的各种特征。ECMAScript-262 定义这些特性是为了实现 JavaScript 引擎用的，因此在 JavaScript 中不能直接访问和他们。为了表示特性是内部值，该规范把他们放在了两对儿方括号中，例如 [[Enumerable]]</p>
</blockquote>
<h4> 数据属性</h4>
<ul>
<li><code>[[Configurable]]</code>：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。
<ul>
<li>一旦此属性定义为 <code>false</code>，则不能再把它变回可配置，此时在调用 <code>Object.defineProperty() </code> 只能修改 <code>writable</code> 特性</li>
</ul>
</li>
<li><code>[[Enumerable]]</code>：表示能否通过 for-in 循环返回属性。</li>
<li><code>[[Writable]]</code>：表示能否修改属性的值。</li>
<li><code>[[Value]]</code>：包含这个属性的数据值。读取属性值的时候从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。</li>
<li><code>Object.defineProperty()</code>：要修改属性默认的特性，必须使用此方法
<ul>
<li>接受三个参数：属性所在对象、属性的名字、和一个描述符对象
<ul>
<li>描述符对象的属性必须是：configurable、enumerable、writable、value。设置其中的一个或多个值可以修改对应的特性值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4> 访问器属性</h4>
<ul>
<li>访问器属性不包括数据值；他们包含一对儿 <strong>getter</strong> 和 <strong>setter</strong> 函数（饭不是必须的）</li>
<li>在读取访问器属性时，会调用 <strong>getter</strong> 函数，这个函数负责返回有效的值；</li>
<li>在写入访问器属性时，会调用 <strong>setter</strong> 函数，这个函数负责决定如何处理；数据</li>
<li>访问器属性特性
<ul>
<li><code>[[Configurable]]</code>：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</li>
<li><code>[[Enumerable]]</code>：表示能否通过 for-in 循环返回属性。</li>
<li><code>[[Get]]</code>：在读取属性时调用的函数，默认值为 undefined。</li>
<li><code>[[Set]]</code>：在写入属性时调用的函数，默认值为 undefined。</li>
</ul>
</li>
<li><code>Object.defineProperty()</code>：要定义访问器属性，必须使用此方法
<ul>
<li>接受三个参数：属性所在对象、属性的名字、和一个描述符对象
<ul>
<li>描述符对象的属性必须是：configurable、enumerable、writable、value。设置其中的一个或多个值可以修改对应的特性值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 定义多个属性</h3>
<ul>
<li><code>Object.defineProperties()</code>：为对象定义多个属性
<ul>
<li>接收两个对象参数
<ul>
<li>第一个对象是要添加和修改其属性的对象</li>
<li>第二个对象的属性与第一个对象中要添加或修改的属性一一对应。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> 读取属性的特性</h3>
<ul>
<li><code>Object.getOwnPropertyDescriptor()</code>：获取给定属性的描述符
<ul>
<li>接收两个参数
<ul>
<li>属性所在的对象</li>
<li>要读取其描述符的属性名称</li>
</ul>
</li>
<li>返回一个对象
<ul>
<li>如果是数据属性，这个对象的属性有 configurable、enumerable、writable、value</li>
<li>如果是访问器属性，这个对象的属性有 configurable、enumerable、get、set</li>
</ul>
</li>
</ul>
</li>
<li>在 JavaScript 中，可以针对任何对象使用 <code>Object.getOwnPropertyDescriptor()</code>，包括 BOM 和 DOM</li>
</ul>
<h2> 创建对象</h2>
<h3> 工厂模式</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 构造函数模式</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>对象的 <strong>constructor</strong> 最初是用来表示对象类型的，但是，还是使用 <strong>instanceof</strong> 操作符更可靠一些</li>
<li>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型，这也正是构造函数模式胜过工厂模式的地方</li>
<li>以这种方式定义的构造函数是定义在 Global 对象（在浏览器中是 window 对象）中的。</li>
</ul>
<h4> 将构造函数当做函数</h4>
<ul>
<li>构造函数与其他函数唯一的区别，就在于调用他们的方式不同。</li>
<li>构造函数依然势函数，不存在定义构造函数的特殊语法</li>
<li>任何函数吗，只要通过 new 操作符来调用，那他就可以作为构造函数</li>
<li>任何函数，如果不通过构造函数来调用，那它和普通函数也没有区别</li>
</ul>
<h3> 原型模式</h3>
<ul>
<li>每个被创建的函数都有 <code>prototype</code>（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。按字面意思理解，那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。</li>
<li>使用原型对象的好处就是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。</li>
</ul>
<h4> 理解原型对象</h4>
<ul>
<li>只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象</li>
<li>默认情况下，所有原型对象都会自动获取一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。</li>
<li>创建了自定义构造函数之后，其原型对象默认只会取得 constructor 属性，至于其他方法，则都是从 Object 继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMA-262 第五版管这个指针叫 [[Prototype]]</li>
<li><code>isProtptypeOf()</code>：从本质上讲没如果 [[Prototype]] 指向调用 isPrototypeOf() 方法的对象（Proson.prototype）,那么这个方法就返回 true</li>
<li>ECMAScript 5 增加了一个新方法，叫 <code>Object.getPrototypeOf()</code>，返回 [[Prototype]] 的值</li>
<li>可以通过对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。</li>
<li>如果在实例中有与实例原型相同的属性名，则该属性会屏蔽原型中的属性</li>
<li>使用 delete 操作符可以完全删除实例属性，从而让我们能够重新访问原型中的属性</li>
<li><code>hasOwnProperty()</code>：检测一个属性是存在于实例中还是存在于原型中，这个方法（不要忘了它是从 Object 继承来的）只在给定属性存在于对象实例中时，才会返回 true</li>
<li><code>in</code>：操作符只要通过对象能够访问到属性就返回 true</li>
<li><code>Object.keys(obj)</code>：取的对象上所有可枚举的实例属性，接受一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。</li>
<li><code>Object.getOwnPropertyDescriptor(obj, 'name')</code>：返回实例属性描述符，要取得原型属性的描述符，必须在原型对象上调用 Object.getOwnPropertyDescriptor() 方法</li>
<li><code>Object.keys(obj)</code>：得到对象上的所有可枚举的实例属性</li>
<li><code>Object.getOwnPropertyNames(obj)</code>：得到对象上的所有实例属性，无论是否可枚举</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">设计模式</title>
    <id>https://codemake.fun/fe/javascript/knowledge/14.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/14.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
    <updated>2023-03-01T09:26:45.000Z</updated>
    <summary type="text">设计原则 引言设计：按照一种思路或者标准来实现功能; 功能相同，可以有不同的设计方案来实现; 伴随着需求增加，设计的作用才能体现出来; 《UNIX/LINUX 设计哲学》准则准则 1：小即是美; 准则 2：让每个程序只做好一件事; 准则 3：快速建立原型; 准则 4：舍弃高效率而取可移植性; 准则 5：采用纯文本来存储数据; 准则 6...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 设计原则</h2>
<h3> 引言</h3>
<ul>
<li>设计：按照一种思路或者标准来实现功能</li>
<li>功能相同，可以有不同的设计方案来实现</li>
<li>伴随着需求增加，设计的作用才能体现出来</li>
</ul>
<h3> 《UNIX/LINUX 设计哲学》准则</h3>
<ul>
<li>准则 1：小即是美</li>
<li>准则 2：让每个程序只做好一件事</li>
<li>准则 3：快速建立原型</li>
<li>准则 4：舍弃高效率而取可移植性</li>
<li>准则 5：采用纯文本来存储数据</li>
<li>准则 6：充分利用软件的杠杆效应（软件复用）</li>
<li>准则 7：使用 shell 脚本来提高杠杆效应和可以执行</li>
<li>准则 8：避免强制性的用户界面</li>
<li>准则 9：让每个程序都成为过滤器
<ul>
<li><code>ls | grep *.json</code></li>
</ul>
</li>
<li>小准则
<ul>
<li>允许用户定制环境</li>
<li>尽量使操作系统内核小而轻量化</li>
<li>使用小写字母并尽量简短</li>
<li>沉默是金</li>
<li>寻求 90% 的解决方案</li>
</ul>
</li>
</ul>
<h3> 五大设计原则</h3>
<h4> 单一职责原则（ S ）</h4>
<ul>
<li>一个程序只做好一件事</li>
<li>如果功能过于复杂就拆分开，每个部分保持独立</li>
</ul>
<h4> 开放封闭原则（ O ）</h4>
<ul>
<li>对扩展开放，对修改封闭</li>
<li>增加需求时，扩展新代码，而非修改已有代码</li>
</ul>
<h4> 里式置换原则（ L ）</h4>
<ul>
<li>子类能覆盖父类</li>
<li>父类能出现的地方，子类就能出现</li>
<li>JS 中使用较少（ 弱类型 &amp; 继承使用较少 ）</li>
</ul>
<h4> 接口独立原则（ I ）</h4>
<ul>
<li>保持接口的单一独立，避免出现"胖接口"</li>
<li>JS 中没有接口（ typescript 除外 ），使用较少</li>
<li>类似于单一职责原则，这里更关注接口</li>
</ul>
<h4> 依赖倒置原则（ D ）</h4>
<ul>
<li>面向接口编程，依赖于抽象而不依赖于具体</li>
<li>使用方只关注接口而不关注具体类的实现</li>
<li>JS 中使用较少（ 没有接口 &amp; 弱类型 ）</li>
</ul>
<h2> 设计模式</h2>
<h3> 创建型</h3>
<blockquote>
<p>关注 <strong>如何创建对象</strong>，主要特点是将对象的创建和使用分离。一般抽象了对象实例化的过程，用来帮助创建对象的实例</p>
</blockquote>
<h4> 单例模式</h4>
<blockquote>
<p>保证一个类只有一个实例，并提供一个访问它的全局访问点</p>
</blockquote>
<h4> 工厂模式</h4>
<blockquote>
<p>根据输入的不同返回不同类的实例，一般用来创建同一类对象</p>
</blockquote>
<h4> 抽象工厂模式</h4>
<blockquote>
<p>通过对类的工厂抽象，使其业务用于对产品类簇的创建</p>
</blockquote>
<h4> 建造者模式</h4>
<blockquote>
<p>分步构建一个复杂对象，使得同样的构建过程可以采用不同的表示</p>
</blockquote>
<h3> 结构型模式</h3>
<blockquote>
<p>关注如何 <strong>将对象按某种布局组成更大的结构</strong></p>
</blockquote>
<h4> 代理模式</h4>
<blockquote>
<p>为目标对象创造一个代理对象，以控制对目标对象的访问</p>
</blockquote>
<h4> 享元模式</h4>
<blockquote>
<p>运用共享技术来有效地支持大量细粒度对象的复用，减少创建的对象的数量</p>
</blockquote>
<h4> 适配器模式</h4>
<blockquote>
<p>解决两个软件实体间接口不兼容的问题</p>
</blockquote>
<h4> 装饰者模式</h4>
<blockquote>
<p>向一个现有的对象添加新的功能，同时又不改变其结构</p>
</blockquote>
<h4> </h4>
<h4> 外观模式</h4>
<blockquote>
<p>为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</p>
</blockquote>
<h4> 组合模式</h4>
<blockquote>
<p>用小的子对象构建更大的对象，使得对单个对象和组合对象具有一致的访问性</p>
</blockquote>
<h4> 桥接模式</h4>
<blockquote>
<p>将类的抽象部分与实现部分分离，使它们可以独立地变化</p>
</blockquote>
<h4> </h4>
<h3> 行为型模式</h3>
<blockquote>
<p>行为型模式关注<strong>对象之间的通信</strong>，描述对象之间怎样相互协作，以及怎样分配职责</p>
</blockquote>
<h4> 发布 - 订阅模式</h4>
<blockquote>
<p>多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</p>
</blockquote>
<h4> 策略模式</h4>
<blockquote>
<p>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换</p>
</blockquote>
<h4> 状态模式</h4>
<blockquote>
<p>允许一个对象在其内部状态发生改变时改变其行为能力</p>
</blockquote>
<h4> 模板方法模式</h4>
<blockquote>
<p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</p>
</blockquote>
<h4> 迭代器模式</h4>
<blockquote>
<p>提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示</p>
</blockquote>
<h4> 命令模式</h4>
<blockquote>
<p>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开</p>
</blockquote>
<h4> 职责链模式</h4>
<blockquote>
<p>把请求从链中的一个对象传到下一个对象，直到请求被响应为止</p>
</blockquote>
<h4> 中介者模式</h4>
<blockquote>
<p>定义一个中介对象来简化原有对象之间的复杂耦合关系</p>
</blockquote>
<h4> 备忘录模式</h4>
<h4> 访问者模式</h4>
<h4> 解释器模式</h4>
<h4> 观察者模式</h4>
<h3> 其他模式</h3>
<ul>
<li><code>MVC</code>、<code>MVP</code>、<code>MVVM</code>： 用于系统分层，降低层间耦合</li>
<li>模块模式： 将内部的属性和方法隐藏，仅暴露需要暴露的部分</li>
<li>链模式： 通过在对象方法中将当前对象返回，实现对同一个对象的多个方法的链式调用</li>
<li>中间件： 处于操作系统和应用程序之间的软件，来完成对任何数据的预处理和后处理</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">常见考点</title>
    <id>https://codemake.fun/fe/javascript/knowledge/15.%E5%B8%B8%E8%A7%81%E8%80%83%E7%82%B9.html</id>
    <link href="https://codemake.fun/fe/javascript/knowledge/15.%E5%B8%B8%E8%A7%81%E8%80%83%E7%82%B9.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">问题考点 typeof 能判断哪些类型考点：JS 变量类型; 返回判断：; 所有值类型; 函数; 引用类型（不可细分）; 何时使用 === 何时使用 ==考点：强制类型装换; 使用：除了 == null 之外，其他一律用 ===; ```javascript if (obj.a == null) { } // 相当于 // if( obj...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 问题考点</h2>
<h3> typeof 能判断哪些类型</h3>
<ul>
<li>考点：JS 变量类型</li>
<li>返回判断：
<ul>
<li>所有值类型</li>
<li>函数</li>
<li>引用类型（不可细分）</li>
</ul>
</li>
</ul>
<h3> 何时使用 === 何时使用 ==</h3>
<ul>
<li>考点：强制类型装换</li>
<li>使用：除了 <code>== null</code> 之外，其他一律用 <code>===</code></li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> window.onload 和 DOMContentLoaded 的区别</h3>
<ul>
<li>考点：页面渲染过程</li>
</ul>
<h3> JS 创建 10 个 a 标签，点击时候弹出对应的序号</h3>
<ul>
<li>考点：JS 作用域</li>
</ul>
<h3> 手写节流 throttle 、防抖 debounce</h3>
<ul>
<li>考点：性能、体验优化</li>
</ul>
<h3> Promise 解决了什么问题</h3>
<ul>
<li>考点：JS 异步</li>
</ul>
<h2> 知识体系</h2>
<h3> 基础语法</h3>
<h4> 变量类型和计算</h4>
<h3> JS-Web-API</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原型关系</h3>
<ul>
<li>每个 class 都有显式原型 prototype</li>
<li>每个实例都有隐式原型 <strong>proto</strong></li>
<li>实例的隐式原型指向对应 class 的 prototype</li>
<li>每个 class 的显式原型的隐式原型指向其父类的隐式原型</li>
<li>Object 的隐式原型指向 null</li>
<li>instanceof：沿着隐式原型往上找到对应的显式原型</li>
</ul>
<h3> class 本质</h3>
<ul>
<li>原型和原型链的图示</li>
<li>属性和方法的执行规则</li>
</ul>
<p>![](<a href="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/iShot2021-11-07" target="_blank" rel="noopener noreferrer">https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/iShot2021-11-07</a> 20.21.38.png)</p>
<h3> 闭包</h3>
<h4> 作用域应用的特殊情况</h4>
<ul>
<li>函数作为参数被传递</li>
<li>函数作为返回值被返回</li>
</ul>
<h4> 应用</h4>
<p>隐藏数据</p>
<p><strong>自由变量的查找，是在函数定义的地方，向上级作用于查找，不是在执行的地方！！！</strong></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> this</h3>
<h4> 调用场景</h4>
<ul>
<li>作为普通函数</li>
<li>使用 call apply bind</li>
<li>作为对象方法被调用</li>
<li>class 方法中被调用</li>
<li>箭头函数</li>
</ul>
<p>*<em>this 取值是在函数执行时被确定的，不是在函数定义时确定的！！！</em></p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 作业</h2>
<ul>
<li>研究 call bind apply</li>
<li>手写 call bind apply</li>
<li>闭包隐藏数据</li>
<li></li>
</ul>
<h2> 运行环境</h2>
<h3> 加载过程</h3>
<ul>
<li>DNS 解析：域名 -&gt; IP 地址</li>
<li>浏览器根据 IP 地址向服务器发起 http 请求（三次握手等等）</li>
<li>服务器处理 http 请求，并返回给浏览器</li>
</ul>
<h3> 渲染过程</h3>
<ul>
<li>根据 HTML 生成 DOM Tree</li>
<li>根据 CSS 生成 CSSOM</li>
<li>将 DOM Tree 和 CSSOM 整合形成 Render Tree</li>
<li>遇到 <code>&lt;script&gt;</code> 则暂停渲染，优先加载并执行 JS 代码，完成再继续</li>
<li>直至 Render Tree 渲染完成</li>
</ul>
<h3> 性能优化</h3>
<ul>
<li>空间换时间（适用于所有变成的性能优化）
<ul>
<li>多使用内存、缓存或其他方法</li>
<li>减少 CPU 计算量，介绍网络加载耗时</li>
</ul>
</li>
<li>从何入手
<ul>
<li>让加载更快
<ul>
<li>减少资源体积，压缩代码</li>
<li>减少访问次数：合并代码，SSR 服务器端渲染</li>
<li>缓存
<ul>
<li>静态资源加 hash 后缀，根据文件内容计算 hash</li>
<li>文件内容不变，则 hash 不变，则 url 不变</li>
<li>url 和 文件不变，则会自动触发 http 缓存机制，返回 304</li>
</ul>
</li>
</ul>
</li>
<li>让渲染更快
<ul>
<li>CSS 放在 head，JS 放在 body 最下面</li>
<li>尽早开始执行 JS，用 DOMContentLoaded 触发</li>
<li>懒加载（ 图片懒加载，上滑加载更多 ）</li>
<li>对 DOM 查询进行缓存</li>
<li>频繁 DOM 操作，合并到一起插入 DOM 结构 （ createDocumentFragment ）</li>
</ul>
</li>
<li>让渲染更加流程
<ul>
<li>节流 throttle</li>
<li>防抖 debounce</li>
</ul>
</li>
<li>使用更快的网络：CDN</li>
</ul>
</li>
</ul>
<h4> 防抖 debounce</h4>
<h5> 场景</h5>
<ul>
<li>监听输入框文字变化后触发 change 事件</li>
<li>直接用 keyup 事件，则会频繁触发 change 事件</li>
<li>防抖：用户结束或暂停时，才会触发 change 事件</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 节流 throttle</h4>
<h5> 场景</h5>
<ul>
<li>拖拽一个元素时，要随时拿到该元素被拖拽的位置</li>
<li>直接用 drag 事件，则会频繁触发，很容易导致卡顿</li>
<li>节流：无论拖拽速度多快，都会每个 100ms 触发一次</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 安全</h3>
<h4> 常见的 web 前端攻击方式</h4>
<h5> XSS 跨站请求攻击</h5>
<h5> 攻击方式</h5>
<ul>
<li>一个博客网站，我发表一篇博客，其中嵌入 <code>&lt;script&gt;</code> 脚本</li>
<li>脚本内容：获取 cookie，发送到我的服务器（ 服务器配合跨域 ）</li>
<li>发布之篇博客，有人查看它，轻松收割访问者 cookie</li>
</ul>
<h5> 预防</h5>
<ul>
<li>替换特殊字符，如 <code>&lt;</code> 变为 <code>&amp;lt;</code>， <code>&gt;</code> 变为 <code>&amp;gt;</code></li>
<li><code>&lt;script&gt;</code> 变为 <code> &amp;lt;script&amp;gt;</code>，直接显示，而不会作为脚本执行</li>
<li>前端要替换，后端也要替换，都做总不会有错</li>
</ul>
<h5> 工具</h5>
<ul>
<li><a href="https://github.com/leizongmin/js-xss/blob/master/README.zh.md" target="_blank" rel="noopener noreferrer">根据白名单过滤 HTML(防止 XSS 攻击)</a></li>
</ul>
<h5> XSRF 跨站请求伪造</h5>
<h5> 攻击方式</h5>
<ul>
<li>你正在购物，看中了某个商品，商品 id 是 100</li>
<li>付费接口是 <a href="http://xxx.com/pay?id=100%EF%BC%8C%E4%BD%86%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E9%AA%8C%E8%AF%81" target="_blank" rel="noopener noreferrer">xxx.com/pay?id=100，但没有任何验证</a></li>
<li>我是攻击者，我看中了一个商品，id 是 200</li>
<li>我向你发送一封电子邮件，邮件标题很吸引人</li>
<li>但邮件正文隐藏着 &lt;img <a href="http://src=xxx.com/pay?id=200" target="_blank" rel="noopener noreferrer">src=xxx.com/pay?id=200</a> /&gt;</li>
<li>你已查看右键，就帮我购买了 id 是 200 的商品</li>
</ul>
<h5> 预防</h5>
<ul>
<li>使用 POST 接口</li>
<li>增加验证，例如密码、短信验证码、指纹等</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">常用代码</title>
    <id>https://codemake.fun/fe/css/tricks/01.%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81.html</id>
    <link href="https://codemake.fun/fe/css/tricks/01.%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">多行文本超出省略号 ```css display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 2; overflow: hidden; text-overflow: ellipsis; ``` 底部阴影 ```css .box:before { content: &amp;quot;&amp;quot;;...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 多行文本超出省略号</h2>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 底部阴影</h2>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 页面变灰色</h2>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">水平垂直居中的几种方式</title>
    <id>https://codemake.fun/fe/css/tricks/02.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</id>
    <link href="https://codemake.fun/fe/css/tricks/02.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">See the Pen 水平垂直居中的几种方式 by xugaoyi (@xugaoyi) on CodePen. ```html 水平居中 行内，text-align: center; 块元素 （定宽度） margin: 0 auto 块元素（不定宽度） 块元素 flex实现 （定不定宽度可以） 垂直居中 单行的行内元素，设置行高 多行的行内元素，多...</summary>
    <content type="html"><![CDATA[<!-- more -->
<iframe height="880" style="width: 100%;" scrolling="no" title="水平垂直居中的几种方式" src="https://codepen.io/xugaoyi/embed/poJLeYv?height=880&amp;theme-id=light&amp;default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/xugaoyi/pen/poJLeYv'>水平垂直居中的几种方式</a> by xugaoyi
  (<a href='https://codepen.io/xugaoyi'>@xugaoyi</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">根据系统主题自动响应CSS深色模式</title>
    <id>https://codemake.fun/fe/css/tricks/03.%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94CSS%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F.html</id>
    <link href="https://codemake.fun/fe/css/tricks/03.%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94CSS%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。 CSS 深色模式 (Dark Mode) 在:root根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下: ```cs...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。</p>
</blockquote>
<!-- more -->
<h2> CSS 深色模式 (Dark Mode)</h2>
<p>在<code>:root</code>根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><strong><code>:root</code></strong> 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，<strong><code>:root</code></strong> 表示 <code>&lt;html&gt;</code>元素，除了优先级更高之外，与 <code>html</code> 选择器相同。</p>
</blockquote>
<p>如果希望在样式表中使用这些变量，可以这样做</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。</p>
<p>现在我们需要定义一组新的变量，这些变量将在调用CSS深色模式时使用。对我来说，深色模式的变量是这样的:</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 添加深色模式自动响应</h2>
<p>现在我们定义了两组变量。剩下要做的一件事就是将<code>prefers-color-scheme</code>媒体查询添加到我们的深色模式变量中。</p>
<p>使用您的深色模式变量并在外层添加<code>@media</code>查询</p>
<div class="language-css line-numbers-mode" data-ext="css"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme" target="_blank" rel="noopener noreferrer"><code>prefers-color-scheme</code>文档</a></p>
</blockquote>
<p>这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。</p>
<blockquote>
<p>如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。</p>
</blockquote>
<h2> JS判断深色模式</h2>
<p>如果你的需求需要js来判断系统是否处于深色模式，可以这样做：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia" target="_blank" rel="noopener noreferrer"><code>matchMedia</code></a>方法返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList" target="_blank" rel="noopener noreferrer"><code>MediaQueryList</code></a>对象，该对象具有属性<code>matches</code>、<code>media</code>，具有方法<code>addListener</code>、<code>removeListener</code>。</p>
</blockquote>
<p><code>addListener</code>接收一个<code>MediaQueryList</code>对象作为参数。
为深色模式添加监听器，以响应系统切换到或切换出深色模式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 结论</h2>
<p>我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。</p>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="CSS"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Qs</title>
    <id>https://codemake.fun/fe/javascript/plugins/01.Qs.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/01.Qs.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">一个 url 参数转化 ( parse 和 stringify ) 的轻量级 JavaScript 库 GitHub (https://github.com/ljharb/qs) 引入 直接引入 ```html var qs = Qs ``` 导入包 ```javascript var qs = require(&amp;apos;qs&amp;apos;) import qs fro...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>一个 url 参数转化 ( parse 和 stringify ) 的轻量级 JavaScript 库</p>
<p><a href="https://github.com/ljharb/qs" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> 引入</h2>
<h3> 直接引入</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 导入包</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 简单使用</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Lodash</title>
    <id>https://codemake.fun/fe/javascript/plugins/02.Lodash.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/02.Lodash.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">一个一致性、模块化、高性能的 JavaScript 实用工具库 GitHub (https://github.com/lodash/lodash) 中文文档 (https://www.lodashjs.com/)</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>一个一致性、模块化、高性能的 JavaScript 实用工具库</p>
<p><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://www.lodashjs.com/" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Day</title>
    <id>https://codemake.fun/fe/javascript/plugins/03.Day.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/03.Day.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">一个轻量的处理时间和日期的 JavaScript 库 GitHub (https://github.com/iamkun/dayjs/blob/dev/docs/zh-cn/README.zh-CN.md) 中文文档 (https://dayjs.gitee.io/docs/zh-CN/installation/installation)</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>一个轻量的处理时间和日期的 JavaScript 库</p>
<p><a href="https://github.com/iamkun/dayjs/blob/dev/docs/zh-cn/README.zh-CN.md" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://dayjs.gitee.io/docs/zh-CN/installation/installation" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Big</title>
    <id>https://codemake.fun/fe/javascript/plugins/04.Big.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/04.Big.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">一个用于任意精度十进制算术的小型快速 JavaScript 库 GitHub (https://github.com/MikeMcl/big.js) 官方文档 (https://mikemcl.github.io/big.js/)</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>一个用于任意精度十进制算术的小型快速 JavaScript 库</p>
<p><a href="https://github.com/MikeMcl/big.js" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://mikemcl.github.io/big.js/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">FileSaver</title>
    <id>https://codemake.fun/fe/javascript/plugins/05.FileSaver.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/05.FileSaver.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">一款基于 HTML5 完成文件保存的插件 GitHub (https://github.com/eligrey/FileSaver.js)</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>一款基于 HTML5 完成文件保存的插件</p>
<p><a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">KeyboardJS</title>
    <id>https://codemake.fun/fe/javascript/plugins/06.KeyboardJS.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/06.KeyboardJS.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">一个设置键绑定和使用组合键来设置复杂的绑定 JavaScript 库 GitHub (https://github.com/RobertWHurst/KeyboardJS)</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>一个设置键绑定和使用组合键来设置复杂的绑定 JavaScript 库</p>
<p><a href="https://github.com/RobertWHurst/KeyboardJS" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Sortable</title>
    <id>https://codemake.fun/fe/javascript/plugins/07.Sortable.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/07.Sortable.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">一款功能强大的 JavaScript 拖拽库 GitHub (https://github.com/SortableJS/Sortable)</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>一款功能强大的 JavaScript 拖拽库</p>
<p><a href="https://github.com/SortableJS/Sortable" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Animation</title>
    <id>https://codemake.fun/fe/javascript/plugins/08.Animation.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/08.Animation.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">Anime 一个 JavaScript 动画库，可以处理 CSS 属性，单个 CSS 转换，SVG 或任何 DOM 属性以及 JavaScript 对象 GitHub (https://github.com/juliangarnier/anime) Velocity 一个高效的 Javascript 动画引擎，与 jQuery 的 $.anima...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Anime</h2>
<blockquote>
<p>一个 JavaScript 动画库，可以处理 CSS 属性，单个 CSS 转换，SVG 或任何 DOM 属性以及 JavaScript 对象</p>
<p><a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> Velocity</h2>
<blockquote>
<p>一个高效的 Javascript 动画引擎，与 jQuery 的 $.animate() 有相同的 API, 同时还支持彩色动画、转换、循环、画架、SVG 支持和滚动等效果</p>
<p><a href="https://github.com/julianshapiro/velocity" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> Vivus</h2>
<blockquote>
<p>一个零依赖的 JavaScript 动画库，使用用 SVG 制作动画，使其具有被绘制的外观</p>
<p><a href="https://github.com/maxwellito/vivus" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> GreenSock</h2>
<blockquote>
<p>一个 JavaScript 动画库，用于创建高性能、零依赖、跨浏览器动画，已在超过 400 万个网站上使用, 并且可以在 React、Vue、Angular 项目中使用</p>
<p><a href="https://github.com/greensock/GSAP" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> Kute.js</h2>
<blockquote>
<p>一个强大高性能且可扩展的原生 JavaScript 动画引擎，具有跨浏览器动画的基本功能</p>
<p><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://github.com/iiunknown/iscroll5.doc.cn" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">图像相关</title>
    <id>https://codemake.fun/fe/javascript/plugins/09.%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/09.%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">html2canvas 一个将网页 HTML 截图为图片的 JavaScript 插件 GitHub (https://github.com/niklasvh/html2canvas) dom-to-image 一个可以将任意 DOM 节点转换为用 JavaScript 编写的矢量（SVG）或光栅（PNG 或 JPEG）图像的库 GitHub ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> html2canvas</h2>
<blockquote>
<p>一个将网页 HTML 截图为图片的 JavaScript 插件</p>
<p><a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> dom-to-image</h2>
<blockquote>
<p>一个可以将任意 DOM 节点转换为用 JavaScript 编写的矢量（SVG）或光栅（PNG 或 JPEG）图像的库</p>
<p><a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> pica</h2>
<blockquote>
<p>一个在浏览器中调整图像大小，而不会出现像素失真，处理速度非常快的图片处理库</p>
<p><a href="https://github.com/nodeca/pica" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> Fabric</h2>
<blockquote>
<p>一个易于使用的基于 HTML5 canvas 元素的图片编辑器</p>
<p><a href="https://github.com/fabricjs/fabric.js" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> cropperjs</h2>
<blockquote>
<p>一款强大的图片裁切库, 支持灵活的图片裁切方式</p>
<p><a href="https://github.com/fengyuanchen/cropperjs" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> Grade</h2>
<blockquote>
<p>一个基于图像中的前 2 种主要颜色生成互补渐变背景的库</p>
<p><a href="https://github.com/benhowdle89/grade" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Scroll</title>
    <id>https://codemake.fun/fe/javascript/plugins/10.Scroll.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/10.Scroll.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">fullPage.js 一个可轻易创建全屏滚动网站的 js 滚动动画库, 兼容性无可替代 GitHub (https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs) Iscroll 一个移动端使用的轻量级滚动插件 GitHub (https://...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> fullPage.js</h2>
<blockquote>
<p>一个可轻易创建全屏滚动网站的 js 滚动动画库, 兼容性无可替代</p>
<p><a href="https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> Iscroll</h2>
<blockquote>
<p>一个移动端使用的轻量级滚动插件</p>
<p><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://iiunknown.gitbooks.io/iscroll-5-api-cn/content/" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
<h2> WOW</h2>
<blockquote>
<p>一个页面向下滚动时触发动画的 JavaScript 库</p>
<p><a href="https://github.com/matthieua/WOW" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2> Scroll Reveal</h2>
<blockquote>
<p>一个页面（向上火向下）滚动时触发动画的 JavaScript 库</p>
<p><a href="https://github.com/jlmakes/scrollreveal" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">Effect</title>
    <id>https://codemake.fun/fe/javascript/plugins/11.Effect.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/11.Effect.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">Typed.js 一个轻松实现打字效果的 js 插件 GitHub (https://github.com/mattboldt/typed.js/) 官方文档 (http://mattboldt.github.io/typed.js/docs/)</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Typed.js</h2>
<blockquote>
<p>一个轻松实现打字效果的 js 插件</p>
<p><a href="https://github.com/mattboldt/typed.js/" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="http://mattboldt.github.io/typed.js/docs/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</blockquote>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">PDF预览</title>
    <id>https://codemake.fun/fe/javascript/plugins/12.PDF%E9%A2%84%E8%A7%88.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/12.PDF%E9%A2%84%E8%A7%88.html"/>
    <updated>2023-02-24T09:07:04.000Z</updated>
    <summary type="text">PDF预览插件 【GitHub】 (https://github.com/mozilla/pdf.js) 【官方文档】 (https://mozilla.github.io/pdf.js/getting_started/) 下载安装 使用方式 1. 在官方文档中下载预建版本 2. 将文件复制到项目文件夹 直接使用(预览全部)直接访问：http://...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>PDF预览插件</p>
<p><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="noopener noreferrer">【GitHub】</a> <a href="https://mozilla.github.io/pdf.js/getting_started/" target="_blank" rel="noopener noreferrer">【官方文档】</a></p>
</blockquote>
<h2> 下载安装</h2>
<h2> 使用方式</h2>
<ol>
<li>在官方文档中下载预建版本</li>
</ol>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20220826165319373.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>
<p>将文件复制到项目文件夹</p>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20220826165437871.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
</ol>
<h3> 直接使用(预览全部)</h3>
<ul>
<li>直接访问：<code>http://localhost/web/viewer.html?file=pdf_url</code></li>
</ul>
<h3> 自定义显示方式</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">动画相关</title>
    <id>https://codemake.fun/fe/javascript/plugins/13.%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3.html</id>
    <link href="https://codemake.fun/fe/javascript/plugins/13.%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">Lottie 本文文档出处：【lottie 动画】 (https://www.cnblogs.com/yf-html/p/15406174.html)lottie-web 一个适用于 Web，Android，iOS，React Native 和 Windows 的移动库可以使用 Bodymovin 解析以 JSON 格式导出的 Adobe After...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Lottie</h2>
<blockquote>
<p>本文文档出处：<a href="https://www.cnblogs.com/yf-html/p/15406174.html" target="_blank" rel="noopener noreferrer">【lottie 动画】</a><br>lottie-web 一个适用于 Web，Android，iOS，React Native 和 Windows 的移动库<br>可以使用 <code>Bodymovin</code> 解析以 <code>JSON</code> 格式导出的 Adobe After Effects 动画，并在本地进行渲染<br><a href="http://airbnb.io/lottie/#/web" target="_blank" rel="noopener noreferrer">【官方文档】</a> <a href="https://github.com/airbnb/lottie" target="_blank" rel="noopener noreferrer">【GitHub】</a></p>
</blockquote>
<h3> 安装</h3>
<blockquote>
<p>通过一个叫 Bodymovin 的开源 After Effects 插件，以 JSON 文件的形式进行输出，Lottie 通过 JSON 格式下载动画数据并实时提供给开发者</p>
</blockquote>
<ul>
<li><code>bodymovin</code> 插件下载安装</li>
<li>安装并解压 <code>bodymovin</code></li>
<li>打开 AE，添加 <code>bodymovin</code> 扩展</li>
<li>导出 <code>data.json</code> 文件，动画的数据文件 详细可参考：<a href="https://wenku.baidu.com/view/af9328ddbbf67c1cfad6195f312b3169a451eafc.html" target="_blank" rel="noopener noreferrer">【AE 插件 Bodymovin.zxp 的安装与使用】</a></li>
</ul>
<h3> 使用</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 优点</h3>
<ul>
<li>动画由设计使用专业的动画制作工具Adobe After Effects来实现，使动画实现更加方便，动画效果也更好</li>
<li>前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量</li>
<li>设计制作动画，前端展现动画，专业人做专业事，分工合理</li>
<li>卖家秀即买家秀，还原程度百分之百</li>
<li>使用lottie方案，json文件大小会比gif文件小很多，性能也会更好</li>
</ul>
<h3> 缺点</h3>
<ul>
<li>lottie-web 文件本身仍然比较大，lottie.js 大小为 513k，轻量版压缩后也有 144k，经过 gzip 后，大小为 39k。所以，需要注意 lottie-web的 加载。目前 H5 项目有离线包，PC 项目也会上 PWA，会对其进行缓存，保证加载速度</li>
<li>lottie 动画其实可以理解为 svg动画/canvas动画，不能给已存在的 html 添加动画效果</li>
<li>动画 json文 件的导出，目前是将AE里面的参数一一导出成 json 内容，如果设计师建了很多的图层，可能仍然有json文件比较大（20kb）的问题。需要设计师遵循一定的规范</li>
<li>有很少量的AE动画效果，lottie无法实现，有些是因为性能问题，有些是没有做。比如：描边动画等</li>
</ul>
]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="plugins"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">无法使用 JSX，除非提供了 --jsx 标志</title>
    <id>https://codemake.fun/fe/javascript/question/01.%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%20JSX%EF%BC%8C%E9%99%A4%E9%9D%9E%E6%8F%90%E4%BE%9B%E4%BA%86%20--jsx%20%E6%A0%87%E5%BF%97.html</id>
    <link href="https://codemake.fun/fe/javascript/question/01.%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%20JSX%EF%BC%8C%E9%99%A4%E9%9D%9E%E6%8F%90%E4%BE%9B%E4%BA%86%20--jsx%20%E6%A0%87%E5%BF%97.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">```js // jsconfig.json 中加入下面属性，重启编辑器 &amp;quot;jsx&amp;quot;: &amp;quot;preserve&amp;quot; ```</summary>
    <content type="html"><![CDATA[<!-- more -->
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">判断是否为移动端浏览器</title>
    <id>https://codemake.fun/fe/javascript/tricks/01.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8.html</id>
    <link href="https://codemake.fun/fe/javascript/tricks/01.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">```js const flag = navigator.userAgent.match( /(phonepadpodiPhoneiPodiosiPadAndroidMobileBlackBerryIEMobileMQQBrowserJUCFennecwOSBrowserBrowserNGWebOSSymbianWindows Phone)/i ) i...</summary>
    <content type="html"><![CDATA[<!-- more -->
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
  <entry>
    <title type="text">网页全屏显示</title>
    <id>https://codemake.fun/fe/javascript/tricks/02.%E7%BD%91%E9%A1%B5%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA.html</id>
    <link href="https://codemake.fun/fe/javascript/tricks/02.%E7%BD%91%E9%A1%B5%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA.html"/>
    <updated>2023-01-11T09:12:15.000Z</updated>
    <summary type="text">注意， 标签全屏时需要在标签中添加 allowfullscreen 属性 ```javascript // 全屏 function handleFullScreen() { var de = document.documentElement if (de.requestFullscreen) { de.requestFullscreen() } els...</summary>
    <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>注意，<code>&lt;iframe&gt;</code> 标签全屏时需要在标签中添加 <code>allowfullscreen</code> 属性</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </author>
    <category term="JavaScript"/>
    <contributor>
      <name>Yang</name>
      <email>874530670@qq.com</email>
      <uri>https://codemake.fun/</uri>
    </contributor>
    <published>2023-01-11T09:12:15.000Z</published>
    <rights>Copyright by Yang</rights>
  </entry>
</feed>