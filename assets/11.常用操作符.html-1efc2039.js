import{_ as a,Q as n,S as l,$ as i,a3 as t}from"./framework-3ab2aaf6.js";const e={},s=t(`<h2 id="常用操作符" tabindex="-1"><a class="header-anchor" href="#常用操作符" aria-hidden="true">#</a> 常用操作符</h2><h3 id="一元操作符" tabindex="-1"><a class="header-anchor" href="#一元操作符" aria-hidden="true">#</a> 一元操作符</h3><h4 id="递增操作符" tabindex="-1"><a class="header-anchor" href="#递增操作符" aria-hidden="true">#</a> 递增操作符</h4><ul><li>前置型 ++i</li><li>后置型 i++</li></ul><h4 id="递减操作符" tabindex="-1"><a class="header-anchor" href="#递减操作符" aria-hidden="true">#</a> 递减操作符</h4><ul><li>前置型 --i</li><li>后置型 i--</li></ul><h4 id="递增递减操作规则" tabindex="-1"><a class="header-anchor" href="#递增递减操作规则" aria-hidden="true">#</a> 递增递减操作规则</h4><ul><li>在应用于一个包含有效数字字符的字符串时，现将其转化为十进制数字值，在执行加减 1 的操作，字符串变量变成数值变量</li><li>在应用于一个不包含有效数字字符的字符串时，将变量设置为 NaN，字符串变量变成数值变量</li><li>在应用于布尔值 false 时，现将其转化为 0 再执行加减 1 的操作，布尔值转化为数值变量</li><li>在应用于布尔值 true 时，现将其转化为 1 再执行加减 1 的操作，布尔值转化为数值变量</li><li>在应用于浮点数值时，执行加减 1 的操作</li><li>在应用于对象时，先调用对象的 valueOf()以取得一个可供操作的值。然后对该值应用前述规则 。如果结果我是 NaN，则在调用 toString()方法后在应用前述规则。如果结局仍是 NaN，则在调用 toString()方法后再应用前述规则。对象变量变成数值变量</li></ul><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><ul><li>前置型操作时，递增递减操作都是在包含他们的语句求值之前执行的</li><li>后置型操作时，递增递减操作都是在包含他们的语句求值之后执行的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> <span class="token operator">--</span>age <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 28</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;anotherAge&#39;</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 30</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> age<span class="token operator">--</span> <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 28</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;anotherAge&#39;</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 31</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> <span class="token operator">++</span>age <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 30</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;anotherAge&#39;</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 32</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> age<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 30</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;anotherAge&#39;</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 31</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔操作符" tabindex="-1"><a class="header-anchor" href="#布尔操作符" aria-hidden="true">#</a> 布尔操作符</h3><ul><li>一共有 3 个 <ul><li>非（ ! ）</li><li>与（ &amp;&amp; ）</li><li>或（ || ）</li></ul></li></ul><h4 id="逻辑非" tabindex="-1"><a class="header-anchor" href="#逻辑非" aria-hidden="true">#</a> 逻辑非（ ! ）</h4><ul><li>无论这个值是什么数据类型，这个操作符都会返回一个布尔值</li><li>首先将它的操作数转换为一个布尔值，而后对其求反</li><li>两个逻辑非操作符可以得到这个值对应的布尔值</li></ul><h5 id="逻辑非操作符返回规则" tabindex="-1"><a class="header-anchor" href="#逻辑非操作符返回规则" aria-hidden="true">#</a> 逻辑非操作符返回规则</h5><table><thead><tr><th>操作数</th><th>操作符返回值</th></tr></thead><tbody><tr><td>对象</td><td>false</td></tr><tr><td>空字符串</td><td>true</td></tr><tr><td>非空字符串</td><td>false</td></tr><tr><td>数值 0</td><td>true</td></tr><tr><td>任意非 0 数值（包括 Infinity）</td><td>false</td></tr><tr><td>null</td><td>true</td></tr><tr><td>NaN</td><td>true</td></tr><tr><td>undefined</td><td>true</td></tr></tbody></table><h4 id="逻辑与" tabindex="-1"><a class="header-anchor" href="#逻辑与" aria-hidden="true">#</a> 逻辑与（ &amp;&amp; ）</h4><ul><li>有两个或以上操作数</li><li>逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值</li><li>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值</li><li>该操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值 <ul><li>如果第一个操作数是 false ，则结果一定是 false</li></ul></li><li>与运算返回第一个假值，如果没有假值就返回最后一个值</li><li>与运算 &amp;&amp; 的优先级比或运算 || 要高。 #####逻辑与真值表 <table><thead><tr><th>第一个操作数</th><th>第二个操作数</th><th>结果</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>false</td></tr><tr><td>false</td><td>true</td><td>false</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table></li></ul><p>#####当有一个值不是布尔值的时候返回情况</p><ul><li>如果第一个数是对象，则返回第二个操作数</li><li>如果第二个操作数是对象，则只有在第一个操作数的求值结果为 true 的情况下才会返回该对象</li><li>如果两个操作数都是对象，则返回第二个操作数</li><li>如果有一个操作数是 null ，则返回 null</li><li>如果有一个操作数是 NaN ，则返回 NaN</li><li>如果有一个操作数是 undefined ，则返回 undefined</li></ul><h4 id="逻辑或" tabindex="-1"><a class="header-anchor" href="#逻辑或" aria-hidden="true">#</a> 逻辑或（ || ）</h4><ul><li>有两个或以上操作数</li><li>逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值</li><li>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值</li><li>该操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值</li><li>如果第一个操作数是 true，则结果一定是 true</li></ul><p>#####逻辑或真值表</p><table><thead><tr><th>第一个操作数</th><th>第二个操作数</th><th>结果</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>true</td></tr><tr><td>false</td><td>true</td><td>true</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>#####当有一个值不是布尔值的时候返回情况</p><ul><li>如果第一个数是对象，则返回第一个操作数</li><li>如果第一个操作数的求值结果为 false，则返回第二个操作数</li><li>如果两个操作数都是对象，则返回第一个操作数</li><li>如果两个操作数都是 null ，则返回 null</li><li>如果两个操作数都是 NaN ，则返回 NaN</li><li>如果两个操作数都是 undefined ，则返回 undefined -一个或运算 || 的链，将返回第一个真值，如果不存在真值，就返回该链的最后一个值</li></ul><h3 id="乘性操作符" tabindex="-1"><a class="header-anchor" href="#乘性操作符" aria-hidden="true">#</a> 乘性操作符</h3><ul><li>三种乘性操作符：乘法、除法、求模</li><li>操作数为非数值的情况下会执行自动的类型转换 <ul><li>先用 Number() 函数将其转换为数值 <ul><li>空字符串会被转换成 0</li><li>布尔值 true 会被转换成 1</li></ul></li></ul></li></ul><h4 id="乘法" tabindex="-1"><a class="header-anchor" href="#乘法" aria-hidden="true">#</a> 乘法</h4><ul><li>由一个星号（ * ）表示</li><li>用于表示两个数值的乘积</li></ul><h5 id="乘法规则" tabindex="-1"><a class="header-anchor" href="#乘法规则" aria-hidden="true">#</a> 乘法规则</h5><ul><li>如果操作数都是数值，执行常规的乘法计算 <ul><li>两个正数或者两个负数相乘的结果还是正数</li><li>如果只有一个操作数有符号，则结果为负数</li><li>如果乘积超过了 ECMAScript 数值的表示范围，则返回 Infinity 或 -Infinity</li></ul></li><li>如果有一个操作数是 NaN，则结果是 NaN</li><li>如果 Infinity 与 0 相乘，则结果是 NaN</li><li>如果 Infinity 与 非 0 数值相乘，则结果是 Infinity 或 -Infinity（取决于有符号操作数的符号）</li><li>如果是 Infinity 与 Infinity 相乘，则结果是 Infinity</li><li>如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则</li></ul><h4 id="除法" tabindex="-1"><a class="header-anchor" href="#除法" aria-hidden="true">#</a> 除法</h4><ul><li>由一个斜杠（ / ）表示</li><li>表示第一个操作数除以第二个操作数</li></ul><h5 id="除法规则" tabindex="-1"><a class="header-anchor" href="#除法规则" aria-hidden="true">#</a> 除法规则</h5><ul><li>如果操作数都是数值，执行常规的除法计算 <ul><li>两个正数或者两个负数相除的结果还是正数</li><li>如果只有一个操作数有符号，则结果为负数</li><li>如果乘积超过了 ECMAScript 数值的表示范围，则返回 Infinity 或 -Infinity</li></ul></li><li>如果有一个操作数是 NaN，则结果是 NaN</li><li>如果是 Infinity 被 Infinity 除，则结果是 NaN</li><li>如果 0 被 0 除，则结果是 NaN</li><li>如果是非零有限数被零除没则结果是 Infinity 或 -Infinity（取决于有符号操作数的符号）</li><li>如果是 Infinity 被任何非 0 数值除，则结果是 Infinity 或 -Infinity 取决于有符号操作数的符号）</li><li>如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则</li></ul><h4 id="求模" tabindex="-1"><a class="header-anchor" href="#求模" aria-hidden="true">#</a> 求模</h4><ul><li>由一个百分号（ % ）表示</li><li>返回两个数相除的余数</li></ul><h5 id="求模规则" tabindex="-1"><a class="header-anchor" href="#求模规则" aria-hidden="true">#</a> 求模规则</h5><ul><li>如果两个数都是数值，执行常规的除法计算，返回除得的余数</li><li>如果被除数是无穷大值而除数是有限大的数值，则结果是 NaN</li><li>如果被除数是有限大的数值，而除数是 0 ，则结果是 NaN</li><li>如果是 Infinity 被 inifinity 除，则结果是 NaN</li><li>如果被除数是有限大的数值，而除数是无穷大的数值，则结果是被除数</li><li>如果被除数是 0 ，则结果是 0</li><li>如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则</li></ul><h3 id="加性操作符" tabindex="-1"><a class="header-anchor" href="#加性操作符" aria-hidden="true">#</a> 加性操作符</h3><ul><li>加法（ + ）</li><li>减法（ - ）</li></ul><h4 id="加法规则" tabindex="-1"><a class="header-anchor" href="#加法规则" aria-hidden="true">#</a> 加法规则</h4><h5 id="两个操作数都是数值" tabindex="-1"><a class="header-anchor" href="#两个操作数都是数值" aria-hidden="true">#</a> 两个操作数都是数值</h5><ul><li>执行常规加法计算</li><li>如果有一个操作数是 NaN，则结果是 NaN</li><li>如果是 Infinity 加 Infinity ，则结果是 Infinity</li><li>如果是 -Infinity 加 -Infinity ，则结果是 -Infinity</li><li>如果是 Infinity 加 -Infinity ，则结果是 NaN</li><li>如果是 +0 加 +0 ，则结果是 +0</li><li>如果是 -0 加 -0 ，则结果是 -0</li><li>如果是 +0 加 -0 ，则结果是 +0</li></ul><h5 id="有一个操作数不是数值" tabindex="-1"><a class="header-anchor" href="#有一个操作数不是数值" aria-hidden="true">#</a> 有一个操作数不是数值</h5><ul><li>如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来</li><li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个操作数拼接起来</li><li>如果有一个操作数是对象、数值或布尔值，则调用他们的 toString() 方法取得相应的字符串值，再应用前面规则</li><li>对于 undefined 和 null ，则分别调用 String() 函数并取得字符串 “undefined” 和 ”null“</li></ul><h4 id="减法规则" tabindex="-1"><a class="header-anchor" href="#减法规则" aria-hidden="true">#</a> 减法规则</h4><h5 id="两个操作数都是数值-1" tabindex="-1"><a class="header-anchor" href="#两个操作数都是数值-1" aria-hidden="true">#</a> 两个操作数都是数值</h5><ul><li>执行常规减法计算</li><li>如果有一个操作数是 NaN ，则结果是 NaN</li><li>如果是 Infinity 减 Infinity，则结果是 NaN</li><li>如果是 -Infinity 减 -Infinity ，则结果是 NaN</li><li>如果是 Infinity 减 -Infinity ，则结果是 Infinity</li><li>如果是 -Infinity 减 Infinity，则结果是 -Infinity</li><li>如果是 +0 减 +0 ，则结果是 +0</li><li>如果是 +0 减 -0 ，则结果是 +0</li><li>如果是 -0 减 -0 ，则结果是 +0</li></ul><h5 id="有一个操作数不是数值-1" tabindex="-1"><a class="header-anchor" href="#有一个操作数不是数值-1" aria-hidden="true">#</a> 有一个操作数不是数值</h5><ul><li>如果有一个操作数是字符串、布尔值、null 或 undefined ，则先在后台调用 Number() 函数将其转换为数值，再根据前面的规则执行减法计算，如果转换的结果是 NaN，则计算的结果就是 NaN</li><li>如果有一个操作符是对象，则调用对象的 valueOf() 方法以取得表示该对象的数值，如果得到结果是 NaN，则计算的结果就是 NaN，如果对象没有 valueOf() 方法，则日澳用器 toString() 方法并将得到的字符串转换为数值</li></ul><h3 id="关系操作符" tabindex="-1"><a class="header-anchor" href="#关系操作符" aria-hidden="true">#</a> 关系操作符</h3><ul><li>四种</li><li>小于（ &lt; ）</li><li>大于（ &gt; ）</li><li>小于等于（ &lt;= ）</li><li>大于等于（ &gt;= ）</li><li>对两个值进行比较，返回布尔值</li></ul><h4 id="比较规则" tabindex="-1"><a class="header-anchor" href="#比较规则" aria-hidden="true">#</a> 比较规则</h4><ul><li>如果两个操作数都是数值，则执行数值比较</li><li>如果两个操作数都是字符串，则比较两个字符串对应的字符编码值（依次比较每个字符）</li><li>如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值的比较</li><li>如果一个操作数是对象，则调用这个对象的 valueOf() 方法，用得到的结果按照前面的规则进行比较 <ul><li>如果这个对象没有 valueOf() 方法，则调用 toString() 方法，并用得到的结果根据前面的规则执行比较</li></ul></li><li>如果一个操作数是布尔值，则先将其转换为数值，然后再进行比较</li><li>任何数与 NaN 进行比较时结果都是 false</li></ul><h3 id="相等操作符" tabindex="-1"><a class="header-anchor" href="#相等操作符" aria-hidden="true">#</a> 相等操作符</h3><ul><li>用于确定两个变量是否相等</li><li>相等和不相等：先转换再比较</li><li>全等和不全等：仅比较而不转换</li></ul><h4 id="相等和不相等" tabindex="-1"><a class="header-anchor" href="#相等和不相等" aria-hidden="true">#</a> 相等和不相等</h4><ul><li>相等（ == ） <ul><li>两个操作数相等，返回 true，反之则返回 false</li></ul></li><li>不相等（ != ） <ul><li>两个操作数不相等，返回 true，反之则返回 false</li></ul></li><li>这两种操作符都会先转换操作数（强制转换），然后再比较相等性</li></ul><h5 id="数据类型转换规则" tabindex="-1"><a class="header-anchor" href="#数据类型转换规则" aria-hidden="true">#</a> 数据类型转换规则</h5><ul><li>如果有一个操作数是布尔值，则在比较相等性之前现将其转换为数值 <ul><li>true 转换为 1</li><li>false 转换为 0</li></ul></li><li>如果一个操作数是字符串，另一个操作是数值，在比较相等性之前现将字符串转换为数值</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较</li></ul><h5 id="操作符比较规则" tabindex="-1"><a class="header-anchor" href="#操作符比较规则" aria-hidden="true">#</a> 操作符比较规则</h5><ul><li>null 和 undefined 是相等的</li><li>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值</li><li>如果有一个操作数是 NaN ，则相等性操作符返回 false ，而不相等操作符返回 true <ul><li>即使两个操作数都是 NaN，相等性操作符也返回 false ，不相等操作符返回 true</li></ul></li><li>如果两个操作数都是对象，则比较他们是不是同一个对象 <ul><li>如过两个操作数都指向同一对象，则相等性操作符返回 true，否则返回 false</li></ul></li></ul><h5 id="一些特殊情况的比较结果" tabindex="-1"><a class="header-anchor" href="#一些特殊情况的比较结果" aria-hidden="true">#</a> 一些特殊情况的比较结果</h5><table><thead><tr><th>表达式</th><th>值</th></tr></thead><tbody><tr><td>null == undefined</td><td>true</td></tr><tr><td>&quot;NaN&quot; == NaN</td><td>false</td></tr><tr><td>5 == NaN</td><td>false</td></tr><tr><td>NaN == NaN</td><td>false</td></tr><tr><td>NaN != NaN</td><td>true</td></tr><tr><td>false == 0</td><td>true</td></tr><tr><td>true == 1</td><td>true</td></tr><tr><td>true == 2</td><td>false</td></tr><tr><td>undefined == 0</td><td>false</td></tr><tr><td>null == 0</td><td>false</td></tr><tr><td>&quot;5&quot; == 5</td><td>true</td></tr></tbody></table><h4 id="全等和不全等" tabindex="-1"><a class="header-anchor" href="#全等和不全等" aria-hidden="true">#</a> 全等和不全等</h4><ul><li>全等（ === ）</li><li>不全等（ !== ）</li><li>除了在比较之前不转换操作数之外，全等和不全等操作符与相等和不相等操作符相同</li></ul><h3 id="条件操作符" tabindex="-1"><a class="header-anchor" href="#条件操作符" aria-hidden="true">#</a> 条件操作符</h3><ul><li>let v = boolean_expression ? true_value : false_value;</li></ul><h3 id="赋值操作符" tabindex="-1"><a class="header-anchor" href="#赋值操作符" aria-hidden="true">#</a> 赋值操作符</h3><ul><li>简单的复制操作符由（ = ）表示，作用就是把右边的值赋给左侧的变量 <ul><li>let num = 10</li></ul></li><li>在等号前添加乘性操作符、加性操作符或位操作符，可完成复合赋值操作 <ul><li>乘/赋值（ *= ）</li><li>除/赋值（ /= ）</li><li>模/赋值（ %= ）</li><li>加/赋值（ += ）</li><li>减/赋值（ -= ）</li></ul></li></ul><h3 id="逗号操作符" tabindex="-1"><a class="header-anchor" href="#逗号操作符" aria-hidden="true">#</a> 逗号操作符</h3><ul><li>（ , ）</li><li>使用逗号操作符可以在一条语句中执行多个操作 <ul><li>var num = 1, num2 = 2, num3 = 3;</li></ul></li><li>可用于赋值，返回表达式中最后一项 <ul><li>var num = (5, 1, 4, 8, 0); // num 的值为 0</li></ul></li></ul>`,75);function d(r,u){return n(),l("div",null,[i(" more "),s])}const c=a(e,[["render",d],["__file","11.常用操作符.html.vue"]]);export{c as default};
