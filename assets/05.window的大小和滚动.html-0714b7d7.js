import{_ as n,Q as a,S as s,$ as e,a3 as t}from"./framework-2ed98ecf.js";const o={},c=t(`<h2 id="窗口的宽高" tabindex="-1"><a class="header-anchor" href="#窗口的宽高" aria-hidden="true">#</a> 窗口的宽高</h2><ul><li><p><code>documentELement.clientWidth</code>：获取窗口可视区域宽度（不包括滚动条）</p></li><li><p><code>documentElement.clientHeight</code>：获取窗口可视区域高度（不包括滚动条）</p></li><li><p><code>window.innerWidth</code>：获取窗口可视区域宽度（包括滚动条）</p></li><li><p><code>window.innerHeight</code>：获取窗口可视区域高度（包括滚动条）</p></li></ul><blockquote><p>为了可靠的获取完整的最大高度，应该去下面这些属性的最大值，以避免过于老旧浏览器的兼容问题</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> scrollHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Full document height, with scrolled out part: &#39;</span> <span class="token operator">+</span> scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取当前滚动" tabindex="-1"><a class="header-anchor" href="#获取当前滚动" aria-hidden="true">#</a> 获取当前滚动</h2><blockquote><p><code>window.scrollX</code>、<code>window.scrollY</code> 用来获取滚动偏移量</p><p><code>window.pageXOffset</code>、<code>window.scrollYOffset</code> 分别是前两个的别名</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>scrollX<span class="token punctuation">,</span> window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>scrollY<span class="token punctuation">,</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="滚动方法" tabindex="-1"><a class="header-anchor" href="#滚动方法" aria-hidden="true">#</a> 滚动方法</h2><h3 id="scrollby-x-y" tabindex="-1"><a class="header-anchor" href="#scrollby-x-y" aria-hidden="true">#</a> scrollBy(x,y)</h3><blockquote><p>将页面滚动至 <strong>相对于当前位置的 <code>(x, y)</code> 位置</strong>，例如，<code>scrollBy(0,10)</code> 会将页面向下滚动 <code>10px</code>。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="scrollto-pagex-pagey" tabindex="-1"><a class="header-anchor" href="#scrollto-pagex-pagey" aria-hidden="true">#</a> scrollTo(pageX,pageY)</h3><blockquote><p>将页面滚动至 <strong>绝对坐标</strong>，使得可见部分的左上角具有相对于文档左上角的坐标 <code>(pageX, pageY)</code>。就像设置了 <code>scrollLeft/scrollTop</code> 一样，要滚动到最开始，我们可以使用 <code>scrollTo(0,0)</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>pageX<span class="token punctuation">,</span> pageY<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="scrollintoview-top" tabindex="-1"><a class="header-anchor" href="#scrollintoview-top" aria-hidden="true">#</a> scrollIntoView(top)</h3><blockquote><p>对 <code>elem.scrollIntoView(top)</code> 的调用将滚动页面以使 <code>elem</code> 可见</p></blockquote><ul><li>如果 <code>top=true</code>（默认值），页面滚动，使 <code>elem</code> 出现在窗口顶部。元素的上边缘将与窗口顶部对齐。</li><li>如果 <code>top=false</code>，页面滚动，使 <code>elem</code> 出现在窗口底部。元素的底部边缘将与窗口底部对齐</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>this.scrollIntoView()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>this.scrollIntoView(false)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="禁止-恢复-滚动" tabindex="-1"><a class="header-anchor" href="#禁止-恢复-滚动" aria-hidden="true">#</a> 禁止/恢复 滚动</h2><ul><li>可以使用相同的技术来冻结其他元素的滚动，而不仅仅是 <code>document.body</code></li><li>缺点是会使滚动条消失。如果滚动条占用了一些空间，它原本占用的空间就会空出来，那么内容就会“跳”进去以填充它 <ul><li>可以在 <code>document.body</code> 中滚动条原来的位置处通过添加 <code>padding</code>，来替代滚动条，这样这个问题就解决了。保持了滚动条冻结前后文档内容宽度相同</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 禁止滚动</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">&#39;hidden&#39;</span>

<span class="token comment">// 恢复滚动</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="elementfrompoint-x-y" tabindex="-1"><a class="header-anchor" href="#elementfrompoint-x-y" aria-hidden="true">#</a> elementFromPoint(x, y)</h2><blockquote><p>返回在窗口坐标 <code>(x, y)</code> 处嵌套最多的元素</p></blockquote><ul><li>只对在可见区域内的坐标 <code>(x,y)</code> 起作用，<strong>对于在窗口之外的坐标，</strong><code>elementFromPoint</code> <strong>返回</strong> <code>null</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">elementFromPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

<span class="token comment">// 例：高亮显示并输出现在位于窗口中间的元素的标签</span>
<span class="token keyword">let</span> centerX <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> centerY <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">elementFromPoint</span><span class="token punctuation">(</span>centerX<span class="token punctuation">,</span> centerY<span class="token punctuation">)</span><span class="token punctuation">;</span>
elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><ul><li>可以通过更改 <code>scrollTop/scrollLeft</code> 来滚动常规元素，可以使用 <code>document.documentElement.scrollTop/scrollLeft</code> 对页面进行相同的操作（ Safari 除外，而应该使用 <code>document.body.scrollTop/Left</code> 代替 ）</li></ul>`,27);function p(l,i){return a(),s("div",null,[e(" more "),c])}const d=n(o,[["render",p],["__file","05.window的大小和滚动.html.vue"]]);export{d as default};
