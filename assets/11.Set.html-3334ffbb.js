import{_ as o,Q as l,S as p,$ as c,a0 as n,a1 as s,a2 as e,a3 as t,C as r}from"./framework-2ed98ecf.js";const i={},u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set",target:"_blank",rel:"noopener noreferrer"},d=t(`<br><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><ul><li>是值的集合，允许存储<strong>任何类型</strong>的<strong>唯一值</strong>，无论是<strong>原始值</strong>或者是<strong>对象引用</strong></li><li><code>NaN</code> 和 <code>undefined</code> 都可以被存储在 Set 中， <code>NaN </code>之间被视为相同的值（NaN被认为是相同的，尽管 NaN !== NaN）</li><li>语法：<code>new Set([iterable])</code></li><li>参数 <ul><li>iterable：如果传递了一个iterable对象，它的所有元素都将被添加到新的集合中。如果不指定此参数，或其值为 null，则新集合为空</li></ul></li></ul><br><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 求并集</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 求交集</span>
<span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 求差集</span>
<span class="token keyword">let</span> arr5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> arr6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>set1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr5<span class="token punctuation">,</span> <span class="token operator">...</span>arr6<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,7),k={id:"set-prototype-size",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#set-prototype-size","aria-hidden":"true"},"#",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/size",target:"_blank",rel:"noopener noreferrer"},b=t('<blockquote><p>对象中元素的个数，访问函数是 <code>undefined</code>， 不能改变这个属性</p></blockquote><br><h2 id="set-prototype-add" tabindex="-1"><a class="header-anchor" href="#set-prototype-add" aria-hidden="true">#</a> <a href="%5B%5D(https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/add)">Set.prototype.add()</a></h2><ul><li><p>描述：向一个 Set 对象的末尾添加一个指定的值</p></li><li><p>语法：<code>mySet.add(value)</code></p></li><li><p>参数</p><ul><li>value：需要添加到 Set 对象的元素的值</li></ul></li><li><p>返回值：Set 对象本身</p></li><li><p>注意：可链式调用，不能添加重复的值</p></li></ul><br>',5),m={id:"set-prototype-delete",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#set-prototype-delete","aria-hidden":"true"},"#",-1),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/delete",target:"_blank",rel:"noopener noreferrer"},S=n("ul",null,[n("li",null,"描述：从一个 Set 对象中删除指定的元素"),n("li",null,[s("语法："),n("code",null,"mySet.delete(value)")]),n("li",null,[s("参数 "),n("ul",null,[n("li",null,"value：将要删除的元素")])]),n("li",null,"返回值：成功删除返回 true，否则返回 false")],-1),y=n("br",null,null,-1),g={id:"set-prototype-has",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#set-prototype-has","aria-hidden":"true"},"#",-1),z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has",target:"_blank",rel:"noopener noreferrer"},w=n("ul",null,[n("li",null,"描述：返回一个布尔值来指示对应的值 value 是否存在 Set 对象中"),n("li",null,[s("语法："),n("code",null,"mySet.has(value)")]),n("li",null,[s("参数 "),n("ul",null,[n("li",null,"value：用以测试该值是否存在于 Set 对象中")])]),n("li",null,"返回值：如果指定的值存在于Set对象当中，返回true，否则返回 false")],-1),x=n("br",null,null,-1),j={id:"set-prototype-clear",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#set-prototype-clear","aria-hidden":"true"},"#",-1),G={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/clear",target:"_blank",rel:"noopener noreferrer"},J=n("ul",null,[n("li",null,"描述：清空一个 Set 对象中的所有元素"),n("li",null,[s("语法："),n("code",null,"mySet.clear()")]),n("li",null,"返回值：undefined")],-1),O=n("br",null,null,-1),R={id:"set-prototype-entries",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#set-prototype-entries","aria-hidden":"true"},"#",-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/entries",target:"_blank",rel:"noopener noreferrer"},V=n("ul",null,[n("li",null,"描述：返回一个新的迭代器对象 ，这个对象的元素是类似 [value, value] 形式的数组"),n("li",null,[s("语法："),n("code",null,"mySet.entries")]),n("li",null,"返回值：一个新的包含 [value, value] 形式的数组迭代器对象，value 是给定集合中的每个元素，迭代器 对象元素的顺序即集合对象中元素插入的顺序")],-1),A=n("br",null,null,-1),B={id:"set-prototype-values",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#set-prototype-values","aria-hidden":"true"},"#",-1),q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values",target:"_blank",rel:"noopener noreferrer"},L=n("ul",null,[n("li",null,[n("p",null,"描述：方法返回一个 Iterator 对象，该对象按照原Set 对象元素的插入顺序返回其所有元素")]),n("li",null,[n("p",null,[s("语法："),n("code",null,"mySet.values()")])]),n("li",null,[n("p",null,"返回值：返回一个新生成的可迭代对象，以插入 Set 对象的顺序返回其包含的每个元素的值")])],-1),D=n("br",null,null,-1),K={id:"set-prototype-keys",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#set-prototype-keys","aria-hidden":"true"},"#",-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/keys",target:"_blank",rel:"noopener noreferrer"},$=n("ul",null,[n("li",null,[s("描述：是 "),n("code",null," Set.prototype.values()"),s(" 的别名")])],-1),F=n("br",null,null,-1),H={id:"set-prototype-foreach",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#set-prototype-foreach","aria-hidden":"true"},"#",-1),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",target:"_blank",rel:"noopener noreferrer"},U=t("<ul><li>描述：根据集合中元素的插入顺序，依次执行提供的回调函数</li><li>语法：<code>mySet.forEach(callback[, thisArg])</code></li><li>参数 <ul><li>callback：集合中每个元素执行的回调函数，该函数接收三个参数 <ul><li>currentValue：正在被操作的元素</li><li>currentKey：正在被操作的元素（因为集合没有索引）</li><li>set：调用当前 forEach 方法的集合对象</li></ul></li><li>thisArg：回调函数执行过程中的 this 值</li></ul></li></ul>",1);function X(Y,Z){const a=r("ExternalLinkIcon");return l(),p("div",null,[c(" more "),n("p",null,[n("a",u,[s("Set"),e(a)])]),d,n("h2",k,[h,s(),n("a",_,[s("Set.prototype.size"),e(a)])]),b,n("h2",m,[v,s(),n("a",f,[s("Set.prototype.delete()"),e(a)])]),S,y,n("h2",g,[N,s(),n("a",z,[s("Set.prototype.has()"),e(a)])]),w,x,n("h2",j,[C,s(),n("a",G,[s("Set.prototype.clear()"),e(a)])]),J,O,n("h2",R,[W,s(),n("a",E,[s("Set.prototype.entries()"),e(a)])]),V,A,n("h2",B,[I,s(),n("a",q,[s("Set.prototype.values()"),e(a)])]),L,D,n("h2",K,[Q,s(),n("a",T,[s("Set.prototype.keys()"),e(a)])]),$,F,n("h2",H,[M,s(),n("a",P,[s("Set.prototype.forEach()"),e(a)])]),U])}const sn=o(i,[["render",X],["__file","11.Set.html.vue"]]);export{sn as default};
