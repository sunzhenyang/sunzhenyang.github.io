const n=JSON.parse(`{"key":"v-162a7a38","path":"/technology/ts_axios/chapter11/headers.html","title":"headers 模块单元测试","lang":"zh-CN","frontmatter":{"title":"headers 模块单元测试","icon":"article","category":"typescript","article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"之前我们测试了 headers 的基础方法模块，接下来我们会从业务角度测试 headers 的相关业务逻辑。 测试代码编写 test/headers.spec.ts： import axios from '../src/index' import { getAjaxRequest } from './helper' function testHeaderValue(headers: any, key: string, val?: string): void { let found = false for (let k in headers) { if (k.toLowerCase() === key.toLowerCase()) { found = true expect(headers[k]).toBe(val) break } } if (!found) { if (typeof val === 'undefined') { expect(headers.hasOwnProperty(key)).toBeFalsy() } else { throw new Error(key + ' was not found in headers') } } } describe('headers', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should use default common headers', () =&gt; { const headers = axios.defaults.headers.common axios('/foo') return getAjaxRequest().then(request =&gt; { for (let key in headers) { if (headers.hasOwnProperty(key)) { expect(request.requestHeaders[key]).toEqual(headers[key]) } } }) }) test('should add extra headers for post', () =&gt; { axios.post('/foo', 'fizz=buzz') return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/x-www-form-urlencoded') }) }) test('should use application/json when posting an object', () =&gt; { axios.post('/foo/bar', { firstName: 'foo', lastName: 'bar' }) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/json;charset=utf-8') }) }) test('should remove content-type if data is empty', () =&gt; { axios.post('/foo') return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', undefined) }) }) it('should preserve content-type if data is false', () =&gt; { axios.post('/foo', false) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/x-www-form-urlencoded') }) }) test('should remove content-type if data is FormData', () =&gt; { const data = new FormData() data.append('foo', 'bar') axios.post('/foo', data) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', undefined) }) }) })","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter11/headers.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"headers 模块单元测试"}],["meta",{"property":"og:description","content":"之前我们测试了 headers 的基础方法模块，接下来我们会从业务角度测试 headers 的相关业务逻辑。 测试代码编写 test/headers.spec.ts： import axios from '../src/index' import { getAjaxRequest } from './helper' function testHeaderValue(headers: any, key: string, val?: string): void { let found = false for (let k in headers) { if (k.toLowerCase() === key.toLowerCase()) { found = true expect(headers[k]).toBe(val) break } } if (!found) { if (typeof val === 'undefined') { expect(headers.hasOwnProperty(key)).toBeFalsy() } else { throw new Error(key + ' was not found in headers') } } } describe('headers', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should use default common headers', () =&gt; { const headers = axios.defaults.headers.common axios('/foo') return getAjaxRequest().then(request =&gt; { for (let key in headers) { if (headers.hasOwnProperty(key)) { expect(request.requestHeaders[key]).toEqual(headers[key]) } } }) }) test('should add extra headers for post', () =&gt; { axios.post('/foo', 'fizz=buzz') return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/x-www-form-urlencoded') }) }) test('should use application/json when posting an object', () =&gt; { axios.post('/foo/bar', { firstName: 'foo', lastName: 'bar' }) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/json;charset=utf-8') }) }) test('should remove content-type if data is empty', () =&gt; { axios.post('/foo') return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', undefined) }) }) it('should preserve content-type if data is false', () =&gt; { axios.post('/foo', false) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/x-www-form-urlencoded') }) }) test('should remove content-type if data is FormData', () =&gt; { const data = new FormData() data.append('foo', 'bar') axios.post('/foo', data) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', undefined) }) }) })"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"headers 模块单元测试\\",\\"description\\":\\"之前我们测试了 headers 的基础方法模块，接下来我们会从业务角度测试 headers 的相关业务逻辑。 测试代码编写 test/headers.spec.ts： import axios from '../src/index' import { getAjaxRequest } from './helper' function testHeaderValue(headers: any, key: string, val?: string): void { let found = false for (let k in headers) { if (k.toLowerCase() === key.toLowerCase()) { found = true expect(headers[k]).toBe(val) break } } if (!found) { if (typeof val === 'undefined') { expect(headers.hasOwnProperty(key)).toBeFalsy() } else { throw new Error(key + ' was not found in headers') } } } describe('headers', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should use default common headers', () =&gt; { const headers = axios.defaults.headers.common axios('/foo') return getAjaxRequest().then(request =&gt; { for (let key in headers) { if (headers.hasOwnProperty(key)) { expect(request.requestHeaders[key]).toEqual(headers[key]) } } }) }) test('should add extra headers for post', () =&gt; { axios.post('/foo', 'fizz=buzz') return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/x-www-form-urlencoded') }) }) test('should use application/json when posting an object', () =&gt; { axios.post('/foo/bar', { firstName: 'foo', lastName: 'bar' }) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/json;charset=utf-8') }) }) test('should remove content-type if data is empty', () =&gt; { axios.post('/foo') return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', undefined) }) }) it('should preserve content-type if data is false', () =&gt; { axios.post('/foo', false) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', 'application/x-www-form-urlencoded') }) }) test('should remove content-type if data is FormData', () =&gt; { const data = new FormData() data.append('foo', 'bar') axios.post('/foo', data) return getAjaxRequest().then(request =&gt; { testHeaderValue(request.requestHeaders, 'Content-Type', undefined) }) }) })\\"}"]]},"headers":[{"level":2,"title":"测试代码编写","slug":"测试代码编写","link":"#测试代码编写","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":1.23,"words":368},"filePathRelative":"technology/ts_axios/chapter11/headers.md","localizedDate":"2023年1月11日","excerpt":"<p>之前我们测试了 <code>headers</code> 的基础方法模块，接下来我们会从业务角度测试 <code>headers</code> 的相关业务逻辑。</p>\\n<h2> 测试代码编写</h2>\\n<p><code>test/headers.spec.ts</code>：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> axios <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'../src/index'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> getAjaxRequest <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./helper'</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">testHeaderValue</span><span class=\\"token punctuation\\">(</span>headers<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> val<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> found <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span>\\n\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> k <span class=\\"token keyword\\">in</span> headers<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>k<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toLowerCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">===</span> key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toLowerCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      found <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>headers<span class=\\"token punctuation\\">[</span>k<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">break</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>found<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> val <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'undefined'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>headers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasOwnProperty</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBeFalsy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">+</span> <span class=\\"token string\\">' was not found in headers'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">describe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'headers'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">beforeEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">install</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">afterEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">uninstall</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use default common headers'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> headers <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>common\\n\\n    <span class=\\"token function\\">axios</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> key <span class=\\"token keyword\\">in</span> headers<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>headers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasOwnProperty</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span>headers<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add extra headers for post'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'fizz=buzz'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">testHeaderValue</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Content-Type'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'application/x-www-form-urlencoded'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use application/json when posting an object'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo/bar'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n      firstName<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>\\n      lastName<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'bar'</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">testHeaderValue</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Content-Type'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'application/json;charset=utf-8'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should remove content-type if data is empty'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">testHeaderValue</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Content-Type'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">it</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should preserve content-type if data is false'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">testHeaderValue</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Content-Type'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'application/x-www-form-urlencoded'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should remove content-type if data is FormData'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> data <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FormData</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    data<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'bar'</span><span class=\\"token punctuation\\">)</span>\\n\\n    axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">testHeaderValue</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Content-Type'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
