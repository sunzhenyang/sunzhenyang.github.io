const e=JSON.parse(`{"key":"v-fa857bc6","path":"/technology/javascript/events/event.html","title":"Event 对象","lang":"zh-CN","frontmatter":{"title":"Event 对象","icon":"article","category":"javascript","article":false,"tag":["javascript"],"copyright":"Copyright by 阮一峰","description":"概述 事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有的事件都是这个对象的实例，或者说继承了Event.prototype对象。 Event对象本身就是一个构造函数，可以用来生成新的实例。 event = new Event(type, options);","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/javascript/events/event.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Event 对象"}],["meta",{"property":"og:description","content":"概述 事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有的事件都是这个对象的实例，或者说继承了Event.prototype对象。 Event对象本身就是一个构造函数，可以用来生成新的实例。 event = new Event(type, options);"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Event 对象\\",\\"description\\":\\"概述 事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有的事件都是这个对象的实例，或者说继承了Event.prototype对象。 Event对象本身就是一个构造函数，可以用来生成新的实例。 event = new Event(type, options);\\"}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[{"level":3,"title":"Event.bubbles，Event.eventPhase","slug":"event-bubbles-event-eventphase","link":"#event-bubbles-event-eventphase","children":[]},{"level":3,"title":"Event.cancelable，Event.cancelBubble，event.defaultPrevented","slug":"event-cancelable-event-cancelbubble-event-defaultprevented","link":"#event-cancelable-event-cancelbubble-event-defaultprevented","children":[]},{"level":3,"title":"Event.currentTarget，Event.target","slug":"event-currenttarget-event-target","link":"#event-currenttarget-event-target","children":[]},{"level":3,"title":"Event.type","slug":"event-type","link":"#event-type","children":[]},{"level":3,"title":"Event.timeStamp","slug":"event-timestamp","link":"#event-timestamp","children":[]},{"level":3,"title":"Event.isTrusted","slug":"event-istrusted","link":"#event-istrusted","children":[]},{"level":3,"title":"Event.detail","slug":"event-detail","link":"#event-detail","children":[]}]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"Event.preventDefault()","slug":"event-preventdefault","link":"#event-preventdefault","children":[]},{"level":3,"title":"Event.stopPropagation()","slug":"event-stoppropagation","link":"#event-stoppropagation","children":[]},{"level":3,"title":"Event.stopImmediatePropagation()","slug":"event-stopimmediatepropagation","link":"#event-stopimmediatepropagation","children":[]},{"level":3,"title":"Event.composedPath()","slug":"event-composedpath","link":"#event-composedpath","children":[]}]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":8.62,"words":2587},"filePathRelative":"technology/javascript/events/event.md","localizedDate":"2023年1月11日","excerpt":"<h2> 概述</h2>\\n<p>事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个<code>Event</code>对象，所有的事件都是这个对象的实例，或者说继承了<code>Event.prototype</code>对象。</p>\\n<p><code>Event</code>对象本身就是一个构造函数，可以用来生成新的实例。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>event <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Event</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">,</span> options<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
