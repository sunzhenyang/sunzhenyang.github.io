<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://codemake.fun/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://codemake.fun/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Yang&amp;apos;s Blog</title>
    <link>https://codemake.fun/</link>
    <description>今日事，今日毕！</description>
    <language>zh-CN</language>
    <pubDate>Thu, 28 Mar 2024 00:45:50 GMT</pubDate>
    <lastBuildDate>Thu, 28 Mar 2024 00:45:50 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <image>
      <title>Yang&amp;apos;s Blog</title>
      <url>https://codemake.fun/banner.jpeg</url>
      <link>https://codemake.fun/</link>
    </image>
    <category>Java</category>
    <category>UML</category>
    <category>环境配置</category>
    <category>other</category>
    <category>JavaScript</category>
    <category>css</category>
    <category>CSS</category>
    <category>plugins</category>
    <item>
      <title>基本概念</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/01.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/01.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</guid>
      <source url="https://codemake.fun/rss.xml">基本概念</source>
      <description>JVM

Java 虚拟机，全称：Java Virtual Machine
JVM 是 Java 平台无关性实现的关键

JRE

Java 运行时环境，全称：Java Runtime Environment
包括 Java 虚拟机(JVM)、Java 核心类库和支持文件
和 JDK 的区别

如果只需要运行 Java 程序, 下载并安装 JRE 即可...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>JVM</h2>
<ul>
<li>Java 虚拟机，全称：Java Virtual Machine</li>
<li>JVM 是 Java 平台无关性实现的关键</li>
</ul>
<h2>JRE</h2>
<ul>
<li>Java 运行时环境，全称：Java Runtime Environment</li>
<li>包括 Java 虚拟机(JVM)、Java 核心类库和支持文件</li>
<li>和 JDK 的区别
<ul>
<li>如果只需要运行 Java 程序, 下载并安装 JRE 即可</li>
<li>如果要开发 Java 软件，需要下载 JDK</li>
</ul>
</li>
<li>面向使用人员</li>
</ul>
<h2>JDK</h2>
<ul>
<li>Java 语言的软件开发工具包，全称：Java Development Kit</li>
<li>两个主要组件
<ul>
<li>javac：编译器，将源程序转成字节码</li>
<li>java：运行编译后的 java 程序( .class 后缀的 )</li>
</ul>
</li>
<li>JDK 中 附带有 JRE</li>
<li>面向开发人员</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/QQ截图20201210232749.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>Java 平台</h2>
<ul>
<li>Java ME：Java 微型版，主要用于开发移动设备</li>
<li>Java SE：Java 标准版，主要用于开发桌面程序</li>
<li>Java EE：Java 企业版，主要用于 Web 程序</li>
</ul>
<h2>执行流程</h2>
<ul>
<li>解释执行的过程由虚拟机完成</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/QQ截图20201210231245.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>环境变量配置</h2>
<h3>windows</h3>
<ul>
<li>右键 <code>计算机</code> -&gt; <code>属性</code> -&gt; <code>高级系统设置</code> -&gt; <code>环境变量</code>
<ul>
<li><code>系统变量</code> 中添加变量 <code>JAVA_HOME</code>，值为 <code>jdk</code> 安装路径，例如 <code>E:\Develop\java\jdk1.8.0_311</code></li>
<li><code>系统变量</code> -&gt; <code>Path</code> 中添加一行 <code>%JAVA_HOME%\bin</code></li>
</ul>
</li>
</ul>
<h3>macos</h3>
<ul>
<li>修改命令行配置文件（ <code>.zshrc  </code> 或 <code>.bash_profile</code> ），添加如下代码</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Java</span>
<span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/Library/Java/JavaVirtualMachines/jdk1.8.0_341.jdk/Contents/Home
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>:.
<span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/lib/tools.jar:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:.
<span class="token builtin class-name">export</span> JAVA_HOME
<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span>
<span class="token builtin class-name">export</span> CLASSPATH
</code></pre></div><ul>
<li>刷新命令行配置文件</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> .zshrc
<span class="token comment"># 或</span>
<span class="token builtin class-name">source</span> .bash_profile
</code></pre></div><h2>命令</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 生成文档</span>
javadoc <span class="token parameter variable">-d</span> doc test.java <span class="token parameter variable">-encoding</span> UTF-8

<span class="token comment"># 编译</span>
javac HelloWorld.java

<span class="token comment"># 运行</span>
<span class="token function">java</span> HelloWorld<span class="token punctuation">(</span>.class<span class="token punctuation">)</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/QQ%E6%88%AA%E5%9B%BE20201210232749.png" type="image/png"/>
    </item>
    <item>
      <title>数据类型</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/02.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/02.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</guid>
      <source url="https://codemake.fun/rss.xml">数据类型</source>
      <description>分类



基本数据类型

数值型

整数类型

byte：字节型
short：短整型
int：整型
long：长整型，以大写的或小写的（L/l）结尾，未加 L 被视为 int


浮点类型

float：单精度浮点型，以大写的或小写的（F/f）结尾
double：双精度浮点型，浮点型字面值默认为 double 类型




字符型(char)
布尔型...</description>
      <category>Java</category>
      <pubDate>Thu, 23 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>分类</h2>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317115821602.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>
<p>基本数据类型</p>
<ul>
<li>数值型
<ul>
<li>整数类型
<ul>
<li>byte：字节型</li>
<li>short：短整型</li>
<li>int：整型</li>
<li>long：长整型，以大写的或小写的（L/l）结尾，未加 L 被视为 int</li>
</ul>
</li>
<li>浮点类型
<ul>
<li>float：单精度浮点型，以大写的或小写的（F/f）结尾</li>
<li>double：双精度浮点型，浮点型字面值默认为 double 类型</li>
</ul>
</li>
</ul>
</li>
<li>字符型(char)</li>
<li>布尔型(boolean)</li>
</ul>
</li>
<li>
<p>引用数据类型</p>
<ul>
<li>
<p>字符串(String)</p>
</li>
<li>
<p>类(class)</p>
</li>
<li>
<p>接口(interface)</p>
</li>
<li>
<p>数组</p>
</li>
</ul>
</li>
</ul>
<h2>空间占用</h2>
<p>| 数据类型 | 说明                     | 字节 | 位   | 最小范围   | 最大范围  |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317115821602.png" type="image/png"/>
    </item>
    <item>
      <title>常量与变量</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/03.%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/03.%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F.html</guid>
      <source url="https://codemake.fun/rss.xml">常量与变量</source>
      <description>标识符
命名规则

可以由字母、数字、下划线和美元符($)组成
不能以数字开头
严格区分大小写
不能是 Java 关键字和保留字（ goto、const ）
不能包含空格
命名最好有意义，能反映出其作用

关键字

变量

变量没有默认值，只初始化之前使用会报错
同一个作用域内不可声明两个同名变量

命名规则

满足标识符命名规则
符合驼峰命名法规范
...</description>
      <category>Java</category>
      <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>标识符</h2>
<h3>命名规则</h3>
<ul>
<li>可以由字母、数字、下划线和美元符($)组成</li>
<li>不能以数字开头</li>
<li>严格区分大小写</li>
<li>不能是 Java 关键字和保留字（ goto、const ）</li>
<li>不能包含空格</li>
<li>命名最好有意义，能反映出其作用</li>
</ul>
<h3>关键字</h3>
<p>| abstract  | boolean   | break        | byte    | case     | catch   |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>运算符</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/04.%E8%BF%90%E7%AE%97%E7%AC%A6.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/04.%E8%BF%90%E7%AE%97%E7%AC%A6.html</guid>
      <source url="https://codemake.fun/rss.xml">运算符</source>
      <description>表达式由运算符和操作数组成
按操作数个数运算符可分为：单目运算符、双目运算符、三目运算符

分类

算术运算符：+   -   *   /   %（取余）   ++（自增）   --（自减）

除法运算时，当分子分母都是整型时，结果为整除后的结果（舍弃小数点后的）。如果需要保留小数点后的内容，则需要分子或分母必须有一个为浮点型


赋值运算符：=

复...</description>
      <category>Java</category>
      <pubDate>Sat, 25 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<ul>
<li>表达式由运算符和操作数组成</li>
<li>按操作数个数运算符可分为：单目运算符、双目运算符、三目运算符</li>
</ul>
<h2>分类</h2>
<ul>
<li>算术运算符：<code>+</code>   <code>-</code>   <code>*</code>   <code>/</code>   <code>%</code>（取余）   <code>++</code>（自增）   <code>--</code>（自减）
<ul>
<li>除法运算时，当分子分母都是整型时，结果为整除后的结果（舍弃小数点后的）。如果需要保留小数点后的内容，则需要分子或分母必须有一个为浮点型</li>
</ul>
</li>
<li>赋值运算符：<code>=</code>
<ul>
<li>复合赋值运算符：<code>+=</code>   <code>-=</code>   <code>*=</code>   <code>/=</code>   <code>%=</code>，不会改变变量本身的数据类型</li>
</ul>
</li>
<li>关系运算符：<code>&gt;</code>   <code>&lt;</code>   <code>&gt;=</code>   <code>&lt;=</code>   <code>==</code>   <code>!=</code>
<ul>
<li>比较结果是一个布尔值
<ul>
<li>数值型之间都可以相互比较，<strong>浮点数与整数进行比较，只要值相等就返回 <code>true</code></strong></li>
<li>整型和字符型之间可以比较，是将整型与字符型的编码值进行比较</li>
<li>字符串不可以和整型、浮点型、字符型进行比较</li>
<li>布尔型不能和其他任何数据类型进行比较</li>
</ul>
</li>
</ul>
</li>
<li>逻辑运算符：<code>&amp;</code>   <code>|</code>   <code>!</code>   <code>&amp;&amp;</code>   <code>||</code>
<ul>
<li><code>&amp;&amp;</code> 和 <code>||</code> 也称作短路运算符，如果第一个表达式的值就能决定表达式最后的结果，运算符右边的表达式就不再进行计算</li>
</ul>
</li>
<li>条件运算符：<code>布尔表达式 ? 表达式1 : 表达式2</code>（三目运算符）</li>
<li>位运算符</li>
</ul>
<h2>优先级</h2>
<blockquote>
<p>从上到下，优先级 <strong>依次降低</strong></p>
</blockquote>
<p>|                 运算符                 |              描述              |<br>
| :</p>
]]></content:encoded>
    </item>
    <item>
      <title>流程控制</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/05.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/05.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html</guid>
      <source url="https://codemake.fun/rss.xml">流程控制</source>
      <description>选择结构
循环结构

break ：跳出当前循环或 switch 结构
continue：跳出本次循环

while

适用于不知道循环次数，只知道满足某个条件继续执行或结束执行时使用


循环变量必须先初始化
循环变量的值必须被改变（否则会死循环）

do while

适用于不知道循环次数，只知道满足某个条件继续执行或结束执行，并且循环肯定执行一次...</description>
      <category>Java</category>
      <pubDate>Sun, 26 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>选择结构</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><h2>循环结构</h2>
<ul>
<li><code>break</code> ：跳出当前循环或 <code>switch</code> 结构</li>
<li><code>continue</code>：跳出本次循环</li>
</ul>
<h3>while</h3>
<blockquote>
<p>适用于不知道循环次数，只知道满足某个条件继续执行或结束执行时使用</p>
</blockquote>
<ul>
<li>循环变量必须先初始化</li>
<li>循环变量的值必须被改变（否则会死循环）</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 循环输出 1-5</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>do while</h3>
<blockquote>
<p>适用于不知道循环次数，只知道满足某个条件继续执行或结束执行，并且循环肯定执行一次时使用</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 循环输出 1-5</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>for</h3>
<blockquote>
<p>三个表达式会被依次执行到，执行顺序固定，适用于循环次数固定的场景</p>
</blockquote>
<ul>
<li>写在小括号内的局部变量只在定义它的大括号内可用</li>
<li>三个表达式均可省略</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>增强型 for 循环</h2>
<blockquote>
<p>主要用于数组和集合</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>switch</h2>
<blockquote>
<p>用于匹配的表达式计算结果只能是 <code>byte、short、int、char、String</code> 中的一种</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">'一'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">'二'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">'三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// 可选</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"都不是"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>数组</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/06.%E6%95%B0%E7%BB%84.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/06.%E6%95%B0%E7%BB%84.html</guid>
      <source url="https://codemake.fun/rss.xml">数组</source>
      <description>相同类型 的数据按顺序组成的一种 引用数据类型

声明

两种声明方式均可

创建

创建时，长度必须指定
会在内存中开辟连续的存储空间
数组名是一个对象，指向数组的第一个元素

先声明后创建
声明时创建
初始化

声明的同时给数组赋值

使用
默认值

冒泡排序

由小到大排列</description>
      <category>Java</category>
      <pubDate>Mon, 27 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p><code>相同类型</code> 的数据按顺序组成的一种 <code>引用数据类型</code></p>
</blockquote>
<h2>声明</h2>
<blockquote>
<p>两种声明方式均可</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 数据类型[] 数组名</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myIntArray<span class="token punctuation">;</span>

<span class="token comment">// 数据类型 数组名[]</span>
<span class="token keyword">int</span> myIntArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 二维数组声明</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">;</span>
<span class="token keyword">int</span> intArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h2>创建</h2>
<ul>
<li>创建时，长度必须指定</li>
<li>会在内存中开辟连续的存储空间</li>
<li><strong>数组名是一个对象，指向数组的第一个元素</strong></li>
</ul>
<h3>先声明后创建</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 数据类型[] 数组名;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myIntArray<span class="token punctuation">;</span>

<span class="token comment">// 数组名 = new 数据类型[数组长度]</span>
myIntArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 二维数组创建</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">;</span>
intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
intArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 列数可省略，行数不可省略</span>
</code></pre></div><h3>声明时创建</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 数据类型[] 数组名 = new 数据类型[数组长度]</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myIntArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 二维数组创建</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myIntArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h2>初始化</h2>
<blockquote>
<p>声明的同时给数组赋值</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 一维数组初始化</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 二维数组初始化</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre></div><h2>使用</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取数组长度</span>
arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

<span class="token comment">// 获取数组中元素</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h2>默认值</h2>
<p>| 数据类型 | 说明         | <em>默认值</em> |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>方法</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/07.%E6%96%B9%E6%B3%95.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/07.%E6%96%B9%E6%B3%95.html</guid>
      <source url="https://codemake.fun/rss.xml">方法</source>
      <description>方法是用来解决一类问题的代码的有序组合，是一个功能模块



语法格式：访问修饰符 返回类型 方法名(参数列表){ 方法体 }


main：特殊的方法，程序执行的入口


访问修饰符

方法允许被访问的权限范围，分类如下，详细描述在 面向对象 - 封装 笔记文件里


不写修饰符
public：公开的
protected：受保护的
private：私...</description>
      <category>Java</category>
      <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>方法是用来解决一类问题的代码的有序组合，是一个功能模块</p>
</blockquote>
<ul>
<li>
<p>语法格式：<strong><code>访问修饰符 返回类型 方法名(参数列表){ 方法体 }</code></strong></p>
</li>
<li>
<p><code>main</code>：特殊的方法，程序执行的入口</p>
</li>
</ul>
<h2>访问修饰符</h2>
<blockquote>
<p>方法允许被访问的权限范围，分类如下，详细描述在 <code>面向对象 - 封装</code> 笔记文件里</p>
</blockquote>
<ul>
<li>不写修饰符</li>
<li><code>public</code>：公开的</li>
<li><code>protected</code>：受保护的</li>
<li><code>private</code>：私有的</li>
</ul>
<h2>分类</h2>
<blockquote>
<p>根据方法是否带参数、是否返回值，分为四类</p>
</blockquote>
<h3>无参无返回</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 打印星号分隔符</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestDemo</span> testDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testDemo<span class="token punctuation">.</span><span class="token function">printStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>无参带返回</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取当前时间</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestDemo</span> testDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testDemo<span class="token punctuation">.</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 年-月-日 时-分-秒</span>
        <span class="token class-name">String</span> dateStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dateStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>带参无返回</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 打印矩形面积</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestDemo</span> testDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testDemo<span class="token punctuation">.</span><span class="token function">printArea</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printArea</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"矩形的面积为："</span> <span class="token operator">+</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>带参带返回</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 获取矩形面积</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestDemo</span> testDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> area <span class="token operator">=</span> testDemo<span class="token punctuation">.</span><span class="token function">getRectArea</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"矩形的面积为："</span> <span class="token operator">+</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getRectArea</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>参数</h2>
<h3>传参类型</h3>
<ul>
<li>当参数是基本数据类型时，方法不能修改实际参数的值</li>
<li>当参数是引用类型时，方法通过地址引用改变了实际参数对象的内容
<ul>
<li><code>java</code> 中只存在值传递，对于 <code>基本类型</code>、<code>引用类型</code> 均是如此，因此<strong>方法中对某个传递过来的参数进行赋值操作的时候，均不会影响原来的值</strong>  <a href="https://zhuanlan.zhihu.com/p/388486387" target="_blank" rel="noopener noreferrer">【参考文章】</a></li>
<li>对于引用类型，直接在方法中修改了它的具体属性，外部会发生改变的原因是在 <code>java</code> 中引用类型的值是地址，在方法调用过程中，传递的是一份地址的拷贝，但是原引用和拷贝的引用依旧指向的是堆中的同一份值，因此，这份值做了改变，原来的对象本身就发生了变化</li>
</ul>
</li>
</ul>
<h3>可变参数</h3>
<blockquote>
<p>允许在调用方法时传入不定长度的参数</p>
<p>实际上是  Java 的一个语法糖，本质上还是基于数组的实现</p>
</blockquote>
<ul>
<li>多个参数时，可变参数要放在参数列表的最后（一个方法中只能有一个可变参数）</li>
<li>当可变参数作为方法参数，方法调用时可以传入0个或多个参数，传入数组也可以。数组作为方法参数，方法调用时只能传入数组</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 求不定数量整数的和</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TestDemo</span> testDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    testDemo<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    testDemo<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    testDemo<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>重载</h2>
<blockquote>
<p>方法名相同，参数列表不同的方法</p>
</blockquote>
<ul>
<li>同一个作用域下，并且方法名称相同</li>
<li>函数参数 <strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong>，与方法 参数名、返回值、访问修饰符 无关</li>
<li>可变参数作为参数的重载方法不会被优先调用</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>面向对象</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</guid>
      <source url="https://codemake.fun/rss.xml">面向对象</source>
      <description>类和对象

类是模子，确定对象将会拥有的特征（属性）和行为（方法），是对象的类型
对象是类的实例表现，是特定类型的数据，声明对象在 栈 中，实例化对象在 堆 中
一个 Java 文件中可以存在多个类，多个接口，但是只能存在一个 public 修饰的类或接口，且此时文件名需要与 public 修饰的类或者接口同名

包
命名规范

由英文小写字母组成
创...</description>
      <category>Java</category>
      <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>类和对象</h2>
<ul>
<li>类是模子，确定对象将会拥有的特征（属性）和行为（方法），是对象的类型</li>
<li>对象是类的实例表现，是特定类型的数据，声明对象在 <strong>栈</strong> 中，实例化对象在 <strong>堆</strong> 中</li>
<li>一个 Java 文件中可以存在多个类，多个接口，但是只能存在一个 <code>public</code> 修饰的类或接口，且此时文件名需要与 <code>public</code> 修饰的类或者接口同名</li>
</ul>
<h2>包</h2>
<h3>命名规范</h3>
<ul>
<li>由英文小写字母组成</li>
<li>创建包：域名倒序 + 模块 + 功能</li>
<li>一个包中不能存在同名类</li>
<li><code>package + 包名</code>：指明该文件中定义的类所在的包，一个 java 文件中只能有一条 <code>package</code> 语句</li>
<li>java 文件中书写顺序：<code>package</code> - <code>import</code> - <code>class</code></li>
<li>导入包：分别以 <code>*</code> 和 指定类名 进行导入，以类名导入优先级最高</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 加载指定包下的所有直接允许访问的类，无法导入其子包中的类</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>animal<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token comment">// 加载指定包下的指定类（优先级最高）</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>animal<span class="token punctuation">.</span></span><span class="token class-name">Cat</span>
  
<span class="token comment">// 在程序中直接加载类</span>
<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>animal<span class="token punctuation">.</span></span>CatTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>animal<span class="token punctuation">.</span></span>CatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>常用系统包</h3>
<p>| 包名        | 描述                                                 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>封装</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/09.%E5%B0%81%E8%A3%85.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/09.%E5%B0%81%E8%A3%85.html</guid>
      <source url="https://codemake.fun/rss.xml">封装</source>
      <description>将类的某些信息隐藏在类内部，不允许外部程序直接访问

特点

隐藏对象的信息，留出访问的接口，只能通过规定的方法访问和操作数据
隐藏类的实例细节，方便修改和实现

访问修饰符

private：私有的，只允许在本类中进行访问
默认：允许在当前类、同包子类/同包非子类访问，跨包子类/跨包非子类不允许访问
protected：受保护的， 允许在本类、同包子...</description>
      <category>Java</category>
      <pubDate>Thu, 02 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>将类的某些信息隐藏在类内部，不允许外部程序直接访问</p>
</blockquote>
<h2>特点</h2>
<ul>
<li>隐藏对象的信息，留出访问的接口，只能通过规定的方法访问和操作数据</li>
<li>隐藏类的实例细节，方便修改和实现</li>
</ul>
<h2>访问修饰符</h2>
<ul>
<li><code>private</code>：私有的，只允许在本类中进行访问</li>
<li><code>默认</code>：允许在当前类、同包子类/同包非子类访问，跨包子类/跨包非子类不允许访问</li>
<li><code>protected</code>：受保护的， 允许在本类、同包子类/同包非子类、跨包子类进行访问，跨包非子类不允许</li>
<li><code>public</code>：共有的，允许在任意位置访问</li>
</ul>
<p>| 访问修饰符  | 本类 | 同包 | 子类 | 其他 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>继承</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/10.%E7%BB%A7%E6%89%BF.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/10.%E7%BB%A7%E6%89%BF.html</guid>
      <source url="https://codemake.fun/rss.xml">继承</source>
      <description>一种类与类之间的关系，使用已存在的类的定义作为基础建立新类，新类（子类、派生类）的定义可以增加新的数据或新的功能，也可以用父类（基类）的功能，但不能选择性的继承父类


子类会继承父类所有 public 类型的实例变量和方法，但不会继承父类所有的 private 类型变量和方法

初始化顺序


父类静态成员 &amp;gt; 子类静态成员 &amp;gt; 父类对象构造 &amp;gt; 子...</description>
      <category>Java</category>
      <pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一种类与类之间的关系，使用已存在的类的定义作为基础建立新类，新类（子类、派生类）的定义可以增加新的数据或新的功能，也可以用父类（基类）的功能，但<strong>不能选择性的继承父类</strong></p>
</blockquote>
<ul>
<li>子类会继承父类所有 <code>public</code> 类型的实例变量和方法，但不会继承父类所有的 <code>private</code> 类型变量和方法</li>
</ul>
<h2>初始化顺序</h2>
<ul>
<li>
<p>父类静态成员 &gt; 子类静态成员 &gt; 父类对象构造 &gt; 子类对象构造</p>
</li>
<li>
<p>访问修饰符不影响成员加载顺序，跟书写位置有关</p>
</li>
</ul>
<h2>特点</h2>
<ul>
<li>利用代码复用</li>
<li>缩短开发周期</li>
<li>单继承：子类只能继承一个父类</li>
<li>父类的私有成员子类不可继承</li>
<li>父类的构造方法不允许被继承，不允许被重写</li>
<li>子类构造方法默认调用父类的无参构造</li>
</ul>
<h2>格式</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><h2>super</h2>
<blockquote>
<p>表示父类对象的引用</p>
</blockquote>
<ul>
<li>
<p>调用父类可访问的属性</p>
</li>
<li>
<p>调用父类方法</p>
</li>
<li>
<p>调用父类指定构造方法，要放在子类构造方法的 <strong>第一行</strong></p>
</li>
<li>
<p><strong>子类的构造过程中必须调用其父类的构造方法</strong></p>
</li>
<li>
<p>如果子类的构造方法中没有显示标注，则系统 <strong>默认调用父类的无参构造方法</strong></p>
<ul>
<li>此时如果父类没有无参构造，则会产生编译错误</li>
</ul>
</li>
<li>
<p><strong>不能在静态方法中使用</strong></p>
</li>
<li>
<p>不能与 <code>this()</code> 共存</p>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 调用父类属性</span>
<span class="token keyword">super</span><span class="token punctuation">.</span>month<span class="token punctuation">;</span>

<span class="token comment">// 调用父类方法</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用父类构造方法</span>
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>final 关键字</h2>
<ul>
<li>修饰类：表示该类不允许被继承，<code>public</code> <code>final</code> 关键字顺序可颠倒
<ul>
<li><code>public final class Animal{}</code></li>
</ul>
</li>
<li>修饰类方法：表示该方法不允许被子类重写，<strong>不能用来修饰构造方法</strong>
<ul>
<li><code>public final void eat(){}</code></li>
</ul>
</li>
<li>修饰方法内局部变量：<strong>只要在具体使用之前进行赋值即可，一旦赋值不允许被修改</strong>
<ul>
<li><code>final int num; num = 10;</code></li>
</ul>
</li>
<li>修饰内部成员属性：<strong>若定义时未被初始化，则只能在构造函数或构造代码块中赋值</strong>
<ul>
<li><code>private final String name;</code></li>
</ul>
</li>
<li>修饰对象，对象的引用不可变，但对象的属性值可变</li>
<li>可配合 <code>static</code> 使用修饰方法和变量
<ul>
<li><code>public static final int num = 10;</code></li>
<li>只需要加载一次后续不需要修订的配置信息</li>
<li><code>final</code> 修饰的静态变量值必须在声明或静态初始化程序中赋值</li>
</ul>
</li>
<li>可提高性能，但会降低可扩展性</li>
</ul>
<h2>Object 类</h2>
<ul>
<li>
<p>是所有类的父类</p>
</li>
<li>
<p>一个类没有使用 extends 关键字明确标识继承关系，则默认继承 Object 类（包括数组）</p>
</li>
<li>
<p>每个类都可以使用 Object 类中定义的方法</p>
</li>
</ul>
<h2>方法重写</h2>
<ul>
<li>在子类中定义，重写父类中的方法</li>
<li>方法名和参数列表（类型、个数、顺序）与父类完全一致，与方法参数名无关</li>
<li>父类中的静态方法不能被子类重写</li>
<li>父类和子类具有相同名称的静态方法时，当子类对象向上转型后，只能调用到父类原有的静态方法</li>
<li>方法的返回值和访问修饰符是允许有变化的
<ul>
<li>如果父类方法的返回值是 <code>void</code> 或 基本数据类型，则要求子类方法重写时返回类型与父类完全一致</li>
<li>如果父类方法的返回值是引用类型，则要求子类方法重写时返回类型与父类一致或为父类类型的子类</li>
<li><strong>访问修饰符：子类重写方法的访问修饰符访问范围要大于等与父类的访问范围</strong></li>
</ul>
</li>
<li><code>final</code> 修饰的方法不允许被重写</li>
<li><code>static</code> 修饰的方法
<ul>
<li>加了 <code>@Override</code> 后不允许被重写，不加则被视为子类的静态方法</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>多态</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/11.%E5%A4%9A%E6%80%81.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/11.%E5%A4%9A%E6%80%81.html</guid>
      <source url="https://codemake.fun/rss.xml">多态</source>
      <description>多态：允许不同类的对象对同一消息做出不同的响应


可以借由向上转型和动态绑定机制完成
向上转型实现了将子类对象向上转型为父类类型
动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法

分类

编译时多态：又称设计时多态，通过方法重载实现
运行时多态：程序运行时动态决定调用哪个方法，Java 中指的多态一般指的就是运行时多态

必要条件

满...</description>
      <category>Java</category>
      <pubDate>Sat, 04 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>多态：允许不同类的对象对同一消息做出不同的响应</p>
</blockquote>
<ul>
<li>可以借由向上转型和动态绑定机制完成</li>
<li>向上转型实现了将子类对象向上转型为父类类型</li>
<li>动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法</li>
</ul>
<h2>分类</h2>
<ul>
<li>编译时多态：又称设计时多态，通过方法重载实现</li>
<li>运行时多态：程序运行时动态决定调用哪个方法，Java 中指的多态一般指的就是运行时多态</li>
</ul>
<h2>必要条件</h2>
<ul>
<li>满足继承关系</li>
<li>父类引用指向子类对象</li>
</ul>
<h2>向上转型</h2>
<ul>
<li>
<p>语法：<code>父类类型 父类引用 = new 子类类型(参数)</code></p>
</li>
<li>
<p>又称隐式转型、自动转型</p>
</li>
<li>
<p>父类引用指向子类实例，也表示子类对象可以赋值给父类的对象</p>
</li>
<li>
<p>只能调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法</p>
</li>
<li>
<p>是安全的，因为任何子类都继承并接受了父类的非私有成员方法</p>
</li>
<li>
<p>应用场景：多适用于有多个同父子类共同应用的场景，此时，可以借由父类引用，根据实际需要，转型为特定的子类对象实现多态</p>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是人就要吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Chinese</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中国人爱吃饺子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// French</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">French</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"法国人爱喝香槟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Russian</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Russian</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"俄国人爱吃列巴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">French</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Russian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2>向下转型</h2>
<ul>
<li>在某些资料中也被叫做 强制类型转换</li>
<li>必须转换为原始类型，不允许转换成非原始类型</li>
<li>将子类的引用指向父类对象，此处必须进行强制类型转换</li>
<li>可以调用子类独有的方法</li>
<li>使用场景：<strong>一般用来重新获得因为向上转型而丢失的子类特性而存在</strong>，因此通常向下转型前需要先进行向上转型，向下转型通常也会结合 <code>instanceof</code> 一起应用，在灵活运用多态的基础上，同时兼顾子类的独有性，相较于直接创建子类实例，提高了代码的灵活性</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cat</span> car  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span>
</code></pre></div><h2>绑定机制</h2>
<ul>
<li>将一个方法调用同一个方法所在的类连接到一起，Java 中存在静态绑定和动态绑定。</li>
<li>静态绑定：指在程序运行之前进行绑定（由编译器和链接程序完成的）,也叫前期绑定</li>
<li>动态绑定：指在程序运行期间由 JVM 根据对象的类型自动的判断应该调用哪个方法，也叫后期绑定</li>
</ul>
<h2>instanceof</h2>
<blockquote>
<p>判断左边对象是否是右边类型的实例</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>one <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>接口</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/12.%E6%8E%A5%E5%8F%A3.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/12.%E6%8E%A5%E5%8F%A3.html</guid>
      <source url="https://codemake.fun/rss.xml">接口</source>
      <description>解决多重继承问题，但又不会产生致命方块的问题

基本概念


接口定义了某一批类所需要遵守的规范

定义：public interface test(){}



接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它之规定这些类里必须提供某些方法


实现类必须实现接口中所有方法，未全部实现则需将类变为抽象类


调用：import 包名....</description>
      <category>Java</category>
      <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>解决多重继承问题，但又不会产生致命方块的问题</p>
</blockquote>
<h2>基本概念</h2>
<ul>
<li>
<p>接口定义了某一批类所需要遵守的规范</p>
<ul>
<li>定义：<code>public interface test(){}</code></li>
</ul>
</li>
<li>
<p>接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它之规定这些类里必须提供某些方法</p>
</li>
<li>
<p>实现类必须实现接口中所有方法，未全部实现则需将类变为抽象类</p>
</li>
<li>
<p>调用：<code>import 包名.*</code> 或 <code>import 包名.接口名</code></p>
</li>
<li>
<p>接口不能实例化，只能通过引用指向类实例</p>
</li>
<li>
<p>接口的灵活性就在于“规定一个类必须做什么，而不管你如何做”。可以<strong>定义一个接口类型的引用来指向实现接口的类的实例，当这个引用调用方法时，会根据实际引用类的实例来判断具体调用哪个方法，这是一种典型的多态的表现</strong></p>
</li>
<li>
<p><strong>当接口引用指向实现类时，不能直接调用实现类独有的方法，需要进行强制类型转换才可以调用</strong></p>
</li>
<li>
<p>默认方法和静态方法自 JDK1.8 后可以在接口中应用，默认方法可以在实现类中应用，静态方法只属于接口</p>
</li>
<li>
<p>在一个Java文件中可以存在多个类，多个接口。但是 <strong>只能存在一个public修饰的类或接口</strong>，且此时<strong>文件名需要与public修饰的类或者接口同名</strong></p>
</li>
<li>
<p>接口只能使用两种访问修饰符</p>
<ul>
<li><strong>默认访问权限（包内可见）</strong></li>
<li><code>public</code></li>
</ul>
</li>
<li>
<p>常量</p>
<ul>
<li>默认访问修饰符： <code>public static final</code> ，三个任意一个缺省不影响使用</li>
<li>接口中定义的常量在定义时必须初始化</li>
<li>可通过 <code>接口名.常量名</code> 访问</li>
</ul>
</li>
<li>
<p>抽象方法（成员方法）</p>
<ul>
<li>默认访问修饰符：<code>public abstract</code> ，两个任意一个缺省不影响使用</li>
<li>实现类中实现抽象方法后，可通过 <strong>接口引用</strong> 或者 <strong>实现类引用</strong> 访问相关方法</li>
</ul>
</li>
<li>
<p>默认方法</p>
<ul>
<li>接口中可以使用 <code>default</code> 关键字定义默认方法，子类中不需要实现，可以带方法体</li>
<li>定义：<strong><code>public default 返回值类型 方法名(参数列表){方法体}</code></strong> （<code>public</code> 为默认访问修饰符，可省略）</li>
<li>可以在实现类中重写与重载，重写时去掉 <code>default</code> 关键字，重载的方法无法通过接口引用访问
<ul>
<li>重写方法后，可以通过 <strong><code>接口名.super.默认方法名()</code></strong> 调用接口中原有的默认方法，不加 <code>super</code> 只能调用接口的静态成员</li>
</ul>
</li>
<li>使用场景：使用接口中的某些方法，而其他一些方法重新实现没有意义</li>
</ul>
</li>
<li>
<p>静态方法</p>
<ul>
<li>接口中可以使用 <code>static</code> 关键字定义静态方法，可以带方法体</li>
<li>实现类中无法继承接口中的静态方法</li>
<li>不可以在实现类中重写，可以存在相同静态格式，但相互独立</li>
<li>定义：<strong><code>public static 返回值类型 方法名(参数列表){方法体}</code></strong> （<code>public</code> 为默认访问修饰符，可省略）</li>
<li>在实现类中需要通过接口名进行访问</li>
<li>使用场景：希望更多的接口拓展方法支持在无实例对象产生的情况下调用</li>
</ul>
</li>
</ul>
<h2>多接口</h2>
<ul>
<li>
<p>实现类可以通过 <code>implements</code> 实现多个接口，通过 <strong>逗号分隔</strong>，当实现类同时继承父类并实现接口时，需要先继承后实现</p>
</li>
<li>
<p>多个接口中存在相同成员，类同时实现多个接口，子类无法分辨，需要在子类中重新定义</p>
</li>
<li>
<p>继承的父类和实现的接口中存在相同定义的成员，类中无实现时，会优先继承父类的成员及静态方法</p>
</li>
</ul>
<h2>接口继承</h2>
<ul>
<li>子接口可以通过 <code>extends</code> 继承多个接口，接口之间通过逗号分隔</li>
<li>多个接口中有重名方法，子接口继承时应重写父接口中的重名方法</li>
<li>单继承中：子接口可继承父接口中定义的常量、抽象方法、默认方法，无法继承静态方法</li>
<li>多继承中：只可继承父接口中定义的抽象方法，常量和默认方法无法分辨</li>
</ul>
<h2>接口与抽象类</h2>
<ul>
<li>抽象类通常用来捕捉子类的通用特性，即更加侧重重用</li>
<li>接口多是为了把程序模块进行固化的契约，即侧重降低耦合，可以理解为 <strong>更加抽象的抽象类</strong></li>
<li>当希望描述多种毫无关系的类型之间的共同行为能力，更推荐用接口</li>
<li>当多类间可以形成可追溯的产生轨迹，则更推荐抽象类继承</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>枚举</title>
      <link>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/13.%E6%9E%9A%E4%B8%BE.html</link>
      <guid>https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/13.%E6%9E%9A%E4%B8%BE.html</guid>
      <source url="https://codemake.fun/rss.xml">枚举</source>
      <description>枚举

是一些常量值的集合，以 enum 关键字定义，可以声明在类的内部，也可以声明到独立的类中，但不能定义在方法内

优点

写错单词会有提示，减少代码中的 bug
语义明了，增加代码可读性

写法</description>
      <category>Java</category>
      <pubDate>Mon, 06 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>枚举</h2>
<blockquote>
<p>是一些常量值的集合，以 <code>enum</code> 关键字定义，可以声明在类的内部，也可以声明到独立的类中，但不能定义在方法内</p>
</blockquote>
<h3>优点</h3>
<ul>
<li>写错单词会有提示，减少代码中的 bug</li>
<li>语义明了，增加代码可读性</li>
</ul>
<h3>写法</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// WeekDemo.java 定义在类内</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeekDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token class-name">Week</span> <span class="token punctuation">{</span><span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Week</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// WeekDemo.java 定义在类外</span>
<span class="token keyword">enum</span> <span class="token class-name">Week</span> <span class="token punctuation">{</span><span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeekDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Week</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 在其他类中定义枚举</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeekEnum</span><span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token class-name">Week</span> <span class="token punctuation">{</span><span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeekDemo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">WeekEnum<span class="token punctuation">.</span>Week</span><span class="token punctuation">.</span><span class="token constant">TUESDAY</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>异常</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/14.%E5%BC%82%E5%B8%B8.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/14.%E5%BC%82%E5%B8%B8.html</guid>
      <source url="https://codemake.fun/rss.xml">异常</source>
      <description>异常本质上是程序上的错误，在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常

分类
编译时异常

括号配对
语句分号
关键字错误
等等

运行时异常

使用空的对象引用调用方法
数组访问时下标越界
算术运算时除数为 0
类型转换时无法正常转型
等等

Throwable

异常根类

Error

程序无法处理的错误，表...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>异常本质上是程序上的错误，在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常</p>
</blockquote>
<h2>分类</h2>
<h3>编译时异常</h3>
<ul>
<li>括号配对</li>
<li>语句分号</li>
<li>关键字错误</li>
<li>等等</li>
</ul>
<h3>运行时异常</h3>
<ul>
<li>使用空的对象引用调用方法</li>
<li>数组访问时下标越界</li>
<li>算术运算时除数为 0</li>
<li>类型转换时无法正常转型</li>
<li>等等</li>
</ul>
<h2>Throwable</h2>
<blockquote>
<p>异常根类</p>
</blockquote>
<h3>Error</h3>
<blockquote>
<p>程序无法处理的错误，表示运行应用程序中较严重的问题，他们在应用程序的控制和处理能力之外，而且大多数是程序运行是不允许出现的状况，通常不需要关心此类错误</p>
</blockquote>
<ul>
<li><code>VirtualMachineError</code>：虚拟机错误</li>
<li><code>OutOfMemoryError</code>：内存溢出</li>
<li><code>ThreadDeath</code>：线程死锁</li>
</ul>
<h3>Exception</h3>
<blockquote>
<p>程序本身可以处理的异常</p>
</blockquote>
<ul>
<li>
<p><code>Checked Exception</code>：检查型异常，编译器要求必须处理的异常</p>
<ul>
<li><code>IOException</code>：IO 异常</li>
<li><code>SQLException</code>：SQL 异常</li>
</ul>
</li>
<li>
<p><code>Unchecked Exception</code>：非检查型异常，编译器不要求强制处理的异常</p>
<ul>
<li><code>RuntimeException</code>
<ul>
<li><code>NullPointerException</code>：空指针异常（使用了未经初始化的对象或者是不存在的对象）</li>
<li><code>ArrayIndexOutOfBoundsException</code>：数组下标越界异常（使用超出数组下标范围的下标）</li>
<li><code>ArrayStoreException</code>：数组中包含不兼容的值的异常（数组中实际传入的数据与预定不符，例如子类数组经过向上转型后，传入父类对象）</li>
<li><code>ArithmeticException</code>：数学运算异常（涉及到数学运算的地方可能出现失误，比如程序中出现了除以零这样的运算）</li>
<li><code>NumberFormatException</code>：数字格式化异常（涉及到类型转换时，比如不符合转换格式的字符串被转换成数字）</li>
<li><code>ClassCastException</code>：类型转换异常（如向下转型时，转换对象无法完成正常转换）</li>
<li><code>InputMismatchException</code>：输入格式错误异常（接收数据与预期格式不符）
<ul>
<li>全称时 <code>java.util.InputMismatchException</code>，由于java.util包不是默认直接加载的，所以需要导入操作才能正常应用</li>
</ul>
</li>
<li><code>FileNotFoundException</code>：文件未找到异常（操作文件内容时发现文件不存在 ）</li>
<li>等等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>关键字</h2>
<h3>try catch finally</h3>
<ul>
<li>
<p><code>try</code> 块后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块</p>
<ul>
<li><code>try {}</code>后可以书写多个 <code>catch</code> 块，但不能出现同类型异常</li>
<li>安全起见，建议在多个 <code>catch</code> 块的最后（并且只能是最后位置）添加异常父类 <code>catch (Exception e){}</code></li>
</ul>
</li>
<li>
<p><code>try...catch</code> 代码块中定义的是局部变量，只能在其代码块中使用</p>
</li>
<li>
<p><code>finally</code> 代码块是强制执行的，不建议在其中书写 <code>return</code> 语句，一旦书写会屏蔽掉 <code>try</code> 和 <code>catch</code> 代码块中的 <code>return</code> 语句</p>
</li>
<li>
<p><code>System.exit(1)</code>：终止正在运行的 java 虚拟机，不会继续执行到 <code>finally</code> 代码块，参数非 0 表示异常终止</p>
</li>
<li>
<p>子类重写父类排除的异常方法时，声明的异常必须是父类方法所声明异常的同类或子类</p>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210201174818429.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>throws</h3>
<blockquote>
<p>当在设计中，希望有针对性的产生、抛出异常，由上级调用者视情况处理时，就需要使用throw、throws</p>
</blockquote>
<ul>
<li>
<p>表示通知方法调用者，使用该方法时，可能会发生哪些异常，需要进行相关处理</p>
</li>
<li>
<p>通过 <code>throws</code> 声明将要抛出何种类型的异常，后面可以跟多个异常类型，用逗号隔开</p>
<ul>
<li><code>public void method() throws Exception1,Exception2,Exception3 {}</code></li>
</ul>
</li>
<li>
<p>声明抛出的异常类型必须和 <code>throw</code> 抛出的对象相同或者是其父类</p>
</li>
<li>
<p>当方法抛出异常列表中的异常时，方法将不对这些类型及其子类类型的异常作处理，而抛向调用该方法的方法，由他去处理</p>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">InputMismatchException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">,</span> <span class="token class-name">InputMismatchException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====运算开始====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> one <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入第二个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> two <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====运算结束====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> one <span class="token operator">/</span> two<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one 和 two 的商是："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除数不允许为零！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InputMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入整数！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>throw</h3>
<blockquote>
<p>通过 <code>throw</code> 将产生的异常抛出，用来规避可能出现的风险，完成一些程序的逻辑</p>
</blockquote>
<ul>
<li>抛出的异常只能是 <code>Throwable</code> 或者其子类的实例对象</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 写法1：自己抛出的异常，自己处理</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 写法2：谁调用谁处理</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类型 <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>方法</h2>
<h3>toString()</h3>
<blockquote>
<p>获取异常类型和描述信息，当直接输出对象 <code>e</code> 时，调用的就是该方法</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>getMessage()</h3>
<blockquote>
<p>获取异常描述信息</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>printStackTrace()</h3>
<blockquote>
<p>打印异常的堆栈信息，包括种类、描述信息、出错位置等</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>自定义异常</h2>
<ul>
<li>描述特定业务产生的异常类型</li>
<li>定义一个类，继承 <code>Throwable</code> 类或它的子类</li>
<li>判断自定义的异常类型属于检查异常还是非检查异常需要看在定义自定义异常类时所继承的父类，如果父类属于检查异常，则自定义异常也就是检查异常，反之亦然</li>
<li>自定义异常需先经过 <code>throw</code> 抛出，才能被 <code>catch</code> 捕获，无法自动被程序捕获并处理</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// GameAgeException.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameAgeException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">GameAgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"未满18岁，不能玩此类型游戏！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test.java</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token comment">// 描述酒店的入住规则：限定年龄，18岁以下，80岁以上的住客必须由亲友陪同</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ageCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GameAgeException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token operator">||</span> age <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GameAgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎进入游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">ageCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GameAgeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>异常链</h2>
<ul>
<li>捕获一个异常后再抛出另一个异常</li>
<li>将异常发生的原因一个传一个串起来，即把底层的异常信息传递给上层，逐层抛出</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// HotelAgeException.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotelAgeException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HotelAgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"18岁以下，80岁以上的住客必须由亲友陪同!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">testThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 描述酒店的入住规则：限定年龄，18岁以下，80岁以上的住客必须由亲友陪同</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HotelAgeException</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HotelAgeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">testOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HotelAgeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"我是新产生的异常1"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">testTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用第二个参数</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"我是新产生的异常2"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/*
             或者使用 initCause
             Exception e1 = new Exception("我是新产生的异常2");
             e1.initCause(e);
             throw e1;
            */</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210201174818429.png" type="image/png"/>
    </item>
    <item>
      <title>包装类</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/15.%E5%8C%85%E8%A3%85%E7%B1%BB.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/15.%E5%8C%85%E8%A3%85%E7%B1%BB.html</guid>
      <source url="https://codemake.fun/rss.xml">包装类</source>
      <description>类型特点

不允许被继承，没有子类
包装类是引用类型，拥有方法和属性
基本数据类型只包含数值信息


存储方式

包装类型对象实例化，借由 new 在堆空间进行空间分配，对应栈空间中存储地址引用
基本数据类型变量对应栈空间中存储的是具体数据值


初始值

包装类的对象为初始化时，初始值均为 null
基本数据类型有各自的默认初始值




装箱

基...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<ul>
<li>类型特点
<ul>
<li>不允许被继承，没有子类</li>
<li>包装类是引用类型，拥有方法和属性</li>
<li>基本数据类型只包含数值信息</li>
</ul>
</li>
<li>存储方式
<ul>
<li>包装类型对象实例化，借由 <code>new</code> 在堆空间进行空间分配，对应栈空间中存储地址引用</li>
<li>基本数据类型变量对应栈空间中存储的是具体数据值</li>
</ul>
</li>
<li>初始值
<ul>
<li>包装类的对象为初始化时，初始值均为 <code>null</code></li>
<li>基本数据类型有各自的默认初始值</li>
</ul>
</li>
</ul>
<p>| 基本类型 | 默认值                  | 对应的包装类 | 默认值 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>字符串</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/16.%E5%AD%97%E7%AC%A6%E4%B8%B2.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/16.%E5%AD%97%E7%AC%A6%E4%B8%B2.html</guid>
      <source url="https://codemake.fun/rss.xml">字符串</source>
      <description>String：具有不可变性

对象一旦被创建，则不能修改，是不可变的
所谓修改其实是创建了新的对象，所指向的内存空间不变


StringBuilder：可变，当频繁操作字符串时，建议使用
StringBuffer：和 StringBuilder 基本一致，StringBuffer 是线程安全的，StringBuilder 则没有，所以 StringB...</description>
      <category>Java</category>
      <pubDate>Fri, 24 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<ul>
<li><code>String</code>：具有不可变性
<ul>
<li>对象一旦被创建，则不能修改，是不可变的</li>
<li>所谓修改其实是创建了新的对象，所指向的内存空间不变</li>
</ul>
</li>
<li><code>StringBuilder</code>：可变，当频繁操作字符串时，建议使用</li>
<li><code>StringBuffer</code>：和 <code>StringBuilder</code> 基本一致，<code>StringBuffer</code> 是线程安全的，<code>StringBuilder</code> 则没有，所以 <code>StringBuilder</code> 性能略高</li>
</ul>
<h2>创建方法</h2>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"imooc"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"imooc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'i'</span><span class="token punctuation">,</span><span class="token char">'m'</span><span class="token punctuation">,</span><span class="token char">'o'</span><span class="token punctuation">,</span><span class="token char">'o'</span><span class="token punctuation">,</span><span class="token char">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317222221814.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>常用方法</h2>
<p>| 方法                                             | 说明                                                         |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317222221814.png" type="image/png"/>
    </item>
    <item>
      <title>集合</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/17.%E9%9B%86%E5%90%88.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/17.%E9%9B%86%E5%90%88.html</guid>
      <source url="https://codemake.fun/rss.xml">集合</source>
      <description>Java 中的集合是工具类，可以存储任意数量的具有共同属性的对象


应用场景

无法预测存储数据的数量
同时存储有一对一关系的数据
需要进行数据的增删
解决数据重复问题

集合框架
Collection

存储类的对象


子接口及实现类

List：数据有序，允许重复

ArrayList
LinkedList


Queue：数据有序，允许重复
...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>Java 中的集合是工具类，可以存储任意数量的具有共同属性的对象</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/20210629210309.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>应用场景</h2>
<ul>
<li>无法预测存储数据的数量</li>
<li>同时存储有一对一关系的数据</li>
<li>需要进行数据的增删</li>
<li>解决数据重复问题</li>
</ul>
<h2>集合框架</h2>
<h3>Collection</h3>
<blockquote>
<p>存储类的对象</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230410163839049.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4>子接口及实现类</h4>
<ul>
<li>List：数据有序，允许重复
<ul>
<li>ArrayList</li>
<li>LinkedList</li>
</ul>
</li>
<li>Queue：数据有序，允许重复
<ul>
<li>LinkedList</li>
</ul>
</li>
<li>Set：数据无序，不允许重复
<ul>
<li>HashSet</li>
</ul>
</li>
</ul>
<h3>Map</h3>
<blockquote>
<p>键值对</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230410163806521.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h4>实现类</h4>
<ul>
<li>HashMap</li>
</ul>
<h2>List</h2>
<blockquote>
<p>序列，代表元素有序并且可以重复的集合，每个元素都有其对应的顺序索引</p>
</blockquote>
<ul>
<li>可以精确控制每个元素的插入位置，或删除某个位置的元素</li>
<li>两个主要实现类是 <code>ArrayList</code> 和 <code>LinkedList</code></li>
</ul>
<h3>ArrayList</h3>
<ul>
<li>基于数组实现的 List 类，是 Java 数组的有效替代品</li>
<li>自动扩容，多数情况下无需指定最大长度</li>
<li>数据在内存中是连续紧密存储的，基于数据访问速度快</li>
<li>元素有序且可以重复</li>
<li>在列表的尾部插入或删除数据非常有效</li>
<li>更适合查找和更新元素</li>
<li>其中的元素可以为 <code>null</code></li>
<li>方法
<ul>
<li><code>add</code></li>
<li><code>remove</code></li>
<li><code>contains</code></li>
<li><code>isEmpty</code></li>
<li><code>indexOf</code></li>
<li><code>size</code></li>
<li><code>get</code></li>
</ul>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>set</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListDemo1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 用 ArrayList 存储元素</span>
		<span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Swift"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 输出列表中的元素个数</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印列表中的元素</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 移除某个元素</span>
		list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"Go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>Set</h2>
<blockquote>
<p>代表无序、不可重复的集合</p>
</blockquote>
<h3>迭代器</h3>
<ul>
<li><code>Iterator</code> 接口以统一的方式对各种集合元素进行遍历</li>
<li><code>HasNext()</code> 方法检测集合中是否还有下一个元素</li>
<li><code>next()</code> 方法返回集合的下一个元素</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Iterator</span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>HashSet</h3>
<ul>
<li><code>HashSet</code> 是 <code>Set</code> 的一个重要实现类，称为哈希集</li>
<li><code>HashSet</code> 中的元素无序并且不可以重复
<ul>
<li>根据重写对象所在类的 <code>HashCode</code> 和 <code>equals</code> 方法来判断两个对象是否相等</li>
</ul>
</li>
<li><code>HashSet</code> 中只允许一个 <code>null</code> 元素</li>
<li>具有良好的存取和查找性能</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>set</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetDemo</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 显示集合元素</span>
		<span class="token class-name">Iterator</span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 插入元素</span>
		set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 插入重复元素，插入失败，但是是不会报错</span>
		set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//判断对象是否相等，相等则返回true，不用继续比较属性了</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">==</span>obj<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">//判断obj是否是Cat类的对象</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Cat</span> cat<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
    <span class="token keyword">return</span> cat<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>month<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">getSpecies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>species<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>Map</h2>
<blockquote>
<p>代表存储映射关系的集合</p>
</blockquote>
<ul>
<li><code>Map</code> 中的数据是以键值对 <code>key-value</code> 的形式存储的</li>
<li><code>Key-value</code> 以 <code>Entry</code> 类型的对象实例存在</li>
<li>可以通过 <code>key</code> 值快速的查找 <code>value</code></li>
<li>一个映射不能包含重复的建</li>
<li>每个键最多只能映射到一个值</li>
</ul>
<h3>HashMap</h3>
<ul>
<li>
<p>基于哈希表的 <code>Map</code> 接口的实现</p>
</li>
<li>
<p>允许使用<code>null</code> 键和 <code>null</code> 值</p>
</li>
<li>
<p>键不允许重复</p>
</li>
<li>
<p><code>HashMap</code> 中的 <code>Entry</code> 对象是无序排列的</p>
</li>
<li>
<p>方法</p>
<ul>
<li>
<p>查找数据：<code>keySet()</code></p>
<ul>
<li>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keySet <span class="token operator">=</span> classObj<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>keySet<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classObj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
<li></li>
</ul>
</li>
<li>
<p>添加数据：<code>put(key,value)</code></p>
</li>
<li>
<p>打印数据：</p>
<ul>
<li>
<p>使用迭代器打印值：<code>Iterator </code> -&gt; <code>classObj.values().iterator()</code></p>
</li>
<li>
<p>通过 <code>entrySet</code> 打印 <code>key</code> 和 <code>value</code></p>
<ul>
<li>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet <span class="token operator">=</span> classObj<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">:</span>entrySet<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>Queue</h2>
<blockquote>
<p>代表队列特性</p>
</blockquote>
<h2>集合排序</h2>
<blockquote>
<p>使用 <code>Collections</code> 类的 <code>sort()</code> 方法</p>
</blockquote>
<ul>
<li><code>sort(List&lt;T&gt; list)</code>：根据元素的自然顺序对指定列表按升序进行排序</li>
</ul>
<h3>整数排序</h3>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>set</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortDemo</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/20210629210309.png" type="image/png"/>
    </item>
    <item>
      <title>泛型</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/18.%E6%B3%9B%E5%9E%8B.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/18.%E6%B3%9B%E5%9E%8B.html</guid>
      <source url="https://codemake.fun/rss.xml">泛型</source>
      <description>在 Java 中增加泛型之前，泛型程序设计使用继承来实现

坏处

需要强制类型转换
可向集合中添加任意类型的对象，存在风险





使用


多态与泛型

变量声明的类型必须匹配传递给实际对象的类型（前后尖括号类型必须一致）</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<ul>
<li>
<p>在 Java 中增加泛型之前，泛型程序设计使用继承来实现</p>
<ul>
<li>坏处
<ul>
<li>需要强制类型转换</li>
<li>可向集合中添加任意类型的对象，存在风险</li>
</ul>
</li>
</ul>
</li>
<li>
<p>使用</p>
</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Java SE7 及以后的版本中，构造方法中可以省略泛型类型</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>多态与泛型</h2>
<ul>
<li>变量声明的类型必须匹配传递给实际对象的类型（前后尖括号类型必须一致）</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>常用语句</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/999.%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/999.%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.html</guid>
      <source url="https://codemake.fun/rss.xml">常用语句</source>
      <description>Scanner

接收控制台输入内容


其他</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>Scanner</h2>
<blockquote>
<p>接收控制台输入内容</p>
</blockquote>
<p>| 接收数据       | 方法                 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Lambda 表达式</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/Lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
      <source url="https://codemake.fun/rss.xml">Lambda 表达式</source>
      <description>JDK8 开始支持，用来让程序编写更优雅
可以简洁的实现匿名内部类与函数声明与调用
基于 Lambda 提供的 stream 流式处理极大简化对集合的操作

语法格式

(参数列表) -&amp;gt; 实现语句


参数列表使用逗号分隔参数

参数类型可省略
单参数括号可省略


-&amp;gt;：Lambda 表达式操作符
实现语句单行直接写，多行用 {} 包裹

函数式编...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<ul>
<li>JDK8 开始支持，用来让程序编写更优雅</li>
<li>可以简洁的实现匿名内部类与函数声明与调用</li>
<li>基于 Lambda 提供的 stream 流式处理极大简化对集合的操作</li>
</ul>
<h3>语法格式</h3>
<blockquote>
<p>(参数列表) -&gt; 实现语句</p>
</blockquote>
<ul>
<li>参数列表使用逗号分隔参数
<ul>
<li>参数类型可省略</li>
<li>单参数括号可省略</li>
</ul>
</li>
<li><code>-&gt;</code>：Lambda 表达式操作符</li>
<li>实现语句单行直接写，多行用 <code>{}</code> 包裹</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>lambda</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaSample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.标准Lambda使用方式</span>
        <span class="token comment">//约束条件:Lambda表达式只能实现有且只有一个抽象方法的接口,Java称为"函数式接口"</span>
        <span class="token class-name">MathOperation</span> addition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> a<span class="token punctuation">,</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加法运算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">0f</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addition<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 等价代码
        class Addition implements MathOperation{
            @Override
            public Float operate(Integer a, Integer b) {
                System.out.println("加法运算");
                return a+b+0f;
            }
        }
        Addition addition = new Addition();
        System.out.println(addition.operate(5,3));
        */</span>

        <span class="token comment">//2.Lambda允许忽略参数类型</span>
        <span class="token class-name">MathOperation</span> substraction <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token operator">+</span> <span class="token number">0f</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>substraction<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.单行实现代码可以省略大括号和return</span>
        <span class="token class-name">MathOperation</span> multiplication <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">*</span> b <span class="token operator">+</span> <span class="token number">0f</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multiplication<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>函数式编程</h3>
<blockquote>
<p>基于函数式接口并使用 lambda 表达式对的编程方式</p>
</blockquote>
<ul>
<li>将代码作为可重用数据代入到程序中</li>
<li>强调 <strong>你想做什么</strong> 而不是 <strong>你想怎么做</strong></li>
</ul>
<h3>函数式接口</h3>
<blockquote>
<p>有且只有一个抽象方法的接口</p>
</blockquote>
<ul>
<li>Java 中拥有大量函数式接口，如 <code>java.lang.Runnable</code></li>
<li>JDK8 后提供了一系列的函数式接口，位于 <code>java.util.function</code></li>
</ul>
<h4>Predicate</h4>
<blockquote>
<p>测试传入数据是否满足判断要求，用于条件判断，固定返回布尔值</p>
</blockquote>
<ul>
<li>需要实现 <code>test()</code> 方法进行逻辑判断</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>lambda</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Predicate</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 理解函数式编程
 * Predicate函数式接口的使用方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PredicateSample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> n<span class="token operator">-&gt;</span>n<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*for(Integer num:list){
            if(num%2==1){
                System.out.println(num);
            }
        }*/</span>

        <span class="token function">filter</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>n<span class="token operator">-&gt;</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取所有奇数</span>
        <span class="token function">filter</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>n<span class="token operator">-&gt;</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取所有偶数</span>
        <span class="token function">filter</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>n<span class="token operator">-&gt;</span>n<span class="token operator">&gt;</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取所有大于5的偶数</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>Consumer</h4>
<blockquote>
<p><code>Consumer&lt;T&gt;</code>：对应有一个输入参数无输出的功能代码</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>lambda</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Consumer接口的使用
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerSample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">output</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向控制台打印:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">output</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向XXX网站发送数据包:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"天将降大任于是人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为。"</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>Function</h4>
<blockquote>
<p><code>Function&lt;T,R&gt;</code>：对应有一个输入参数且需要返回数据的功能代码</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>lambda</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 利用Function函数式接口生成定长随机字符串
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionSample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> randomStringFunction <span class="token operator">=</span> l <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> chars <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvxwyz0123456789"</span><span class="token punctuation">;</span>
            <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> position <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> randomString <span class="token operator">=</span> randomStringFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>randomString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>Stream 流式处理</h3>
<ul>
<li>建立在 Lambda 基础上的多数据处理技术</li>
<li>对集合数据处理进行高度抽象，极大简化代码量</li>
<li>可对集合进行迭代、去重、筛选、排序、聚合等一系列处理</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 简单示例</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>lambda</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 利用Function函数式接口生成定长随机字符串
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionSample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> op <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>常用方法</h4>
<p>| 接口         | 用途                     |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Math</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/Math.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/Math.html</guid>
      <source url="https://codemake.fun/rss.xml">Math</source>
      <description>Math
Math.random()

返回介于 0 ~ 1.0 之间的双精度浮点值

Math.abs()

返回双精度浮点数类型参数的绝对值，这个方法有覆盖的版本，因此传入整型会返回整型，传入双精度浮点数会返回双精度浮点数

Math.round()

根据参数是浮点型或双精度浮点数返回四舍五入之后的整形或长整型

Math.min()

返回两参...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>Math</h2>
<h3>Math.random()</h3>
<blockquote>
<p>返回介于 0 ~ 1.0 之间的双精度浮点值</p>
</blockquote>
<h3>Math.abs()</h3>
<blockquote>
<p>返回双精度浮点数类型参数的绝对值，这个方法有覆盖的版本，因此传入整型会返回整型，传入双精度浮点数会返回双精度浮点数</p>
</blockquote>
<h3>Math.round()</h3>
<blockquote>
<p>根据参数是浮点型或双精度浮点数返回四舍五入之后的整形或长整型</p>
</blockquote>
<h3>Math.min()</h3>
<blockquote>
<p>返回两参数中较小的那一个，这里有 int/lang/float/double 的重载版本</p>
</blockquote>
<h3>Math.max()</h3>
<blockquote>
<p>返回两参数中较大的那一个，这里有 int/lang/float/double 的重载版本</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>MD5</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/md5.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/md5.html</guid>
      <source url="https://codemake.fun/rss.xml">MD5</source>
      <description>MD5

Commons-Codec 是 Apache 提供的编码/解码组件
通过 Commons-Codec 可轻易生产源数据的 MD5 摘要
官网：https://commons.apache.org/proper/commons-codec/
MD5 摘要方法：String md5 = DigestUtils.md5Hex(源数据)</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>MD5</h2>
<ul>
<li>Commons-Codec 是 Apache 提供的编码/解码组件</li>
<li>通过 Commons-Codec 可轻易生产源数据的 MD5 摘要</li>
<li>官网：<a href="https://commons.apache.org/proper/commons-codec/" target="_blank" rel="noopener noreferrer">https://commons.apache.org/proper/commons-codec/</a></li>
<li>MD5 摘要方法：<code>String md5 = DigestUtils.md5Hex(源数据)</code></li>
</ul>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Java</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html</guid>
      <source url="https://codemake.fun/rss.xml">Java</source>
      <description>内存管理
堆栈
栈

每个方法（Method）在执行时，都会创建一个栈帧，用于存储局部变量表、操作数、动态链接、方法出口信息等



栈中所存储，多用于保存局部信息的值，比如：方法中的基本数据类型定义的变量、对象的引用（也称为对象实例）等。当局部作用范围结束时，站内信息立即自动释放。


当存储内容是由基本数据类型（byte、short、long、do...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>内存管理</h2>
<h3>堆栈</h3>
<h4>栈</h4>
<blockquote>
<p>每个方法（Method）在执行时，都会创建一个栈帧，用于存储局部变量表、操作数、动态链接、方法出口信息等</p>
</blockquote>
<ul>
<li>
<p>栈中所存储，多用于保存局部信息的值，比如：方法中的基本数据类型定义的变量、对象的引用（也称为对象实例）等。当局部作用范围结束时，站内信息立即自动释放。</p>
</li>
<li>
<p>当存储内容是由基本数据类型（byte、short、long、double、char、boolean）声明的局部变量时，在栈中存储的是他们对应的具体数值。</p>
</li>
<li>
<p>当存储的是局部的对象的引用（定义在方法中的引用类型的变量）存储的是具体对象在堆中的地址。当然，如果对象的引用没有指向具体的空间，则是 <code>null</code></p>
</li>
</ul>
<h4>堆</h4>
<blockquote>
<p>用来存放动态产生的数据，比如 <code>new</code> 出来的对象。当对象使用结束，并确定已无实例指向堆空间时，JVM 才会依据相关垃圾回收机制进行资源回收，完成堆内资源释放，也就是说，并不是方法结束，方法内涉及到的堆空间就会立即释放，这也是与栈管理不同的地方。</p>
</blockquote>
<ul>
<li>创建出来的对象只包含属于各自的成员变量，并不包括成员方法。因为同一个类拥有各自的成员变量，存储在堆中的不同位置，但是同一个类的不同实例之间共享该类的方法，并不是每创建一个对象就把成员方法复制一次</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>反射</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E5%8F%8D%E5%B0%84.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E5%8F%8D%E5%B0%84.html</guid>
      <source url="https://codemake.fun/rss.xml">反射</source>
      <description>反射（Reflect）

是在 运行时 动态访问类与对象的技术


在 JDK1.2 版本后的高级特性，隶属于 java.lang.reflect
创建对象的实际从编译的时候延迟到程序运行时
大多数 Java 框架都基于反射实现参数配置、动态注入等特性

核心类
Class
描述

JVM 代表类和接口的类
Class 对象具体包含了某个特定类的结构信...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>反射（Reflect）</h2>
<blockquote>
<p>是在 <strong>运行时</strong> 动态访问类与对象的技术</p>
</blockquote>
<ul>
<li>在 JDK1.2 版本后的高级特性，隶属于 <code>java.lang.reflect</code></li>
<li>创建对象的实际从编译的时候延迟到程序运行时</li>
<li>大多数 Java 框架都基于反射实现参数配置、动态注入等特性</li>
</ul>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 示例</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>imooc<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Employee</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassSample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//Class.forName()方法将指定的类加载到jvm,并返回对应Class对象</span>
            <span class="token class-name">Class</span> employeeClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.imooc.reflect.entity.Employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee已被加载到jvm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//newInstance通过默认构造方法创建新的对象</span>
            <span class="token class-name">Employee</span> emp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> employeeClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//类名与类路径书写错误是抛出"类无法找到"异常</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//非法访问异常,当在作用域外访问对象方法或成员变量时抛出</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//对象无法被实例化,抛出"实例化异常"</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>核心类</h3>
<h4>Class</h4>
<h5>描述</h5>
<ul>
<li>JVM 代表类和接口的类</li>
<li>Class 对象具体包含了某个特定类的结构信息</li>
<li>通过 Class 对象可获取对应类的构造方法/方法/成员变量</li>
</ul>
<h5>方法</h5>
<p>| 方法                        | 用途                                                |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>正则表达式</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
      <source url="https://codemake.fun/rss.xml">正则表达式</source>
      <description>正则表达式
字符匹配
| 表达式                      | 说明                                 |
| :-------------------------- | ------------------------------------ | ------------------ |
| A     ...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>正则表达式</h2>
<h3>字符匹配</h3>
<p>| 表达式                      | 说明                                 |<br>
| :</p>
]]></content:encoded>
    </item>
    <item>
      <title>注解</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E6%B3%A8%E8%A7%A3.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E6%B3%A8%E8%A7%A3.html</guid>
      <source url="https://codemake.fun/rss.xml">注解</source>
      <description>说明

可以声明包、类、属性、方法、局部变量、方法参数等的前面
用来对这些元素进行说明、注释


按运行机制分类

源码注解：只在源码阶段保留，在编译阶段会被丢弃

@Override：标注重写父类方法


编译时注解：在编译时期保留，在加载 class 文件时会被丢弃

@NotNull：空值检查


运行时注解：在运行阶段还起作用，甚至会影响运行逻...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>说明</h2>
<blockquote>
<p>可以声明包、类、属性、方法、局部变量、方法参数等的前面</p>
<p>用来对这些元素进行说明、注释</p>
</blockquote>
<ul>
<li>按运行机制分类
<ul>
<li>源码注解：只在源码阶段保留，在编译阶段会被丢弃
<ul>
<li><strong><code>@Override</code></strong>：标注重写父类方法</li>
</ul>
</li>
<li>编译时注解：在编译时期保留，在加载 class 文件时会被丢弃
<ul>
<li><strong><code>@NotNull</code></strong>：空值检查</li>
</ul>
</li>
<li>运行时注解：在运行阶段还起作用，甚至会影响运行逻辑的注解
<ul>
<li><strong><code>@Autowired</code></strong>：依赖注入，自动将外部传入的数据加载进去</li>
</ul>
</li>
</ul>
</li>
<li>按来源分类
<ul>
<li>来自 JDK 的注解</li>
<li>来自第三方的注解</li>
<li>自定义的注解</li>
</ul>
</li>
</ul>
<h3>元注解</h3>
<blockquote>
<p>定义注解的注解，对注解进行标注</p>
</blockquote>
<ul>
<li><code>@target：限定注解可以用于哪些地方</code></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>设计模式</title>
      <link>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link>
      <guid>https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</guid>
      <source url="https://codemake.fun/rss.xml">设计模式</source>
      <description>设计模式指的是一套被反复使用的、多数人知晓的、经过分类编目的代码设计经验总结

创建型模式

关注对象创建过程的模式


单例模式

目的：使得类的一个对象成为该类系统中的唯一实例
定义：一个类有且仅有一个实例，并且自行实例化向整个系统提供

要点

某个类只能有一个实例
必须自行创建实例
必须自行向整个系统提供这个实例

实现

只提供私有的构造方法...</description>
      <category>Java</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>设计模式指的是一套被反复使用的、多数人知晓的、经过分类编目的代码设计经验总结</p>
</blockquote>
<h2>创建型模式</h2>
<blockquote>
<p>关注对象创建过程的模式</p>
</blockquote>
<h3></h3>
<h3>单例模式</h3>
<blockquote>
<p>目的：使得类的一个对象成为该类系统中的唯一实例</p>
<p>定义：一个类有且仅有一个实例，并且自行实例化向整个系统提供</p>
</blockquote>
<h4>要点</h4>
<ul>
<li>某个类只能有一个实例</li>
<li>必须自行创建实例</li>
<li>必须自行向整个系统提供这个实例</li>
</ul>
<h4>实现</h4>
<ul>
<li>只提供私有的构造方法</li>
<li>含有一个该类的静态私有对象</li>
<li>提供一个静态的公有方法用于创建和获取静态私有对象</li>
</ul>
<h4>优点</h4>
<ul>
<li>在内存中只有一个对象，节省内存空间</li>
<li>避免频繁的创建销毁对象，提高性能</li>
</ul>
<h4>缺点</h4>
<ul>
<li>扩展比较困难</li>
<li>实例化后对象长期不用，系统将默认为垃圾进行回收，造成状态丢失</li>
</ul>
<h4>使用场景</h4>
<ul>
<li>创建对象时占用资源过多，但同时又需要用到该类对象</li>
<li>对系统内资源要求统一读写，如读写配置信息</li>
<li>当多个实例存在可能引起程序逻辑错误，如号码生成器</li>
</ul>
<h4>饿汉式</h4>
<blockquote>
<p>在对象创建过程中立即完成实例化，空间换时间，线程安全</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonOne</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>懒汉式</h4>
<blockquote>
<p>在对象创建过程中不实例化，在静态共有方法中再实例化，时间换空间，存在线程风险</p>
</blockquote>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonOne</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>工厂方法模式<br>
建造者模式<br>
抽象工厂模式<br>
原型模式</p>
<h2>组合型模式</h2>
<blockquote>
<p>关注类和对象组合的模式</p>
</blockquote>
<p>桥接模式<br>
装饰器模式<br>
代理模式<br>
组合模式<br>
享元模式<br>
外观模式<br>
适配器模式</p>
<h2>行为型模式</h2>
<blockquote>
<p>关注对象之间的通信过程</p>
</blockquote>
<p>备忘录模式<br>
状态模式<br>
解释器模式<br>
命令模式<br>
模板方法模式<br>
访问者模式<br>
中介者模式<br>
迭代子模式<br>
观察者模式<br>
策略模式<br>
责任链模式</p>
]]></content:encoded>
    </item>
    <item>
      <title>UML类图</title>
      <link>https://codemake.fun/notes/other/200.UML%E7%B1%BB%E5%9B%BE.html</link>
      <guid>https://codemake.fun/notes/other/200.UML%E7%B1%BB%E5%9B%BE.html</guid>
      <source url="https://codemake.fun/rss.xml">UML类图</source>
      <description>UML 类图

UML(Unifled Modeling Language)，又称统一建模语言或标准建模语言，是一种支持模型化和软件系统开发的图形化语言



可以为软件开发的所有阶段提供模型化和可视化支持，可用于多种类型软件系统开发建模的各个阶段，通常我们会结合 UML 图例来表示类与类之间的各种关系


类的层次结构代表类与类之间的关系，类的关系有...</description>
      <category>UML</category>
      <pubDate>Wed, 22 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>UML 类图</h2>
<blockquote>
<p>UML(Unifled Modeling Language)，又称统一建模语言或标准建模语言，是一种支持模型化和软件系统开发的图形化语言</p>
</blockquote>
<ul>
<li>
<p>可以为软件开发的所有阶段提供模型化和可视化支持，可用于多种类型软件系统开发建模的各个阶段，通常我们会结合 UML 图例来表示类与类之间的各种关系</p>
</li>
<li>
<p>类的层次结构代表类与类之间的关系，类的关系有很多种，包括泛化、实现、依赖、关联、聚合和组合。</p>
</li>
<li>
<p>在大的类别上还可分为两种：横向关系和纵向关系</p>
<ul>
<li>横向关系就是泛化、实现，而纵向关系就是剩下的 4 种，他们的强弱关系：<code>依赖 &lt; 关联 &lt; 聚合 &lt; 组合</code>。</li>
<li>理解这些类的关系，并应用于类的层次结构设计中，有助于我们更好的进行代码组织结构优化。</li>
</ul>
</li>
</ul>
<h3>泛化</h3>
<blockquote>
<p>泛化关系就是继承，表示一般与特殊的关系，即 “一般” 是 “特殊” 的泛化</p>
</blockquote>
<ul>
<li>
<p>在继承中，“一般类” 就是父类，“特殊类” 就是子类。它指定了子类如何特化父类的所有特征和行为。他们之间是 “is A” 的关系。也就是说如果两个类之间满足 “A is a B” 的关系，则 A 就是 B 的子类</p>
</li>
<li>
<p>在 UML 类图设计中，<code>继承用一条空心三角箭头的实线表示，从子类指向父类</code></p>
</li>
<li>
<p>例如：猫类继承自动物类，即：猫是动物的一种，既有猫的特征也有动物的共性的关系。此时，实现由猫类出发，空心箭头指向动物类。</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131223646896.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>实现</h3>
<blockquote>
<p>实现和泛化相似，逻辑上也可以通过 “is a” 表示。</p>
</blockquote>
<ul>
<li>
<p>区别在于，实现关系通常是继承自一个抽象类或接口，表示类是接口或者抽象类所有特征和行为的实现， 而泛化关系通常继承一个具体类。</p>
</li>
<li>
<p>在 UML 类图设计中，<code>实现是用一条带空心三角箭头的虚线表示，从子类指向抽象父类或者接口</code></p>
</li>
<li>
<p>例如：鹦鹉具有飞翔的能力，自然也满足 “鹦鹉 is a 能飞”，即鹦鹉是能飞的这样的关系。此时虚线从鹦鹉类触发，空心箭头指向飞翔</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131223646896.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>依赖</h3>
<blockquote>
<p>依赖就是一个类 A 使用到了另一个类 B，即一个类的实现需要另一个类的协助。而这种使用关系是具有临时性的、相对弱的。他们之间是 “use a” 的关系。</p>
</blockquote>
<ul>
<li>
<p>通常，我们在类 A 中，把类 B 的对象作为方法参数时，方法中使用到了类 B 对象作为局部变量时，提现的就是两者之间的依赖关系。建议<strong>避免双向依赖</strong>。</p>
</li>
<li>
<p>在 UML 类图设计中，<code>依赖用一条带箭头的虚线表示，从类 A 指向依赖的 B 类</code></p>
</li>
<li>
<p>例如：某人需要过河，需要借用一条船，此时，人与船之间的关系就是依赖。即在人类的过河方法中，需要依赖船的对象作为方法的输入参数。此时，肩头有人类出发，指向船。</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131224112466.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>关联</h3>
<blockquote>
<p>关联体现的是两个类之间一种强依赖的关系，这种关系比依赖更强，一般是长期性的，是一种拥有的关系，它使一个类知道另一个类的属性和方法。他们之间能用 “has a” 表示。</p>
</blockquote>
<ul>
<li>
<p>通常，我们在类 A 中，把类 B 的对象作为类中成员时，体现的就是两者之间的关联关系，</p>
</li>
<li>
<p><strong>关联可以是单向、双向的</strong>。</p>
</li>
<li>
<p>在 UML 类图设计中</p>
<ul>
<li><code>双向关联，用一条实现或一条实线 + 两个普通箭头（或实心三角形箭头）表示</code></li>
<li><code>单项关联，用一条实线 + 一个普通箭头（或实心三角形箭头）表示</code></li>
<li><strong>无论单向还是双向，箭头均指向被拥有者</strong></li>
</ul>
</li>
</ul>
<p>例如：老师和学生是双向关联，一个老师会管理多名学生，一名学生也会有多名授课老师。学生和学号质检室单项关联，一个学生只能对应一个唯一的学号</p>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131224848610.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>聚合</h3>
<blockquote>
<p>聚合关系是一种强的关联关系，它体现的是整体与部分的关系，而且部分可以离开整体而单独存在，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。他们之间也是 “has a” 的关系。</p>
</blockquote>
<ul>
<li>
<p>关联和聚合在语法上无法区分，必须结合具体的逻辑场景</p>
</li>
<li>
<p>在 UML 类图设计中，<code>聚合关系以空心菱形加实线表示，菱形指向整体</code>。</p>
</li>
<li>
<p>例如：学校有很多老师，老师离开学校还可以正常运行</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131225151896.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>组合</h3>
<blockquote>
<p>组合也是部分和整体的关系，但是比聚合关系还要强的关系。此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，即要求普通的聚合关系中代表整体的对象，负责代表部分的对象的生命周期。它体现的是一种 “contain-a” 的关系</p>
</blockquote>
<ul>
<li>在 UML 类图设计中，<code>组合关系以实心菱形加实线表示，菱形指向整体</code></li>
<li>例如：公司和部门是整体和部分的关系，没有公司就不存在部门</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131225803263.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210131223646896.png" type="image/png"/>
    </item>
    <item>
      <title>Node安装与配置</title>
      <link>https://codemake.fun/notes/other/001.Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://codemake.fun/notes/other/001.Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://codemake.fun/rss.xml">Node安装与配置</source>
      <description>为了解决 node 各种版本不兼容的现象，可以通过 nvm 来安装和切换不同版本的 node</description>
      <category>环境配置</category>
      <pubDate>Wed, 29 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>nvm管理（推荐）</h2>
<blockquote>
<p><code>nvm</code> 是一个 <code>node</code> 的版本管理工具（全称：node.js version management）</p>
<p>为了解决 <code>node</code> 各种版本不兼容的现象，可以通过它安装和切换不同版本的 <code>node</code></p>
</blockquote>
<div class="hint-container caution">
<p class="hint-container-title">警告</p>
<p>请确保本地所有 node 版本已卸载</p>
</div>
<h3>下载</h3>
<blockquote>
<p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener noreferrer">【nvm-windows】</a>，选择自己需要的版本即可</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329112428655.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>安装</h3>
<ul>
<li>双击下载好的 <code>nvm-setup.exe</code> 文件，点击同意软件协议并点击下一步</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329140658851.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>选择 <code>nvm</code> 安装路径</li>
</ul>
<div class="hint-container caution">
<p class="hint-container-title">警告</p>
<p>不要安装到系统盘，可能会有权限或者存储空间不足的问题</p>
</div>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329140726897.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>选择 <code>node</code> 安装路径（这里其实是在设置的位置新建一个快捷方式，指向 <code>nvm</code> 安装目录中的当前使用的 <code>node</code> 版本目录）</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329140818463.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>
<p>点击下一步或 <code>Install</code> 或 <code>Finish</code>，直至安装完成</p>
</li>
<li>
<p>打开命令行，输入 <code>nvm</code> 命令，显示如下命令提示，标识安装成功</p>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329141343353.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>用法</h3>
<ul>
<li><code>nvm arch</code>：显示node是运行在 32位 还是 64位</li>
<li><code>nvm install &lt;version&gt; [arch]</code> ：安装node
<ul>
<li><code> version</code>：可以是特定版本，也可以是最新稳定版本 <code>latest</code></li>
<li>可选参数 <code>arch</code> 指定安装 32位 还是 64位 版本，默认是系统位数。可以添加 <code>--insecure</code> 绕过远程服务器的 <code>SSL</code></li>
</ul>
</li>
<li><code>nvm list [available]</code> ：显示已安装的列表
<ul>
<li>可选参数 <code>available</code>，显示可安装的所有版本。<code>list</code> 可简化为 <code>ls</code></li>
</ul>
</li>
<li><code>nvm on</code> ：开启 <code>node.js</code> 版本管理</li>
<li><code>nvm off</code> ：关闭 <code>node.js</code> 版本管理</li>
<li><code>nvm proxy [url]</code> ：设置下载代理
<ul>
<li>不加可选参数 <code>url</code>，显示当前代理</li>
<li>将 <code>url</code> 设置为 <code>none</code> 则移除代理</li>
</ul>
</li>
<li><code>nvm node_mirror [url]</code> ：设置node镜像
<ul>
<li>默认是 <a href="https://nodejs.org/dist/" target="_blank" rel="noopener noreferrer">https://nodejs.org/dist/</a> 如果不写url，则使用默认url</li>
<li>设置后可至安装目录 <code>settings.txt</code> 文件查看，也可直接在该文件操作</li>
</ul>
</li>
<li><code>nvm npm_mirror [url]</code> ：设置npm镜像
<ul>
<li>默认是 <a href="https://github.com/npm/cli/archive/" target="_blank" rel="noopener noreferrer">https://github.com/npm/cli/archive/</a> 如果不写 <code>url</code>，则使用默认 <code>url</code></li>
<li>设置后可至安装目录 <code>settings.txt</code> 文件查看，也可直接在该文件操作</li>
</ul>
</li>
<li><code>nvm uninstall &lt;version&gt;</code> ：卸载指定版本 <code>node</code></li>
<li><code>nvm use [version] [arch]</code> ：使用制定版本 <code>node</code>，可指定 32/64位</li>
<li><code>nvm root [path]</code> ：设置存储不同版本node的目录，如果未设置，默认使用当前目录</li>
<li><code>nvm version</code> ：显示 <code>nvm</code> 版本，<code>version</code> 可简化为 <code>v</code></li>
<li><code>nvm alias default &lt;version&gt;</code>：切换默认版本</li>
</ul>
<h3>更换源</h3>
<ul>
<li>用记事本打开 <code>nvm</code> 安装目录中的 <code>setting.txt</code> 文件，添加如下代码，保存并关闭，重启命令行</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>建议使用源1（淘宝源），速度会快一些</p>
</div>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 源1</span>
node_mirror: https://npm.taobao.org/mirrors/node/
npm_mirror: https://npm.taobao.org/mirrors/npm/

<span class="token comment"># 源2</span>
nvm npm_mirror https://npmmirror.com/mirrors/npm/
nvm node_mirror https://npmmirror.com/mirrors/node/
</code></pre></div><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329143354684.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>具体流程</h3>
<ul>
<li>使用 <code>nvm list available</code> 命令查看可安装的 <code>node</code> 版本</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329142544150.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<div class="hint-container caution">
<p class="hint-container-title">警告</p>
<p>一般选择 <code>LTS</code> 长期支持版，并且不建议安装最新版本</p>
</div>
<ul>
<li>使用 <code>nvm install 16.17.1</code> 命令安装指定版本 <code>node</code>
<ul>
<li>安装时可查看到相应的 <code>node</code> 和 <code>npm</code> 版本号
<ul>
<li>安装后会提示使用 <code>nvm use 16.17.1</code> 命令使用当前版本 <code>node</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329150335222.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>使用 <code>nvm use 16.17.1</code> 切换到指定 <code>node</code> 版本，切换后使用下列命令
<ul>
<li><code>node -v</code>：查看当前 <code>node</code> 版本</li>
<li><code>npm -v</code>：查看当前 <code>npm</code> 版本</li>
<li><code>nvm list</code>：查看已安装的 <code>node</code> 版本，前标星号的为当前使用版本</li>
</ul>
</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329150614040.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>如果需要更换 <code>node</code> 版本，重复流程步骤对应使用不同的版本号即可</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329151553963.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>直接安装（不推荐）</h2>
<h3>下载</h3>
<blockquote>
<p>下载地址：<a href="https://nodejs.org/en/download" target="_blank" rel="noopener noreferrer">【最新版本】</a>   <a href="https://nodejs.org/en/download/releases" target="_blank" rel="noopener noreferrer">【历史版本】</a>  <a href="https://nodejs.org/dist/" target="_blank" rel="noopener noreferrer">【所有下载选项】</a></p>
<p>这里以文章书写时间最新版本 <strong>18.15.0</strong> 为例</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329153858564.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>安装</h3>
<ul>
<li>双击下载好的 <code>node-v18.15.0-x64.msi</code> 文件</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329154338730.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329154403051.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>选择安装路径，然后一直下一步直至安装完成即可，中间不需要勾选别的选项</li>
</ul>
<div class="hint-container caution">
<p class="hint-container-title">警告</p>
<p>不要安装到系统盘，可能会有权限或者存储空间不足的问题</p>
</div>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329154837642.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>打开命令行，使用 <code>node -v</code> 命令，显示如下表示安装成功</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329155115044.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>配置</h3>
<ul>
<li>在 <code>node</code> 安装目录【D:\Develop\nodejs】下创建两个文件夹【node_global】及【node_cache】</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329155446643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>打开命令提示符，分别执行下面两行命令（无返回结果，执行时无报错即为成功）</li>
</ul>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 设置全局模块存放路径，以后安装的全局模块都会被放到此目录中</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">"D:\Develop<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_global"</span>

<span class="token comment"># 设置缓存文件夹</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"D:\Develop<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_cache"</span>
</code></pre></div><ul>
<li>设置环境变量，关闭 <code>cmd</code> 窗口，<code>右键我的电脑 - 属性 - 高级系统设置 - 高级 - 环境变量</code></li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329160205342.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329160548075.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】，点击确定</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329160817338.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329160921429.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>换源</h3>
<blockquote>
<p>使用 <a href="https://www.npmjs.com/package/nrm" target="_blank" rel="noopener noreferrer">【 nrm 】</a> 管理 <code>npm</code> 源</p>
</blockquote>
<ul>
<li>
<p>使用 <code>npm install -g nrm</code> 命令全局安装 <code>nrm</code></p>
</li>
<li>
<p>使用 <code>nrm ls</code> 命令查看当前可用源</p>
</li>
<li>
<p>使用 <code>nrm use taobao</code> 命令切换为淘宝源，<strong>不建议使用 <code>cnpm</code>，可能会有未知错误</strong></p>
</li>
</ul>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>  npm </code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230329112428655.png" type="image/png"/>
    </item>
    <item>
      <title>字符编码</title>
      <link>https://codemake.fun/notes/other/100.encode.html</link>
      <guid>https://codemake.fun/notes/other/100.encode.html</guid>
      <source url="https://codemake.fun/rss.xml">字符编码</source>
      <description>码点

某个字符规定对应的数值

码元

Javascript 字符串的 length 属性返回的是 码元



对于 UTF-16 来说，一个码元是 16bit（两个字节）


对于 UTF-32 来说，一个码元是 32bit（四个字节）


JavaScript 内部，字符以 UTF-16（字符用两个字节或四个字节表示的格式储存）

码点范围介于 ...</description>
      <category>other</category>
      <pubDate>Mon, 20 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>码点</h2>
<blockquote>
<p>某个字符规定对应的数值</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 根据字符获取码点</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'a'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 97</span>

<span class="token comment">// 根据码点获取字符</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// a</span>
</code></pre></div><h2>码元</h2>
<blockquote>
<p>Javascript 字符串的 length 属性返回的是 码元</p>
</blockquote>
<ul>
<li>
<p>对于 UTF-16 来说，一个码元是 16bit（两个字节）</p>
</li>
<li>
<p>对于 UTF-32 来说，一个码元是 32bit（四个字节）</p>
</li>
<li>
<p>JavaScript 内部，字符以 UTF-16（字符用两个字节或四个字节表示的格式储存）</p>
<ul>
<li>码点范围介于 <code> 0-65535</code> 的字符，两个字节</li>
<li>Unicode 码点大于 <code>65535</code> 的字符，四个字节</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>codePointAt</code> 与 <code>charCodeAt</code> 接受的索引值都是根据码元<br>
<code>codePointAt</code> 函数匹配规则是码点，当它匹配到当前索引的码元后会识别当前的码元是否和后面的码元能否构成一个码点，如果是<br>
一个码点，则返回这两个码元的码点，如果不能构成一个码点，就按照当前的码元返回码点</p>
<p>ES6 考虑到了这个问题，其原型上实现了 <code>Symbol.iterator</code>，使得其可以使用 <code>for of</code> 来遍历其值</p>
</blockquote>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220103844034.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>ASCLL 码</h2>
<blockquote>
<p>美国标准信息交换代码啊</p>
</blockquote>
<ul>
<li>ASCII 码占用一个字节，一个字节为 8 个 bit 位</li>
<li>ASCI 码第一位始终是 0，那么实际可以表示的状态是 2^7=128 种字符</li>
<li>EASCLL 码，为了适应更多字符（128-255），不常用</li>
</ul>
<h3>码表</h3>
<p>| <strong>ASCII 值</strong> | <strong>控制字符</strong> | <strong>ASCII 值</strong> | <strong>控制字符</strong> | <strong>ASCII 值</strong> | <strong>控制字符</strong> | <strong>ASCII 值</strong> | <strong>控制字符</strong> |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220103844034.png" type="image/png"/>
    </item>
    <item>
      <title>FileDownload successCallback 不触发</title>
      <link>https://codemake.fun/fe/javascript/question/02.fileDownload%20successCallback%20%E4%B8%8D%E8%A7%A6%E5%8F%91.html</link>
      <guid>https://codemake.fun/fe/javascript/question/02.fileDownload%20successCallback%20%E4%B8%8D%E8%A7%A6%E5%8F%91.html</guid>
      <source url="https://codemake.fun/rss.xml">FileDownload successCallback 不触发</source>
      <description>Java响应中需要添加以下代码</description>
      <category>JavaScript</category>
      <pubDate>Fri, 17 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<br>
<p><strong>Java响应中需要添加以下代码</strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span><span class="token string">"fileDownload=true;path=/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>pointer-events</title>
      <link>https://codemake.fun/fe/css/knowledge/08.pointer-events.html</link>
      <guid>https://codemake.fun/fe/css/knowledge/08.pointer-events.html</guid>
      <source url="https://codemake.fun/rss.xml">pointer-events</source>
      <description>【文档地址】 【参考文章】

常用值

实例
穿透遮挡物

当点击 span 元素时，并不会触发 span 元素的点击事件，而是穿透到下方的 input 元素上并使其聚焦


防止连续提交

为按钮设置  pointer-events: none 防止连续提交</description>
      <category>css</category>
      <pubDate>Sat, 25 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/pointer-events" target="_blank" rel="noopener noreferrer">【文档地址】</a> <a href="https://juejin.cn/post/7171765872900440078" target="_blank" rel="noopener noreferrer">【参考文章】</a></p>
</blockquote>
<h2>常用值</h2>
<p>| 值     | 描述                                                         |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>数据类型</title>
      <link>https://codemake.fun/fe/javascript/knowledge/01.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/01.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</guid>
      <source url="https://codemake.fun/rss.xml">数据类型</source>
      <description>数据类型

分类

基本数据类型：

Undefined、
Null、
Boolean、
Number、
BigInt
String、
Symbol


复杂数据类型：

Object





Undefined 类型

Undefined 类型只有一个值，即 undefined
使用 var 声明变量但未初始化时，值为 undefined
对未声明...</description>
      <category>JavaScript</category>
      <pubDate>Tue, 21 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>数据类型</h2>
<ul>
<li>分类
<ul>
<li>基本数据类型：
<ul>
<li><code>Undefined</code>、</li>
<li><code>Null</code>、</li>
<li><code>Boolean</code>、</li>
<li><code>Number</code>、</li>
<li><code>BigInt</code></li>
<li><code>String</code>、</li>
<li><code>Symbol</code></li>
</ul>
</li>
<li>复杂数据类型：
<ul>
<li><code>Object</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>Undefined 类型</h3>
<ul>
<li>Undefined 类型只有一个值，即 undefined</li>
<li>使用 <code>var</code> 声明变量但未初始化时，值为 undefined</li>
<li>对未声明的变量 <code>typeof</code> 时，也会返回 undefined</li>
<li>相等性检查 == 中，undefined 只与 null 相等</li>
</ul>
<h3>Null 类型</h3>
<ul>
<li>Null 类型只有一个值，即 null</li>
<li>从逻辑角度看，null 表示空对象指针</li>
<li>console.log(typeof null); // object</li>
<li>undefined 值派生自 null 值
<ul>
<li>console.log(null==undefined); // true</li>
</ul>
</li>
</ul>
<div style="color:#f00">**undefined** 和 **null** 在相等性检查 `==` 中不会进行任何类型转换，除非你非常清楚自己在做什么，否则永远不要使用 <code>&gt;= &gt; &lt; &lt;=</code> 去比较一个可能为 `null/undefined` 的变量。对于取值可能是 `null/undefined` 的变量，请按需要分别检查它的取值情况</div>
<h3>Boolean 类型</h3>
<ul>
<li>该类型只有两个值： <code>true</code>、<code>false</code>，并且区分大小写</li>
<li>一个值要转化为 Boolean 值，可以调用 Boolean()</li>
</ul>
<h4>其他类型转化为布尔值的规则</h4>
<p>| 数据类型  | 转化为 true 的值           | 转化为 false 的值 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>New 命令原理</title>
      <link>https://codemake.fun/fe/javascript/knowledge/05.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/05.new%E5%91%BD%E4%BB%A4%E5%8E%9F%E7%90%86.html</guid>
      <source url="https://codemake.fun/rss.xml">New 命令原理</source>
      <description>运行过程

使用 new 命令时，它后面的函数依次执行下面的步骤：


创建一个空对象，作为将要返回的实例对象。
将这个空对象的原型，指向构造函数的 prototype 属性。
将这个空对象赋值给函数内部的 this 关键字。
开始执行构造函数内部的代码。
如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实例对象。

代码实现</description>
      <category>JavaScript</category>
      <pubDate>Tue, 22 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>运行过程</h2>
<blockquote>
<p>使用 new 命令时，它后面的函数依次执行下面的步骤：</p>
</blockquote>
<ol>
<li>创建一个空对象，作为将要返回的实例对象。</li>
<li>将这个空对象的原型，指向构造函数的 prototype 属性。</li>
<li>将这个空对象赋值给函数内部的 this 关键字。</li>
<li>开始执行构造函数内部的代码。</li>
<li>如果构造函数内有返回值且为对象类型，则返回该对象，否则返回上面创建的实例对象。</li>
</ol>
<h2>代码实现</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 构造函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token comment">// 自定义_new</span>
<span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将 arguments 对象转为数组</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
  <span class="token comment">// 取出构造函数</span>
  <span class="token keyword">var</span> constructor <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 创建一个空对象，继承构造函数的 prototype 属性</span>
  <span class="token keyword">var</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 执行构造函数，并将context对象赋值给函数内部的this</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 如果返回结果是对象，就直接返回，否则返回 context 对象</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> result <span class="token operator">:</span> context
<span class="token punctuation">}</span>

<span class="token comment">// 自定义_new2</span>
<span class="token keyword">function</span> <span class="token function">_new2</span><span class="token punctuation">(</span><span class="token comment">/* 构造函数 */</span> constructor<span class="token punctuation">,</span> <span class="token comment">/* 构造函数参数 */</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个空对象，并继承构造函数的 prototype 属性</span>
  <span class="token keyword">var</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 执行构造函数，并将context对象赋值给函数内部的this</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
  <span class="token comment">// 如果返回结果是对象，就直接返回，否则返回 context 对象</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> result <span class="token operator">:</span> context
  <span class="token comment">// （当用户在构造函数内部自定义返回对象的话则使用该对象，否则返回context）</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过自定义_new 返回实例</span>
<span class="token keyword">var</span> actor <span class="token operator">=</span> <span class="token function">_new</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>actor<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 张三</span>

<span class="token comment">// 通过自定义_new2 返回实例</span>
<span class="token keyword">var</span> actor2 <span class="token operator">=</span> <span class="token function">_new2</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>actor2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 李四</span>

<span class="token comment">// 通过new命令 返回实例</span>
<span class="token keyword">var</span> actor3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>actor3<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 王五</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>盒模型</title>
      <link>https://codemake.fun/fe/css/knowledge/01.%E7%9B%92%E6%A8%A1%E5%9E%8B.html</link>
      <guid>https://codemake.fun/fe/css/knowledge/01.%E7%9B%92%E6%A8%A1%E5%9E%8B.html</guid>
      <source url="https://codemake.fun/rss.xml">盒模型</source>
      <description>背景

场景：假如项目布局使用的是自适应的布局方式，div 给出的宽度是百分比的形式，即占窗口宽度的 100%，但边框border和内边距padding是用像素来表示的，此时就会造成一个问题是 div 总宽度超过窗口宽度。为了避免这种问题，可以使用属性box-sizing:border-box来把 标准盒模型 变成 代替(IE)盒模型 ，从而使 div...</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>背景</h2>
<blockquote>
<p>场景：假如项目布局使用的是<strong>自适应</strong>的布局方式，div 给出的宽度是<strong>百分比</strong>的形式，即占窗口宽度的 100%，但边框<code>border</code>和内边距<code>padding</code>是用像素来表示的，此时就会造成一个问题是 div 总宽度超过窗口宽度。为了避免这种问题，可以使用属性<code>box-sizing:border-box</code>来把 <strong>标准盒模型</strong> 变成 <strong>代替(IE)盒模型</strong> ，从而使 div 的总宽度依然是 100%</p>
</blockquote>
<!-- more -->
<h2>什么是 CSS 盒模型?</h2>
<p>页面布局中，一个元素的外边距（margin）、 边框（border）、内边距（padding）、内容（content）组成一个盒模型。盒模型可分为<strong>标准盒模型</strong> 和 <strong>代替（IE）盒模型</strong>。</p>
<h2>标准盒模型</h2>
<p>在标准模型中，如果你给盒设置 <code>width</code> 和 <code>height</code>，实际设置的是内容区域( <em>content box</em>)的宽高。 <code>padding</code> 和 <code>border</code> 再加上设置的宽高一起决定整个盒子的大小。</p>
<p><strong>示例：</strong></p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 5px solid black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果使用标准模型，元素总宽度 = 160px （100+25+25+5+5），总高度 = 110px (50 + 25 + 25 + 5 + 5)，即内容区域<code>content box</code>加 <code>padding</code> 和 <code>border</code> 。</p>
<blockquote>
<p><strong>注</strong>: margin 不计入实际大小 —— 当然，它会影响盒子在页面所占空间，但是影响的是盒子外部空间。</p>
</blockquote>
<h2>代替（IE）盒模型</h2>
<p>你可能会认为盒子的大小还要加上边框和内边距，这样很麻烦。 因为这个原因，css 还有一个替代盒模型。使用这个模型，所有宽度都是可见宽度，所以内容宽度是该宽度减去边框和填充部分。使用上面相同的样式得到总宽高是 width = 100px, height = 50px。</p>
<p>默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 <code>box-sizing: border-box</code> 来实现。 这样就可以告诉浏览器使用 <code>border-box</code> 来定义区域，从而设定您想要的大小。</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>box-sizing 属性</h2>
<p>CSS 中的 <strong><code>box-sizing</code></strong> 属性用于告诉浏览器如何计算一个元素是总宽度和总高度</p>
<iframe class="interactive" frameborder="0" height="390" src="https://interactive-examples.mdn.mozilla.net/pages/css/box-sizing.html" title="MDN Web Docs Interactive Example" width="100%"></iframe>
<p>在 <a href="https://developer.mozilla.org/zh-CN/docs/CSS/Box_model" target="_blank" rel="noopener noreferrer">CSS 盒子模型</a> 的默认定义里，你对一个元素所设置的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noopener noreferrer"><code>width</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noopener noreferrer"><code>height</code></a> 只会应用到这个元素的内容区。如果这个元素有任何的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border" target="_blank" rel="noopener noreferrer"><code>border</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding" target="_blank" rel="noopener noreferrer"><code>padding</code></a> ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。</p>
<p>box-sizing 属性可以被用来调整这些表现:</p>
<ul>
<li>
<p><code>content-box</code> 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</p>
<ul>
<li>
<p>尺寸计算公式：</p>
<p><code>width</code> = 内容的宽度</p>
<p><code>height</code> = 内容的高度</p>
</li>
</ul>
</li>
<li>
<p><code>border-box</code> 告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</p>
<ul>
<li>
<p>尺寸计算公式：</p>
<p><em><code>width</code> = border + padding + 内容的宽度</em></p>
<p><em><code>height</code> = border + padding + 内容的高度</em></p>
</li>
</ul>
</li>
</ul>
<p>来源：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Flex 布局</title>
      <link>https://codemake.fun/fe/css/knowledge/02.Flex%20%E5%B8%83%E5%B1%80.html</link>
      <guid>https://codemake.fun/fe/css/knowledge/02.Flex%20%E5%B8%83%E5%B1%80.html</guid>
      <source url="https://codemake.fun/rss.xml">Flex 布局</source>
      <description>简介

display: flex： 意为&amp;quot;弹性布局&amp;quot;，用来为盒状模型提供最大的灵活性


display: inline-flex： 创建一个弹性容器，行为类似于 inline-block 元素。它会跟其他行内元素一起流式排列，但不会自动增长到 100%的 宽度。内部的弹性子元素跟使用 display: flex 创建的 Flexbox 里的弹性子元...</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>简介</h2>
<blockquote>
<p><code>display: flex</code>： 意为"弹性布局"，用来为盒状模型提供最大的灵活性</p>
</blockquote>
<blockquote>
<p><code>display: inline-flex</code>： 创建一个弹性容器，行为类似于 <code>inline-block</code> 元素。它会跟其他行内元素一起流式排列，但不会自动增长到 100%的 宽度。内部的弹性子元素跟使用 display: flex 创建的 Flexbox 里的弹性子元素行为 一样。在实际开发时，很少用到 display: inline-flex。</p>
</blockquote>
<h3>特性</h3>
<ul>
<li>消除块级元素特性（之后所有设置的 <code>display: block;</code> 都是无效的）</li>
<li>设为 <code>flex</code> 布局以后，子元素的 <code>float</code> 、<code>clear</code> 和 <code>vertical-align</code> 等属性将失效</li>
<li>采用 <code>flex</code> 布局的元素，称为 flex 容器，简称 <strong>容器</strong>，所有子元素自动成为容器成员，称为 flex 项目，简称 <strong>项目</strong></li>
<li>容器默认存在两根轴，水平的主轴和与其垂直的交叉轴</li>
</ul>
<h3>空间</h3>
<ul>
<li>主轴的开始位置（与边框的交叉点）叫做 <code>main start</code>，结束位置叫做 <code>main end</code></li>
<li>交叉轴的开始位置叫做 <code>cross start</code>，结束位置叫做 <code>cross end</code></li>
<li>项目默认沿主轴排列</li>
<li>单个项目占据的主轴空间叫做 <code>main size</code>，占据的交叉轴空间叫做 <code>cross size</code></li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/20210426210125.png" alt="bg2015071004" tabindex="0" loading="lazy"><figcaption>bg2015071004</figcaption></figure>
<h2>容器属性</h2>
<h3>flex-direction</h3>
<ul>
<li>定义主轴的方向（即项目的排列方向）
<ul>
<li><code>row</code>（默认值）：主轴水平方向，起点在左端</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li>
</ul>
</li>
</ul>
<h3>flex-wrap</h3>
<ul>
<li>定义如果一条轴线排不下，如何换行（项目默认都排在一条线轴线上）
<ul>
<li><code>nowrap</code>（默认）：不换行（子元素按比例平均分配）</li>
<li><code>wrap</code>：换行，第一行在上方</li>
<li><code>swrap-reverse</code>：换行，第一行在下方(只是行的顺序变化，元素在行内的顺序不变)</li>
</ul>
</li>
</ul>
<h3>flex-flow</h3>
<ul>
<li><code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式
<ul>
<li>默认值为 <code>row nowrap</code></li>
<li>写法：<code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code></li>
</ul>
</li>
</ul>
<h3>justify-content</h3>
<ul>
<li>定义项目在主轴上的对齐方式
<ul>
<li><code>flex-start</code>（默认值）：向主轴起点方向对齐</li>
<li><code>flex-end</code>：向主轴终点方向对齐</li>
<li><code>center</code>： 向主轴居中对齐</li>
<li><code>space-between</code>：由主轴两端对齐，项目之间的间隔都相等</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li>
</ul>
</li>
</ul>
<h3>align-items</h3>
<ul>
<li>定义项目在交叉轴上如何对齐
<ul>
<li><code>flex-start</code>：向交叉轴起点方向对齐</li>
<li><code>flex-end</code>：向交叉轴终点方向对齐</li>
<li><code>center</code>：向交叉轴的中点对齐</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li>
</ul>
</li>
</ul>
<h3>align-content</h3>
<ul>
<li>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用
<ul>
<li><code>flex-start</code>：向交叉轴起点方向对齐</li>
<li><code>flex-end</code>：向交叉轴终点方向对齐</li>
<li><code>center</code>：向交叉轴的中点对齐</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴</li>
</ul>
</li>
</ul>
<h2>项目属性</h2>
<h3>Order</h3>
<ul>
<li>定义项目的排列顺序。数值越小，排列越靠前</li>
<li>默认为0（可为负值）</li>
</ul>
<h3>flex-grow</h3>
<ul>
<li>定义项目的放大比例
<ul>
<li>默认为 <code>0</code>，即如果存在剩余空间，也不放大</li>
<li>如果所有项目的 <code>flex-grow</code> 属性都为 <code>1</code>，则它们将等分<strong>剩余空间</strong>（如果有的话）</li>
<li>如果一个项目的 <code>flex-grow</code> 属性为 <code>2</code>，其他项目都为 <code>1</code>，则前者占据的<strong>剩余空间</strong>将比其他项多一倍</li>
</ul>
</li>
</ul>
<h3>flex-shrin</h3>
<ul>
<li>定义了项目的缩小比例
<ul>
<li>默认为 <code>1</code>，即如果空间不足，该项目将缩小（无负值）</li>
<li>如果所有项目的 <code>flex-shrink</code> 属性都为 <code>1</code>，当空间不足时，都将等比例缩小</li>
<li>如果一个项目的 <code>flex-shrink</code> 属性为 <code>0</code>，其他项目都为 <code>1</code>，则空间不足时，前者不缩小</li>
</ul>
</li>
</ul>
<h3>flex-basis</h3>
<ul>
<li>定义了在分配多余空间之前，项目占据的主轴空间（main size）
<ul>
<li>浏览器根据这个属性，计算主轴是否有多余空间</li>
<li>默认值为 <code>auto</code>，即项目的本来大小</li>
<li>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值（比如350px），则项目将占据固定空间</li>
</ul>
</li>
</ul>
<h3>flex</h3>
<ul>
<li>是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写
<ul>
<li>默认值为 <code>0 1 auto</code>，后两个属性可选</li>
<li>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code></li>
<li>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</li>
</ul>
</li>
</ul>
<h3>align-self</h3>
<ul>
<li>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性
<ul>
<li>默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code></li>
<li>写法：<code>align-self: auto | flex-start | flex-end | center | baseline | stretch</code></li>
<li>该属性可能取 6 个值，除了 <code>auto</code>，其他都与 <code>align-items</code> 属性完全一致</li>
</ul>
</li>
</ul>
<br>
<h2>其他布局方式</h2>
<h3>Flex 布局教程：语法篇</h3>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<h3>CSS Grid 网格布局教程</h3>
<p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p>
<h3>只要一行代码，实现五种 CSS 经典布局</h3>
<p><a href="http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html</a></p>
<ul>
<li>空间居中布局
<blockquote>
<p>不管容器的大小，项目总是占据中心点</p>
</blockquote>
</li>
<li>并列式布局
<blockquote>
<p>多个项目并列，如果宽度不够，放不下的项目就自动折行</p>
</blockquote>
</li>
<li>两栏式布局
<blockquote>
<p>一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄</p>
</blockquote>
</li>
<li>三明治布局
<blockquote>
<p>页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p>
</blockquote>
</li>
<li>圣杯布局
<blockquote>
<p>最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>参考</p>
</blockquote>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener noreferrer">Flex 布局教程：语法篇</a></li>
<li><a href="https://www.ituring.com.cn/book/2583" target="_blank" rel="noopener noreferrer">《深入解析CSS》</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/20210426210125.png" type="image/png"/>
    </item>
    <item>
      <title>权重优先级</title>
      <link>https://codemake.fun/fe/css/knowledge/03.%E6%9D%83%E9%87%8D%E4%BC%98%E5%85%88%E7%BA%A7.html</link>
      <guid>https://codemake.fun/fe/css/knowledge/03.%E6%9D%83%E9%87%8D%E4%BC%98%E5%85%88%E7%BA%A7.html</guid>
      <source url="https://codemake.fun/rss.xml">权重优先级</source>
      <description>从 CSS 代码存放位置看权重优先级：

内嵌样式 &amp;gt; 内部样式表 &amp;gt; 外联样式表


从样式选择器看权重优先级：

important &amp;gt; 内嵌样式 &amp;gt; ID &amp;gt; 类 | 伪类 | 属性选择 &amp;gt; 标签 | 伪对象 &amp;gt; 继承 &amp;gt; 通配符。

important 的权重为 1,0,0,0
ID 的权重为 0,1,0,0
类的权重为 0,0,1,0
伪类的...</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<ul>
<li>从 CSS 代码存放位置看权重优先级：
<ul>
<li>内嵌样式 &gt; 内部样式表 &gt; 外联样式表</li>
</ul>
</li>
<li>从样式选择器看权重优先级：
<ul>
<li>important &gt; 内嵌样式 &gt; ID &gt; 类 | 伪类 | 属性选择 &gt; 标签 | 伪对象 &gt; 继承 &gt; 通配符。
<ul>
<li>important 的权重为 1,0,0,0</li>
<li>ID 的权重为 0,1,0,0</li>
<li>类的权重为 0,0,1,0</li>
<li>伪类的权重为 0,0,1,0</li>
<li>属性的权重为 0,0,1,0</li>
<li>标签的权重为 0,0,0,1</li>
<li>伪对象的权重为 0,0,0,1</li>
<li>通配符的权重为 0,0,0,0</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>过渡</title>
      <link>https://codemake.fun/fe/css/knowledge/04.%E8%BF%87%E6%B8%A1.html</link>
      <guid>https://codemake.fun/fe/css/knowledge/04.%E8%BF%87%E6%B8%A1.html</guid>
      <source url="https://codemake.fun/rss.xml">过渡</source>
      <description>html 结构

先给元素设置 transition 过渡，指定样式和时间，这里设置 all 全部样式都采用 0.3s 的过渡

鼠标经过元素测试效果


  宽度过渡
  
   1
背景色过渡
  
   1
按贝塞尔曲线设置的过渡
  
   123
# 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)通过调整贝塞尔曲线可以设置出多...</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/*  关键字：过渡属性  所需时间   速度曲线   何时开始  */</span>
<span class="token selector">.transition</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> width 5s liner 5s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p>html 结构</p>
</blockquote>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>先给元素设置 transition 过渡，指定样式和时间，这里设置 all 全部样式都采用 0.3s 的过渡</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.box1 &gt; div</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 给元素所有变化都添加过渡动画, 也可以指定唯一的过渡样式属性*/</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p>鼠标经过元素测试效果</p>
</blockquote>
<div class="box1">
  <b>宽度过渡</b>
  <div class="div1"></div>
  <div class="language-css"><pre class="language-css"><code><span class="token selector">.div1:hover</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre></div>
<p><b>背景色过渡</b></p>
  <div class="div2"></div>
  <div class="language-css"><pre class="language-css"><code><span class="token selector">.div2:hover</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre></div>
<p><b>按贝塞尔曲线设置的过渡</b></p>
  <div class="div3"></div>
  <div class="language-css"><pre class="language-css"><code><span class="token comment">/*贝塞尔曲线过渡*/</span>
<span class="token selector">.div3</span><span class="token punctuation">{</span><span class="token property">transition-timing-function</span><span class="token punctuation">:</span> <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>.39<span class="token punctuation">,</span>.62<span class="token punctuation">,</span>.74<span class="token punctuation">,</span>1.39<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token selector">.div3:hover</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-25px<span class="token punctuation">,</span> -25px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre></div>
<h3><a href="#贝塞尔曲线-cubic-bezier-x1-y1-x2-y2" class="header-anchor">#</a> 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</h3><p>通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等
X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。
如：直线linear，即cubic-bezier(0,0,1,1)</p><p>贝塞尔曲线在线工具：<a href="https://cubic-bezier.com/#.17,.67,.83,.67" target="_blank" rel="noopener noreferrer">https://cubic-bezier.com/#.17,.67,.83,.67<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></p>
</div>
<p>参考：<a href="https://www.w3school.com.cn/css3/index.asp" target="_blank" rel="noopener noreferrer">https://www.w3school.com.cn/css3/index.asp<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></p>
]]></content:encoded>
    </item>
    <item>
      <title>动画</title>
      <link>https://codemake.fun/fe/css/knowledge/05.%E5%8A%A8%E7%94%BB.html</link>
      <guid>https://codemake.fun/fe/css/knowledge/05.%E5%8A%A8%E7%94%BB.html</guid>
      <source url="https://codemake.fun/rss.xml">动画</source>
      <description>属性

transition-property：要设置动画的所有属性（多个属性逗号隔开，全部属性使用 all）
transition-duration：动画持续的时间，单位为秒 s 或者毫秒 ms
transition-timing-function：时间函数，表示动画进程在时间上的分布，默认值 ease

linear、ease、ease-in、ea...</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>属性</h2>
<ul>
<li><code>transition-property</code>：要设置动画的所有属性（多个属性逗号隔开，全部属性使用 <code>all</code>）</li>
<li><code>transition-duration</code>：动画持续的时间，单位为秒 <code>s</code> 或者毫秒 <code>ms</code></li>
<li><code>transition-timing-function</code>：时间函数，表示动画进程在时间上的分布，默认值 <code>ease</code>
<ul>
<li><code>linear</code>、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code> 和 <code>ease-in-out</code></li>
</ul>
</li>
<li><code>transition-delay</code>：动画<strong>开始前</strong>的延迟时间，单位为秒 <code>s</code> 或者毫秒 <code>ms</code></li>
</ul>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">#anim</span> <span class="token punctuation">{</span>
  <span class="token property">transition-property</span><span class="token punctuation">:</span> background-color<span class="token punctuation">,</span> color<span class="token punctuation">,</span> font-size<span class="token punctuation">;</span>
  <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">;</span>
  <span class="token property">transition-duration</span><span class="token punctuation">:</span> 3s<span class="token punctuation">;</span>
  <span class="token property">transition-delay</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>关键帧动画</h2>
<blockquote>
<p>通过 CSS 提供的 <code>@keyframes</code> 规则整合多个简单的动画</p>
</blockquote>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/*  关键字    动画名称   所需时间 速度曲线 何时开始  播放次数    下周期逆向  */</span>
<span class="token property">animation</span><span class="token punctuation">:</span> myAnimation   2s    linear   5s    infinite   alternate

<span class="token comment">/*  动画设置  */</span>
<span class="token atrule"><span class="token rule">@keyframes</span> myAnimation</span>
<span class="token punctuation">{</span>
        <span class="token selector">from</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token selector">to</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*  或者  */</span>
<span class="token atrule"><span class="token rule">@keyframes</span> myAnimation</span>
<span class="token punctuation">{</span>
          <span class="token selector">0%</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token selector">100%</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>贝塞尔曲线</h2>
<blockquote>
<p><strong>贝塞尔曲线可以使动画『超出』其原本的范围</strong></p>
<p>cubic-bezier(x1,y1,x2,y2) 通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)</p>
<p><a href="https://cubic-bezier.com" target="_blank" rel="noopener noreferrer">【贝塞尔曲线在线工具】</a></p>
</blockquote>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.test</span> <span class="token punctuation">{</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> left 5s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>.5<span class="token punctuation">,</span> -1<span class="token punctuation">,</span> .5<span class="token punctuation">,</span> 2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>阶跃函数</h2>
<blockquote>
<p>让动画分段进行</p>
</blockquote>
<ul>
<li>语法：<code>steps(number of steps[, start/end])</code>
<ul>
<li><code>number of steps</code>：表示需要拆分为多少段</li>
<li><code>start/end</code>
<ul>
<li><code>start</code> 表示在动画开始时，立即开始第一段的动画</li>
<li><code>end</code>：表示改变不应该在最开始的时候发生，而是发生在每一段的最后时刻</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">#test.animate</span>  <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-90%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> transform 9s <span class="token function">steps</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Stylus 混入(Mixins)</title>
      <link>https://codemake.fun/fe/css/knowledge/06.Stylus%20%E6%B7%B7%E5%85%A5(Mixins).html</link>
      <guid>https://codemake.fun/fe/css/knowledge/06.Stylus%20%E6%B7%B7%E5%85%A5(Mixins).html</guid>
      <source url="https://codemake.fun/rss.xml">Stylus 混入(Mixins)</source>
      <description>混入(Mixins)
混入和函数定义方法一致，但是应用却大相径庭。
一个简单的混入应用，定义一个超出显示省略号的ellipsis()方法，在需要用到的地方只需插入这个方法，其样式会扩展并复制到选择器中。
下面有定义的border-radius(n)方法，其却作为一个mixin（如，作为状态调用，而非表达式）调用。
当border-radius()选择器...</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>混入(Mixins)</h2>
<p>混入和函数定义方法一致，但是应用却大相径庭。</p>
<p>一个简单的混入应用，定义一个超出显示省略号的<code>ellipsis()</code>方法，在需要用到的地方只需插入这个方法，其样式会扩展并复制到选择器中。</p>
<div class="language-stylus" data-ext="styl" data-title="styl"><pre class="language-stylus"><code><span class="token func"><span class="token function">ellipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
  <span class="token property-declaration"><span class="token property">overflow</span> hidden</span>
  <span class="token property-declaration"><span class="token property">white-space</span> nowrap</span>
  <span class="token property-declaration"><span class="token property">text-overflow</span> ellipsis</span>
</code></pre></div><div class="language-stylus" data-ext="styl" data-title="styl"><pre class="language-stylus"><code><span class="token selector">p</span>
  <span class="token func"><span class="token function">ellipsis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
</code></pre></div><p>下面有定义的<code>border-radius(n)</code>方法，其却作为一个<em>mixin</em>（如，作为状态调用，而非表达式）调用。</p>
<p>当<code>border-radius()</code>选择器中调用时候，属性会被扩展并复制在选择器中。</p>
<div class="language-stylus" data-ext="styl" data-title="styl"><pre class="language-stylus"><code><span class="token func"><span class="token function">border-radius</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
  <span class="token property-declaration"><span class="token property">-webkit-border-radius</span> n</span>
  <span class="token property-declaration"><span class="token property">-moz-border-radius</span> n</span>
  <span class="token property-declaration"><span class="token property">border-radius</span> n</span>

<span class="token selector">form input[type=button]</span>
  <span class="token func"><span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token unit">px</span><span class="token punctuation">)</span></span>
</code></pre></div><p>编译成：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">form input[type=button]</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用混入书写，你可以完全忽略括号，提供梦幻般私有属性的支持。</p>
<div class="language-stylus" data-ext="styl" data-title="styl"><pre class="language-stylus"><code><span class="token func"><span class="token function">border-radius</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
  <span class="token property-declaration"><span class="token property">-webkit-border-radius</span> n</span>
  <span class="token property-declaration"><span class="token property">-moz-border-radius</span> n</span>
  <span class="token property-declaration"><span class="token property">border-radius</span> n</span>

<span class="token selector">form input[type=button]</span>
  <span class="token property-declaration"><span class="token property">border-radius</span> <span class="token number">5</span><span class="token unit">px</span></span>
</code></pre></div><p>注意到我们混合书写中的<code>border-radius</code>当作了属性，而不是一个递归函数调用。</p>
<p>更进一步，我们可以利用<code>arguments</code>这个局部变量，传递可以包含多值的表达式。</p>
<div class="language-stylus" data-ext="styl" data-title="styl"><pre class="language-stylus"><code><span class="token func"><span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
  <span class="token property-declaration"><span class="token property">-webkit-border-radius</span> arguments</span>
  <span class="token property-declaration"><span class="token property">-moz-border-radius</span> arguments</span>
  <span class="token property-declaration"><span class="token property">border-radius</span> arguments</span>
</code></pre></div><p>现在，我们可以像这样子传值：<code>border-radius 1px 2px / 3px 4px</code>!</p>
<p>另外一个很赞的应用是特定的私有前缀支持——例如IE浏览器的透明度：</p>
<div class="language-stylus" data-ext="styl" data-title="styl"><pre class="language-stylus"><code><span class="token variable-declaration"><span class="token variable">support-for-ie</span> <span class="token operator">?=</span> <span class="token boolean">true</span></span>

<span class="token func"><span class="token function">opacity</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
  <span class="token property-declaration"><span class="token property">opacity</span> n</span>
  <span class="token statement"><span class="token keyword">if</span> support-for-ie</span>
    <span class="token property-declaration"><span class="token property">filter</span> unquote<span class="token punctuation">(</span><span class="token string">'progid:DXImageTransform.Microsoft.Alpha(Opacity='</span> <span class="token operator">+</span> <span class="token func"><span class="token function">round</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> </span><span class="token string">')'</span><span class="token punctuation">)</span></span>

<span class="token selector">#logo</span>
  <span class="token selector">&amp;:hover</span>
    <span class="token property-declaration"><span class="token property">opacity</span> <span class="token number">0.5</span></span>
</code></pre></div><p>渲染为：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">#logo:hover</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>
  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token property">progid</span><span class="token punctuation">:</span>DXImageTransform.Microsoft.<span class="token function">Alpha</span><span class="token punctuation">(</span>Opacity=50<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>来源：<a href="https://www.zhangxinxu.com/jq/stylus/mixins.php" target="_blank" rel="noopener noreferrer">https://www.zhangxinxu.com/jq/stylus/mixins.php</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>CSS Function 汇总</title>
      <link>https://codemake.fun/fe/css/knowledge/07.CSS%20Function%20%E6%B1%87%E6%80%BB.html</link>
      <guid>https://codemake.fun/fe/css/knowledge/07.CSS%20Function%20%E6%B1%87%E6%80%BB.html</guid>
      <source url="https://codemake.fun/rss.xml">CSS Function 汇总</source>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/20200512161232.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/20200512161232.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>常用代码</title>
      <link>https://codemake.fun/fe/css/tricks/01.%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81.html</link>
      <guid>https://codemake.fun/fe/css/tricks/01.%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81.html</guid>
      <source url="https://codemake.fun/rss.xml">常用代码</source>
      <description>多行文本超出省略号
底部阴影
页面变灰色</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>多行文本超出省略号</h2>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
<span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
<span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
</code></pre></div><h2>底部阴影</h2>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.box:before</span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 6px 50px <span class="token function">rgba</span><span class="token punctuation">(</span>156<span class="token punctuation">,</span> 156<span class="token punctuation">,</span> 156<span class="token punctuation">,</span> 0.6<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>页面变灰色</h2>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">html</span> <span class="token punctuation">{</span>
    <span class="token property">-webkit-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-moz-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-ms-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-o-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* filter: grayscale(100%); */</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token property">progid</span><span class="token punctuation">:</span>DXImageTransform.Microsoft.<span class="token function">BasicImage</span><span class="token punctuation">(</span>grayscale=1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>水平垂直居中的几种方式</title>
      <link>https://codemake.fun/fe/css/tricks/02.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</link>
      <guid>https://codemake.fun/fe/css/tricks/02.%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</guid>
      <source url="https://codemake.fun/rss.xml">水平垂直居中的几种方式</source>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<iframe height="880" style="width: 100%;" scrolling="no" title="水平垂直居中的几种方式" src="https://codepen.io/xugaoyi/embed/poJLeYv?height=880&amp;theme-id=light&amp;default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/xugaoyi/pen/poJLeYv'>水平垂直居中的几种方式</a> by xugaoyi
  (<a href='https://codepen.io/xugaoyi'>@xugaoyi</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>水平居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>行内，text-align: center;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      块元素
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>（定宽度）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>margin: 0 auto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>块元素（不定宽度）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      块元素
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>flex实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>（定不定宽度可以）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>单行的行内元素，设置行高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>多行的行内元素，多行的行内元素，多行的行内元素，多行的行内元素，多行的行内元素，多行的行内元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper7<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>块级元素（定高度）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      块级元素
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>flex实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>（定不定高度可以）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>levelVertical<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper9<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      块级元素
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>已知宽高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      块级元素
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>已知宽高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper11<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      块级元素
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>未知宽高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper wrapper12<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
      块级元素
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>flex实现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>未知宽高<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.level,
.vertical,
.levelVertical</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">h1</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper &gt; div</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper1</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper2 div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper3</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper3 div</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper4</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper5</span> <span class="token punctuation">{</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper6</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper7</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper7 div</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper8</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper9</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper9 div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper10</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper10 div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper11</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper11 div</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.wrapper12</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>根据系统主题自动响应CSS深色模式</title>
      <link>https://codemake.fun/fe/css/tricks/03.%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94CSS%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F.html</link>
      <guid>https://codemake.fun/fe/css/tricks/03.%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94CSS%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F.html</guid>
      <source url="https://codemake.fun/rss.xml">根据系统主题自动响应CSS深色模式</source>
      <description>很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。


CSS 深色模式 (Dark Mode)
在:root根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:

:r...</description>
      <category>CSS</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。</p>
</blockquote>
<!-- more -->
<h2>CSS 深色模式 (Dark Mode)</h2>
<p>在<code>:root</code>根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--bg</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--textColor</span><span class="token punctuation">:</span> #004050<span class="token punctuation">;</span>
  <span class="token property">--borderColor</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.15<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p><strong><code>:root</code></strong> 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，<strong><code>:root</code></strong> 表示 <code>&lt;html&gt;</code>元素，除了优先级更高之外，与 <code>html</code> 选择器相同。</p>
</blockquote>
<p>如果希望在样式表中使用这些变量，可以这样做</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。</p>
<p>现在我们需要定义一组新的变量，这些变量将在调用CSS深色模式时使用。对我来说，深色模式的变量是这样的:</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* 定义深色模式的颜色 */</span>
<span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--bg</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>30<span class="token punctuation">,</span>30<span class="token punctuation">,</span>34<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--textColor</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>150<span class="token punctuation">,</span>150<span class="token punctuation">,</span>154<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--borderColor</span><span class="token punctuation">:</span> #2C2C3A<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>添加深色模式自动响应</h2>
<p>现在我们定义了两组变量。剩下要做的一件事就是将<code>prefers-color-scheme</code>媒体查询添加到我们的深色模式变量中。</p>
<p>使用您的深色模式变量并在外层添加<code>@media</code>查询</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* 根据系统的深色模式响应深色变量 */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">:root</span> <span class="token punctuation">{</span>
    <span class="token property">--bg</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>30<span class="token punctuation">,</span>30<span class="token punctuation">,</span>34<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">--textColor</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>150<span class="token punctuation">,</span>150<span class="token punctuation">,</span>154<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">--borderColor</span><span class="token punctuation">:</span> #2C2C3A<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme" target="_blank" rel="noopener noreferrer"><code>prefers-color-scheme</code>文档</a></p>
</blockquote>
<p>这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。</p>
<blockquote>
<p>如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。</p>
</blockquote>
<h2>JS判断深色模式</h2>
<p>如果你的需求需要js来判断系统是否处于深色模式，可以这样做：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//深色主题</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia" target="_blank" rel="noopener noreferrer"><code>matchMedia</code></a>方法返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList" target="_blank" rel="noopener noreferrer"><code>MediaQueryList</code></a>对象，该对象具有属性<code>matches</code>、<code>media</code>，具有方法<code>addListener</code>、<code>removeListener</code>。</p>
</blockquote>
<p><code>addListener</code>接收一个<code>MediaQueryList</code>对象作为参数。<br>
为深色模式添加监听器，以响应系统切换到或切换出深色模式：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> listeners<span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token function-variable function">dark</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">mediaQueryList</span> <span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mediaQueryList<span class="token punctuation">.</span>matches<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您切换到深色模式了！'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">light</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">mediaQueryList</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>mediaQueryList<span class="token punctuation">.</span>matches<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您切换到浅色模式了！'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listeners<span class="token punctuation">.</span>dark<span class="token punctuation">)</span>
window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: light)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listeners<span class="token punctuation">.</span>light<span class="token punctuation">)</span>
</code></pre></div><h2>结论</h2>
<p>我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>数组去重性能对比</title>
      <link>https://codemake.fun/fe/javascript/knowledge/02.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/02.%E5%A4%9A%E7%A7%8D%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.html</guid>
      <source url="https://codemake.fun/rss.xml">数组去重性能对比</source>
      <description>结论
ES5 标准中性能最高的数组去重方法为:
ES6 标准中性能最高的数组去重方法为:
代码既简洁性能又相对高的去重方法为：
测试模板
测试代码</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>结论</h2>
<p>ES5 标准中性能最高的数组去重方法为:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 耗时约23ms</span>
arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> result
</code></pre></div><p>ES6 标准中性能最高的数组去重方法为:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 耗时约16ms (千万级数据量下效率比使用Set数据结构方法高4倍，for...of 为ES6语法)</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> result
</code></pre></div><p>代码既简洁性能又相对高的去重方法为：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 耗时约20ms，性能高，代码简洁</span>
<span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2>测试模板</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个 1 ~ 10w 的数组，Array.from为ES6语法</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> index
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> index <span class="token operator">+</span> index
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始数组去重'</span><span class="token punctuation">)</span>

<span class="token comment">// 数组去重</span>
<span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
  <span class="token comment">// 去重方法</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'去重后的长度'</span><span class="token punctuation">,</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'耗时'</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token string">'ms'</span><span class="token punctuation">)</span>
</code></pre></div><h2>测试代码</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个 1 ~ 10w 的数组，Array.from为ES6语法</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> index
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> index <span class="token operator">+</span> index
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始数组去重'</span><span class="token punctuation">)</span>

<span class="token comment">// 数组去重</span>
<span class="token keyword">function</span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

  <span class="token comment">// 方法1，耗时约11675ms，约11s</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 方法2，耗时约22851ms，约22s，性能最差</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment">// splice 会改变数组长度，所以要将数组长度 len 和下标 j 减一</span>
        len<span class="token operator">--</span>
        j<span class="token operator">--</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr

  <span class="token comment">//方法3，耗时约12789ms，约12s，和方法1相当</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result

  <span class="token comment">//方法4，耗时约23ms，ES5标准中性能最高</span>
  arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result

  <span class="token comment">// 方法5，ES6的Set数据结构，耗时约20ms，性能高，代码简洁</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 方法6，耗时约16ms，所有方法中 性能最高！ (千万级数据量下效率比方法5高4倍，for...of 为ES6语法)</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
      obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'去重后的长度'</span><span class="token punctuation">,</span> <span class="token function">distinct</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'耗时'</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token string">'ms'</span><span class="token punctuation">)</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>防抖与节流函数</title>
      <link>https://codemake.fun/fe/javascript/knowledge/03.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/03.%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0.html</guid>
      <source url="https://codemake.fun/rss.xml">防抖与节流函数</source>
      <description>防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案

区别

防抖函数：只会在高频事件结束后 n 毫秒调用一次函数
节流函数：会在高频事件触发过程当中每隔 n 毫秒调用一次函数。

防抖函数

触发高频事件后一段时间（wait）只会执行一次函数，如果指定时间（wait）内高频事件再次被触发，则重新计算时间。

节流函数

规定在一...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>防抖和节流的作用都是在高频事件中防止函数被多次调用，是一种性能优化的方案</p>
</blockquote>
<h2>区别</h2>
<ul>
<li>防抖函数：只会在高频事件结束后 n 毫秒调用一次函数</li>
<li>节流函数：会在高频事件触发过程当中每隔 n 毫秒调用一次函数。</li>
</ul>
<h2>防抖函数</h2>
<blockquote>
<p>触发高频事件后一段时间（wait）只会执行一次函数，如果指定时间（wait）内高频事件再次被触发，则重新计算时间。</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 防抖函数</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>节流函数</h2>
<blockquote>
<p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 节流函数</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        timeout <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>应用场景</h2>
<p>常见的应用场景都是使用高频事件来调用函数的过程当中，比如应用于 window 对象的 resize、scroll 事件，拖拽时的 mousemove 事件，文字输入、自动完成的 keyup 事件。</p>
<h3>防抖应用场景</h3>
<ul>
<li>scroll 事件滚动触发事件</li>
<li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li>
<li>表单验证</li>
<li>按钮提交事件。</li>
<li>浏览器窗口缩放，resize 事件(如窗口停止改变大小之后重新计算布局)等。</li>
</ul>
<h3>节流的应用场景</h3>
<ul>
<li>DOM 元素的拖拽功能实现（mousemove）</li>
<li>搜索联想（keyup）</li>
<li>计算鼠标移动的距离（mousemove）</li>
<li>Canvas 模拟画板功能（mousemove）</li>
<li>射击游戏的 mousedown/keydown 事件（单位时间只能发射一颗子弹）</li>
<li>监听滚动事件判断是否到页面底部自动加载更多</li>
</ul>
<h2>示例</h2>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  说明：鼠标在以下元素不断移动，将会不断执行一个数值累加事件，但中间分别加入了防抖和节流函数。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>防抖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>在鼠标停止移动后300ms执行一次数值累加事件。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>节流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>在鼠标移动过程中，每300ms执行一次数值累加事件。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">h2</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 防抖函数</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// test debounce</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> num<span class="token operator">++</span>
<span class="token punctuation">}</span>
content<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>

<span class="token comment">// 节流函数</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        timeout <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// test throttle</span>
<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> content2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content2'</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">count2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  content2<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> num2<span class="token operator">++</span>
<span class="token punctuation">}</span>
content2<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>count2<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>获取和修改 URL 参数</title>
      <link>https://codemake.fun/fe/javascript/knowledge/04.%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9%20URL%20%E5%8F%82%E6%95%B0.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/04.%E8%8E%B7%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9%20URL%20%E5%8F%82%E6%95%B0.html</guid>
      <source url="https://codemake.fun/rss.xml">获取和修改 URL 参数</source>
      <description>可以使用 qs库

获取 url 参数
修改 url 参数
不刷新页面修改 url 参数
https://www.cnblogs.com/wuting/p/8946927.html
URL 的编码和解码
比如，UTF-8 的操作系统上，http://www.example.com/q=春节这个 URL 之中，汉字“春节”不是 URL 的合法字符，所以被...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>可以使用 <img src="https://www.npmjs.com/package/qs" alt="qs库" loading="lazy"></p>
</blockquote>
<h2>获取 url 参数</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 获取url里的参数
 * <span class="token keyword">@param</span> <span class="token parameter">arg</span> 参数名
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">getURLString</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|&amp;)'</span> <span class="token operator">+</span> arg <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)(&amp;|$)'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> r <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>修改 url 参数</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * url地址修改
 * <span class="token keyword">@param</span> <span class="token parameter">url</span> 待修改url
 * <span class="token keyword">@param</span> <span class="token parameter">arg</span> 修改的参数名
 * <span class="token keyword">@param</span> <span class="token parameter">arg_val</span> 修改的具体值
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">changeURLArg</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> arg_val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> pattern <span class="token operator">=</span> arg <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)'</span>
  <span class="token keyword">var</span> replaceText <span class="token operator">=</span> arg <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> arg_val
  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">'/('</span> <span class="token operator">+</span> arg <span class="token operator">+</span> <span class="token string">'=)([^&amp;]*)/gi'</span>
    tmp <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> replaceText<span class="token punctuation">)</span>
    <span class="token keyword">return</span> tmp
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'[?]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> url <span class="token operator">+</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> replaceText
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> replaceText
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>不刷新页面修改 url 参数</h2>
<p><a href="https://www.cnblogs.com/wuting/p/8946927.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/wuting/p/8946927.html</a></p>
<h2>URL 的编码和解码</h2>
<p>比如，UTF-8 的操作系统上，<code>http://www.example.com/q=春节</code>这个 URL 之中，汉字“春节”不是 URL 的合法字符，所以被浏览器自动转成<code>http://www.example.com/q=%E6%98%A5%E8%8A%82</code>。其中，“春”转成了<code>%E6%98%A5</code>，“节”转成了<code>%E8%8A%82</code>。这是因为“春”和“节”的 UTF-8 编码分别是<code>E6 98 A5</code>和<code>E8 8A 82</code>，将每个字节前面加上百分号，就构成了 URL 编码。</p>
<p>JavaScript 提供四个 URL 的编码/解码方法。</p>
<ul>
<li><code>encodeURI()</code></li>
<li><code>encodeURIComponent()</code></li>
<li><code>decodeURI()</code></li>
<li><code>decodeURIComponent()</code></li>
</ul>
<p><a href="https://xugaoyi.com/pages/bab4930124ad2c10/#_2%E3%80%81url-%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81" target="_blank" rel="noopener noreferrer">查看文档</a></p>
]]></content:encoded>
      <enclosure url="https://www.npmjs.com/package/qs" type="image/"/>
    </item>
    <item>
      <title>for-in 和 for-of 的区别</title>
      <link>https://codemake.fun/fe/javascript/knowledge/06.for-in%20%E5%92%8C%20for-of%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/06.for-in%20%E5%92%8C%20for-of%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</guid>
      <source url="https://codemake.fun/rss.xml">for-in 和 for-of 的区别</source>
      <description>循环数组用 for...of，循环对象用 for...in

for...in

遍历的结果是数组元素的下标


遍历对象的可枚举属性，以及对象从构造函数原型中继承的属性，对于每个不同的属性，语句都会被执行，可以用 hasOwnProperty() 去掉非自身属性


不建议使用 for...in 遍历数组，因为输出的顺序是不固定的


如果迭代的对象...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>循环数组用 <code>for...of</code>，循环对象用 <code>for...in</code></p>
</blockquote>
<h2><a class="header-anchor" href="#for-in"><span></span></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener noreferrer">for...in</a></h2>
<blockquote>
<p><strong>遍历的结果是数组元素的下标</strong></p>
</blockquote>
<blockquote>
<p>遍历对象的可枚举属性，以及对象从构造函数原型中继承的属性，对于每个不同的属性，语句都会被执行，可以用 <code>hasOwnProperty()</code> 去掉非自身属性</p>
</blockquote>
<blockquote>
<p><strong>不建议使用 <code>for...in</code> 遍历数组</strong>，因为输出的顺序是不固定的</p>
</blockquote>
<blockquote>
<p>如果迭代的对象的变量值是 <code>null</code> 或者 <code>undefined</code>， <code>for...in</code> 不报错，也不执行循环体，建议在使用 for in 循环之前，先检查该对象的值是不是 <code>null</code> 或者 <code>undefined</code></p>
</blockquote>
<h2><a class="header-anchor" href="#for-of"><span></span></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener noreferrer">for...of</a></h2>
<blockquote>
<p>ES6 新语法</p>
</blockquote>
<blockquote>
<p><strong>遍历的结果是元素的值</strong></p>
</blockquote>
<blockquote>
<p>在可迭代对象（包括 <code>Array</code>、<code>String</code>、<code>Map</code>、<code>Set</code>、 <code>arguments</code> 等等）上创建了一个循环，调用自定义迭代钩子，并为每个不同属性的值执行语句</p>
</blockquote>
<blockquote>
<p>如果迭代的对象的变量值是 <code>null</code> 或者 <code>undefined</code>，<code>Object</code> 等等， <code>for...of</code> 会直接报错</p>
</blockquote>
<h2>区别</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">objCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">arrCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> iterable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
iterable<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'hello'</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 0, 1, 2, "foo", "arrCustom", "objCustom"</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iterable<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 0, 1, 2, "foo"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 3, 5, 7</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>同步和异步</title>
      <link>https://codemake.fun/fe/javascript/knowledge/07.%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/07.%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.html</guid>
      <source url="https://codemake.fun/rss.xml">同步和异步</source>
      <description>异步任务进入 Event Table，待读秒结束后 回调函数 进入 Event Queue
异步时间至少为 4ms，如果 setTimeout 传入值少于 4ms，则会被自动追加至 4ms</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<ul>
<li>异步任务进入 Event Table，待读秒结束后 回调函数 进入 Event Queue</li>
<li>异步时间至少为 4ms，如果 setTimeout 传入值少于 4ms，则会被自动追加至 4ms</li>
</ul>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/iShot2021-11-07 20.37.19.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/iShot2021-11-07%2020.37.19.png" type="image/png"/>
    </item>
    <item>
      <title>事件和队列</title>
      <link>https://codemake.fun/fe/javascript/knowledge/08.%E4%BA%8B%E4%BB%B6%E5%92%8C%E9%98%9F%E5%88%97.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/08.%E4%BA%8B%E4%BB%B6%E5%92%8C%E9%98%9F%E5%88%97.html</guid>
      <source url="https://codemake.fun/rss.xml">事件和队列</source>
      <description>浏览器维护着一个事件队列，在幕后，浏览器不断的从这个队列中取出事件，并调用相应的事件处理程序来处理他们


浏览器遍历队列，按先后顺序 逐个处理事件

事件
onload

浏览器加载网页完毕后触发

onunload

用户关闭浏览器窗口或切换到其他网页时触发

onresize

用户调整浏览器窗口大小时触发

dragstart

用户拖曳网页中...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>浏览器维护着一个事件队列，在幕后，浏览器不断的从这个队列中取出事件，并调用相应的事件处理程序来处理他们</p>
</blockquote>
<ul>
<li>浏览器遍历队列，按先后顺序 <strong>逐个处理事件</strong></li>
</ul>
<h2>事件</h2>
<h3>onload</h3>
<blockquote>
<p>浏览器加载网页完毕后触发</p>
</blockquote>
<h3>onunload</h3>
<blockquote>
<p>用户关闭浏览器窗口或切换到其他网页时触发</p>
</blockquote>
<h3>onresize</h3>
<blockquote>
<p>用户调整浏览器窗口大小时触发</p>
</blockquote>
<h3>dragstart</h3>
<blockquote>
<p>用户拖曳网页中元素时触发</p>
</blockquote>
<h3>drop</h3>
<blockquote>
<p>用户放下拖曳的元素时触发</p>
</blockquote>
<h3>onclick</h3>
<blockquote>
<p>元素单击时触发</p>
</blockquote>
<h3>onmousemove</h3>
<blockquote>
<p>当鼠标在特定元素上移动时触发</p>
</blockquote>
<h3>onmouseover</h3>
<blockquote>
<p>当鼠标移入指定元素时触发</p>
</blockquote>
<h3>onmouseout</h3>
<blockquote>
<p>当鼠标移除指定元素时触发</p>
</blockquote>
<h3>ontouchstart</h3>
<blockquote>
<p>在触摸设备上，用户触摸并按住元素时触发</p>
</blockquote>
<h3>ontouchend</h3>
<blockquote>
<p>在触摸设备上，用户停止触摸时触发</p>
</blockquote>
<h3>ontouchstart</h3>
<blockquote>
<p>在触摸设备上，用户触摸并按住元素时触发</p>
</blockquote>
<h3>onkeyup</h3>
<blockquote>
<p>用户放开任何先前按下的键时触发</p>
</blockquote>
<h3>onkeydown</h3>
<blockquote>
<p>用户按下任何键（包括系统按钮，如箭头键和功能键）时触发</p>
</blockquote>
<h3>onkeypress</h3>
<blockquote>
<p>用户按下并放开任何字母数字键时触发，系统按钮（例如，箭头键和功能键）无法识别</p>
</blockquote>
<h3>onplay</h3>
<blockquote>
<p>用户单击网页中 video 元素的播放按钮时触发</p>
</blockquote>
<h3>Pause</h3>
<blockquote>
<p>用户单击网页中 video 元素的暂停按钮时触发</p>
</blockquote>
<h2>鼠标位置</h2>
<h3>pageX</h3>
<blockquote>
<p>鼠标位置相对于网页左边缘的距离（像素），会被滚动条影响变化</p>
</blockquote>
<h3>pageY</h3>
<blockquote>
<p>鼠标位置相对于网页上边缘的距离（像素）</p>
</blockquote>
<h3>clientX</h3>
<blockquote>
<p>鼠标位置相对于浏览器窗口左边缘的距离（像素）</p>
</blockquote>
<h3>clientY</h3>
<blockquote>
<p>鼠标位置相对于浏览器窗口上边缘的距离（像素）</p>
</blockquote>
<h3>screenX</h3>
<blockquote>
<p>鼠标位置相对于设备屏幕左边缘的距离（像素）</p>
</blockquote>
<h3>screenY</h3>
<blockquote>
<p>鼠标位置相对于设备屏幕上边缘的距离（像素）</p>
</blockquote>
<h3>movementX</h3>
<blockquote>
<p>当前事件和上一个 <code>mousemove</code> 事件之间鼠标在水平方向上的移动值</p>
</blockquote>
<h3>movementY</h3>
<blockquote>
<p>当前事件和上一个 <code>mousemove</code> 事件之间鼠标在垂直方向上的移动值</p>
</blockquote>
<h2>元素距离</h2>
<p>offsetTop / offsetLeft ( 元素与父级 定位元素/table/td/th/body 的距离 )</p>
<p>clientTop / clientLeft ( 元素边框宽度 )</p>
<p>scrollTop / scrollLeft ( 元素滚动距离 )</p>
<p>window.scrollY / window.scrollX ( 文档/页面 滚动距离 )<br>
window.pageYOffset / window.pageXOffset ( 另一种写法 -跨浏览器兼容- )</p>
<p>window.screenTop / window.screenLeft ( 浏览器边界到操作系统桌面的距离 )<br>
window.screenY / window.screenX ( 另一种写法 )</p>
]]></content:encoded>
    </item>
    <item>
      <title>Websocket 使用</title>
      <link>https://codemake.fun/fe/javascript/knowledge/09.WebSocket%20%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/09.WebSocket%20%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://codemake.fun/rss.xml">Websocket 使用</source>
      <description>普通 HTML 中使用
Vue 中使用</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>普通 HTML 中使用</h2>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token comment">// WebSocket 测试</span>
      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://websocket.org'</span><span class="token punctuation">)</span>

      <span class="token keyword">switch</span> <span class="token punctuation">(</span>ws<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CONNECTING</span><span class="token operator">:</span>
          <span class="token comment">// 值为 0，表示正在连接</span>
          <span class="token keyword">break</span>
        <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token operator">:</span>
          <span class="token comment">// 值为 1，表示连接成功，可以进行通信了</span>
          <span class="token keyword">break</span>
        <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CLOSING</span><span class="token operator">:</span>
          <span class="token comment">// 值为 2，表示连接正在关闭</span>
          <span class="token keyword">break</span>
        <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token operator">:</span>
          <span class="token comment">// 值为 3，表示链接已关闭，或者打开连接失败</span>
          <span class="token keyword">break</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          <span class="token comment">// 不存在其他情况</span>
          <span class="token keyword">break</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 用于指定连接成功后的回调函数</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送数据</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Server!'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送数据</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Server!'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// 用于指定连接关闭后的回调函数</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> code <span class="token operator">=</span> event<span class="token punctuation">.</span>code
        <span class="token keyword">var</span> reason <span class="token operator">=</span> event<span class="token punctuation">.</span>reason
        <span class="token keyword">var</span> wasClean <span class="token operator">=</span> event<span class="token punctuation">.</span>wasClean
      <span class="token punctuation">}</span>
      ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> code <span class="token operator">=</span> event<span class="token punctuation">.</span>code
        <span class="token keyword">var</span> reason <span class="token operator">=</span> event<span class="token punctuation">.</span>reason
        <span class="token keyword">var</span> wasClean <span class="token operator">=</span> event<span class="token punctuation">.</span>wasClean
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// 用于指定收到服务器数据后的回调函数</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data
      <span class="token punctuation">}</span>
      ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// 用于指定报错时的回调函数</span>
      ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 错误处理</span>
      <span class="token punctuation">}</span>
      ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// 判断发送是否结束</span>
      <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>
      wx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>wx<span class="token punctuation">.</span>bufferedAmount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送完毕</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送还没有结束</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Vue 中使用</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'userCenter'</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">websocket</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWebSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">initWebSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//初始化weosocket</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>websocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://websocket.org'</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websocketonmessage
      <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websocketonopen
      <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websocketonerror
      <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websocketclose
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">websocketonopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//连接建立之后执行send方法发送数据</span>
      <span class="token comment">// setInterval(() =&gt; {</span>
      <span class="token comment">//   let actions = { test: '12345' }</span>
      <span class="token comment">//   this.websocketsend(JSON.stringify(actions))</span>
      <span class="token comment">// }, 2000)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">websocketonerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//连接建立失败重连</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWebSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">websocketonmessage</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//数据接收</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">websocketsend</span><span class="token punctuation">(</span><span class="token parameter">Data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//数据发送</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>websock<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">websocketclose</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//关闭</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'断开连接'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//离开路由之后断开websocket连接</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>websock<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Canvas 使用</title>
      <link>https://codemake.fun/fe/javascript/knowledge/10.Canvas%20%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/10.Canvas%20%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://codemake.fun/rss.xml">Canvas 使用</source>
      <description>描述

是一门使用 JavaScript 操作 Canvas 元素的技术


&amp;lt;canvas&amp;gt; 是一个行内元素块（inline-block）
一般需要在 &amp;lt;canvas&amp;gt; 元素上指定三个属性 id、width、height

默认宽度（300px），默认高度（150px）
如果在 CSS 中定义 &amp;lt;canvas&amp;gt; 的宽高，在使用 JavaScript ...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>描述</h2>
<blockquote>
<p>是一门使用 JavaScript 操作 Canvas 元素的技术</p>
</blockquote>
<ul>
<li><code>&lt;canvas&gt;</code> 是一个行内元素块（<code>inline-block</code>）</li>
<li>一般需要在 <code>&lt;canvas&gt;</code> 元素上指定三个属性 <code>id</code>、<code>width</code>、<code>height</code>
<ul>
<li>默认宽度（300px），默认高度（150px）</li>
<li>如果在 <code>CSS</code> 中定义 <code>&lt;canvas&gt;</code> 的宽高，在使用 <code>JavaScript</code> 获取元素宽高时得到的是默认宽高而非设置的</li>
</ul>
</li>
<li>所有操作均使用 <code>W3C</code> 坐标系，而非数学坐标系</li>
</ul>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span>
  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>
  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span>
  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #666</span><span class="token punctuation">"</span></span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>Canvas 与 SVG</h3>
<ul>
<li><code>Canvas</code> 使用 <code>Javascript</code> 动态生成，<code>SVG</code> 使用 <code>XML</code> 静态描述</li>
<li><code>Canvas</code> 基于位图（放大后会失真），<code>SVG</code> 基于矢量图（放大后不会失真）</li>
<li>如果发生修改，<code>Canvas</code> 会重绘，<code>SVG</code> 不需要重绘</li>
</ul>
<h3>操作步骤</h3>
<ul>
<li>获取 <code>Canvas</code> 对象
<ul>
<li><code>var myCanvas = document.getElementById('canvas')</code></li>
</ul>
</li>
<li>获取上下文环境对象 <code>context</code>（所有 <code>Canvas</code> 图形操作都是基于 <code>context</code> 对象的）
<ul>
<li><code>var ctx = myCanvas.getContext('2d')</code></li>
</ul>
</li>
<li>开始绘制图形
<ul>
<li><code>ctx.stroke()</code></li>
</ul>
</li>
</ul>
<h3>常用属性</h3>
<h4>width</h4>
<blockquote>
<p>获取 <code>Canvas</code> 对象的宽度</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCanvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span>
</code></pre></div><h4>height</h4>
<blockquote>
<p>获取 <code>Canvas</code> 对象的高度</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCanvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span>
</code></pre></div><h3>常用方法</h3>
<h4>getContext("2d")</h4>
<blockquote>
<p>获取 <code>Canvas 2D</code> 上下文环境对象</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> ctx <span class="token operator">=</span> myCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>
</code></pre></div><h4>toDataURL(type)</h4>
<blockquote>
<p>获取 <code>Canvas</code> 对象产生的位图的字符串</p>
</blockquote>
<ul>
<li><code>type</code>：可选参数，表示输出的 <code>MIME</code> 类型，如果被省略，将使用 <code>image/png</code> 类型</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> imgUrl <span class="token operator">=</span> myCanvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>
</code></pre></div><h3>上下文全局属性</h3>
<h4>globalAlpha</h4>
<blockquote>
<p>定义 Canvas 环境的透明度，对整个画布都起作用</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token string">'0.3'</span>
</code></pre></div><h4>globalCompositeOperation</h4>
<blockquote>
<p>定义全局图形交叉显示方式</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">'source-over'</span>
</code></pre></div><p>| 属性值             | 说明                                                                     |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>问题记录（待合并）</title>
      <link>https://codemake.fun/fe/javascript/knowledge/1000.%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E5%BE%85%E5%90%88%E5%B9%B6%EF%BC%89.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/1000.%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E5%BE%85%E5%90%88%E5%B9%B6%EF%BC%89.html</guid>
      <source url="https://codemake.fun/rss.xml">问题记录（待合并）</source>
      <description>小知识点


引用独立的 JavaScript 文件时，&amp;lt;script&amp;gt; 元素不能包含任何JavaScript代码。


alert()：仅当你要停止一切并提醒用户时，才应使用它


在任何情况下，&amp;lt;/script&amp;gt; 结束标签都是必不可少的


浏览器分 两遍 读取网页:第一遍读取所有的函数定义，第二遍开始执行代码。这让你可以将函数放在文件的任何地方。...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>小知识点</h2>
<ul>
<li>
<p>引用独立的 <strong>JavaScript</strong> 文件时，<code>&lt;script&gt;</code> 元素不能包含任何<strong>JavaScript</strong>代码。</p>
</li>
<li>
<p><code>alert()</code>：仅当你要停止一切并提醒用户时，才应使用它</p>
</li>
<li>
<p>在任何情况下，<code>&lt;/script&gt;</code> 结束标签都是必不可少的</p>
</li>
<li>
<p>浏览器分 <strong>两遍</strong> 读取网页:第一遍读取所有的函数定义，第二遍开始执行代码。这让你可以将函数放在文件的任何地方。</p>
</li>
<li>
<p>没有使用 <code>var</code> 声明的变量是全局变量</p>
</li>
</ul>
<h2>特殊类型</h2>
<blockquote>
<p><code>null</code>：在应该提供一个对象，但无法创建或找到时，将提供 null（null 用于表示不存在的对象 typeof null 结果为 object）</p>
<p><code>undefined</code>：在变量未初始化、对象没有指定属性或数组没有指定元素时，将返回 undefined</p>
<p><code>NaN</code>：无法表示的数字（typeof NaN 结果为 number），并且 NaN 不等于 NaN，使用函数 <code>isNaN()</code> 检测</p>
</blockquote>
<h3>相等性判断</h3>
<ul>
<li>
<p>类型相同，直接判断</p>
</li>
<li>
<p>类型不同，尝试转换为相同类型再进行比较</p>
<ul>
<li>数字和字符串，转换为数字</li>
<li>布尔值和其他类型，转换为数字再进行比较</li>
</ul>
</li>
<li>
<p><code>undefined == null</code> 返回 <code>true</code></p>
</li>
<li>
<p>被视为假值的值：<code>undefined</code>、<code>null</code>、<code>0</code> 、<code>空字符串</code>、<code>NaN</code></p>
</li>
</ul>
<h2>编码指南</h2>
<ul>
<li>在开头声明全局变量</li>
<li>将函数定义统一放在文件的开头或结尾</li>
<li>在函数开头声明局部变量</li>
</ul>
<h2>函数声明与函数表达式</h2>
<h3>浏览器执行流程</h3>
<ul>
<li>
<p>浏览器会在执行所有 JS 代码之前分析网页，查找其中的函数声明</p>
</li>
<li>
<p>找到函数声明时</p>
<ul>
<li>创建相应的函数</li>
<li>将得到的函数引用赋值给与函数同名的变量</li>
</ul>
</li>
<li>
<p>处理所有的函数声明后，浏览器回到代码开头，开始从头到尾顺序执行代码</p>
<ul>
<li>如果遇到函数声明，因为之前已经处理够了，所以直接跳过</li>
</ul>
</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 函数声明</span>
<span class="token keyword">function</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'quack'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数表达式</span>
<span class="token keyword">var</span> <span class="token function-variable function">fly</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fly'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h3>区别</h3>
<ul>
<li>函数声明是一条语句，可以认为它包含一条隐藏的赋值语句，将函数引用创建并赋值给一个函数同名变量</li>
<li>函数表达式不自动将函数引用赋值给任何变量，必须显式的这样做，要么将函数（引用）赋值给一个变量，要么以其他方式使用函数表达式</li>
<li>使用函数声明时，函数将在执行代码前创建</li>
<li>使用函数表达式时，函数将在运行阶段执行代码时创建</li>
</ul>
<h3>一等值</h3>
<ul>
<li>可以将其赋给变量或存储在数组和对象等数据结构中</li>
<li>可以将其传递给函数</li>
<li>可以从函数中返回它们</li>
</ul>
<h2>闭包</h2>
<blockquote>
<p>名词，指的是函数和引用环境</p>
</blockquote>
<ul>
<li>局部变量：在函数体内部定义的变量，<strong>包括所有的形参</strong></li>
<li>自由变量：不在本地定义的变量（不是在本地声明的，没有绑定到任何值）</li>
<li>对于函数体内的变量，如果它既不是在本地定义的，又不是全局变量， 便可肯定它来自包含当前函数的其他 函数，可从环境中获取其值</li>
<li>包含自由变量的函数与为所有这些自由变量提供了变量绑定的环境一起，被称为闭包</li>
<li>并非只能通过从<code>函数返回函数来创建闭包</code>，如果<code>函数使用了自由变量，则每当你在创建该函数的上下文外面执行它时，都将创建一个闭包</code></li>
<li>将 <code>函数传递给函数时，也将创建闭包</code>。在这种情况下，传递的函数将在完全不同于定义它的上下文中执行</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> justAVar <span class="token operator">=</span> <span class="token string">"Oh, don't you worry about it, I'm GLOBAL"</span>
<span class="token keyword">function</span> <span class="token function">whereAreYou</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> justAVar <span class="token operator">=</span> <span class="token string">'Just an every day LOCAL'</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> justAVar
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> innerFunction <span class="token operator">=</span> <span class="token function">whereAreYou</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token comment">// A：Oh, don't you worry about it, I'm GLOBAL</span>
<span class="token comment">// B：Just an every day LOCAL</span>

<span class="token keyword">var</span> justAVar <span class="token operator">=</span> <span class="token string">"Oh, don't you worry about it, I'm GLOBAL"</span>
<span class="token keyword">function</span> <span class="token function">whereAreYou</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> justAVar <span class="token operator">=</span> <span class="token string">'Just an every day LOCAL'</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> justAVar
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> inner
<span class="token punctuation">}</span>
<span class="token keyword">var</span> innerFunction <span class="token operator">=</span> <span class="token function">whereAreYou</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token comment">// A：Oh, don't you worry about it, I'm GLOBAL</span>
<span class="token comment">// B：Just an every day LOCAL</span>
</code></pre></div><h2>构造函数工作原理</h2>
<ol>
<li><code>new</code> 首先创建一个空对象</li>
<li>接下来，<code>new</code> 设置 <code>this</code>，使其指向这个对象</li>
<li>设置 <code>this</code> 后，调用函数构造函数 <code>Person</code> 并将实参进行传递</li>
<li>执行构造函数 <code>Person</code> 代码，给新创建的 <code>this</code> 对象的属性赋值</li>
<li><code>Person</code> 函数执行完毕后，运算符 <code>new</code> 返回 <code>this</code>（自动返回，武学在代码中显式返回），指向新创建的对象的引用 （构造函数返回值，除非返回的是 <code>this</code>）</li>
</ol>
<ul>
<li>
<p>构造函数名采用驼峰命名法，并且首字母要大写（约定俗成）</p>
</li>
<li>
<p>使用构造函数创建的对象时，<code>this</code> 被设置为一个引用，指向正在创建的新对象，因此构造函数的所有代码针对的都是这个新对象</p>
</li>
<li>
<p>对象创建后，当对其调用方法时，<code>this</code> 被设置为方法被调用的对象，因此，在方法中，<code>this</code> 总是表示方法被调用的对象</p>
</li>
</ul>
<blockquote>
<p>在任何情况下，this 都指向原始对象即方法被调 用的对象，即便该方法位于原型中也是如此</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>常用操作符</title>
      <link>https://codemake.fun/fe/javascript/knowledge/11.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/11.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6.html</guid>
      <source url="https://codemake.fun/rss.xml">常用操作符</source>
      <description>常用操作符
一元操作符
递增操作符

前置型 ++i
后置型 i++

递减操作符

前置型 --i
后置型 i--

递增递减操作规则

在应用于一个包含有效数字字符的字符串时，现将其转化为十进制数字值，在执行加减 1 的操作，字符串变量变成数值变量
在应用于一个不包含有效数字字符的字符串时，将变量设置为 NaN，字符串变量变成数值变量
在应用于布尔...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>常用操作符</h2>
<h3>一元操作符</h3>
<h4>递增操作符</h4>
<ul>
<li>前置型 ++i</li>
<li>后置型 i++</li>
</ul>
<h4>递减操作符</h4>
<ul>
<li>前置型 --i</li>
<li>后置型 i--</li>
</ul>
<h4>递增递减操作规则</h4>
<ul>
<li>在应用于一个包含有效数字字符的字符串时，现将其转化为十进制数字值，在执行加减 1 的操作，字符串变量变成数值变量</li>
<li>在应用于一个不包含有效数字字符的字符串时，将变量设置为 NaN，字符串变量变成数值变量</li>
<li>在应用于布尔值 false 时，现将其转化为 0 再执行加减 1 的操作，布尔值转化为数值变量</li>
<li>在应用于布尔值 true 时，现将其转化为 1 再执行加减 1 的操作，布尔值转化为数值变量</li>
<li>在应用于浮点数值时，执行加减 1 的操作</li>
<li>在应用于对象时，先调用对象的 valueOf()以取得一个可供操作的值。然后对该值应用前述规则 。如果结果我是 NaN，则在调用 toString()方法后在应用前述规则。如果结局仍是 NaN，则在调用 toString()方法后再应用前述规则。对象变量变成数值变量</li>
</ul>
<h4>注意</h4>
<ul>
<li>前置型操作时，递增递减操作都是在包含他们的语句求值之前执行的</li>
<li>后置型操作时，递增递减操作都是在包含他们的语句求值之后执行的</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> <span class="token operator">--</span>age <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 28</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'anotherAge'</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 30</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> age<span class="token operator">--</span> <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 28</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'anotherAge'</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 31</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> <span class="token operator">++</span>age <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 30</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'anotherAge'</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 32</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span>
  <span class="token keyword">let</span> anotherAge <span class="token operator">=</span> age<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// 30</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'anotherAge'</span><span class="token punctuation">,</span> anotherAge<span class="token punctuation">)</span> <span class="token comment">// 31</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>布尔操作符</h3>
<ul>
<li>一共有 3 个
<ul>
<li>非（ ! ）</li>
<li>与（ &amp;&amp; ）</li>
<li>或（ || ）</li>
</ul>
</li>
</ul>
<h4>逻辑非（ ! ）</h4>
<ul>
<li>无论这个值是什么数据类型，这个操作符都会返回一个布尔值</li>
<li>首先将它的操作数转换为一个布尔值，而后对其求反</li>
<li>两个逻辑非操作符可以得到这个值对应的布尔值</li>
</ul>
<h5>逻辑非操作符返回规则</h5>
<p>| 操作数                         | 操作符返回值 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>引用类型</title>
      <link>https://codemake.fun/fe/javascript/knowledge/12.%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/12.%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.html</guid>
      <source url="https://codemake.fun/rss.xml">引用类型</source>
      <description>引用类型

引用类型的值（对象）是引用类型的一个实例

新对象是使用 new 操作符后跟一个构造函数来创建的

构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的




引用类型是一种数据结构，在技术上讲是一门面向对象的语言

不具备传统面向对象语言所支持的类和接口等基本结构



Object 类型

创建 Object 实例的方...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>引用类型</h2>
<ul>
<li>引用类型的值（对象）是引用类型的一个实例
<ul>
<li>新对象是使用 new 操作符后跟一个构造函数来创建的
<ul>
<li>构造函数本身就是一个函数，只不过该函数是出于创建新对象的目的而定义的</li>
</ul>
</li>
</ul>
</li>
<li>引用类型是一种数据结构，在技术上讲是一门面向对象的语言
<ul>
<li>不具备传统面向对象语言所支持的类和接口等基本结构</li>
</ul>
</li>
</ul>
<h3>Object 类型</h3>
<ul>
<li>创建 Object 实例的方法
<ul>
<li>new Object</li>
<li>字面量表示法
<ul>
<li>不会调用 Object 构造函数</li>
</ul>
</li>
</ul>
</li>
<li>访问对象属性方法
<ul>
<li>点表示法</li>
<li>方括号表示法
<ul>
<li>可通过变量访问</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>Array 类型</h3>
<ul>
<li>有序列表</li>
<li>每一项可以保存任何类型的数据</li>
<li>数组大小可以动态调整，即可以随数据添加自动增长以容纳新数据</li>
<li>创建数组方法
<ul>
<li>new Array ：var colors = new Array();</li>
<li>字面量表示法 [ ]</li>
</ul>
</li>
</ul>
<h4>检测数组</h4>
<ul>
<li>instanceof 操作符
<ul>
<li>instanceof 是假定单一的全局环境，如果网页中包含多个框架，那实际上就存在两个以上不同的全局环境，就会有两个不同版本的 Array 构造函数，如果从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数</li>
</ul>
</li>
<li>Array.isArray() 方法
<ul>
<li>if ( Array.isArray(value) )</li>
</ul>
</li>
</ul>
<h4>转换方法</h4>
<ul>
<li>toString：调用数组的 toString() 方法会返回数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串
<ul>
<li>会调用数组每一项的 toString() 方法</li>
</ul>
</li>
<li>valueOf：调用数组的 valueOf() 方法反悔的还是数组</li>
<li>toLocalString：经常返回与 toString() 和 valueOf() 方法相同的值，会调用数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串
<ul>
<li>会调用数组每一项的 toLocalString() 方法</li>
</ul>
</li>
</ul>
<h4>数组方法</h4>
<h5>栈方法</h5>
<ul>
<li><strong>push()</strong>：接受任意数量参数，逐个添加到数组末尾，并返回修改后的数组长度</li>
<li><strong>pop()</strong>：从数组末尾移除最后一项，减少数组的 length 值，并返回移除的项</li>
</ul>
<h5>队列方法</h5>
<ul>
<li><strong>shift()</strong>：移除数组中第一个项，并返回该项，同时使数组长度减 1</li>
<li><strong>unshift()</strong>：在数组前端添加任意个项并返回新数组的长度</li>
</ul>
<h5>重排序方法</h5>
<ul>
<li><strong>reverse()</strong>：翻转数组（不灵活）</li>
<li><strong>sort()</strong>
<ul>
<li>接收数组，数组的每一项进行 toString() 转换为字符串，然后去比较得到的字符串
<ul>
<li>即使每一项都是数值，比较的也是字符串，10 会位于 5 的前面（不是最佳方案）</li>
</ul>
</li>
<li>接受一个比较函数作为参数
<ul>
<li>比较函数接受两个参数
<ul>
<li>如果第一个参数应该位于第二个之前则返回一个负数</li>
<li>如果两个参数相等则返回 0</li>
<li>如果第一个参数应该在第二个之后则返回一个正数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5>操作方法</h5>
<ul>
<li><strong>concat()</strong>：基于当前数组的所有项创建一个新数组
<ul>
<li>这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组
<ul>
<li>没有传递参数的情况下，仅复制当前数组并返回副本</li>
<li>穿第一个或多个数组时，该方法会将这些数组中的每一项都添加到结果数组中</li>
<li>如果传递的值不是数组，这些值会被简单的添加到结果数组的末尾</li>
</ul>
</li>
</ul>
</li>
<li><strong>slice()</strong>：基于当前数组中的一个或多个项创建一个新数组
<ul>
<li>接受一个或两个参数：即返回项的起始和结束位置
<ul>
<li>只有一个参数时，返回从该参数指定位置开始到当前数组末尾的所有项</li>
<li>有两个参数时，返回起始位置和结束位置之间的项（不包括结束位置的项）</li>
<li>如果改参数中有负数，则用数组长度加上该数老确定相应的位置
<ul>
<li>例如一个包含五项的数组上调用 slice(-2,1) 与 slice(3,4) 结果是相通的</li>
<li>如果结束位置小于起始位置，则返回空数组</li>
</ul>
</li>
<li>该方法不会影响原始数组</li>
</ul>
</li>
</ul>
</li>
<li><strong>splice()</strong>
<ul>
<li>三种使用方式
<ul>
<li>删除元素：可以删除任意数量的项，需要指定两个参数：要删除的第一项的位置和要删除的项数
<ul>
<li>只传一个参数怎会删除从这个位置开始到最后的所有元素</li>
</ul>
</li>
<li>插入元素：向指定位置插入任意数量的项
<ul>
<li>需要提供 3 个参数
<ul>
<li>起始位置</li>
<li>0（要删除的项数）</li>
<li>要插入的项，如果需要插入多个项，可以再传入第四、第五以致任意多个项</li>
</ul>
</li>
</ul>
</li>
<li>替换元素：向指定位置插入任意数量的项，且同时删除任意数量的项
<ul>
<li>需要提供 3 个参数
<ul>
<li>起始位置</li>
<li>要删除的项数</li>
<li>要插入的任意数量的项</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>该方法始终会返回一个数组，其中包含从原始数组中删除的项
<ul>
<li>没有删除任何项，则返回一个空数组</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5>位置方法</h5>
<ul>
<li><strong>indexOf()</strong>
<ul>
<li>接收两个参数
<ul>
<li>要查找的项和（可选的）表示查找起点位置的索引</li>
<li>从数组的开头（位置 0）开始向后查找</li>
<li>返回要查要的项在数组中的位置，没找到的情况下返回 -1</li>
<li>比较时采用的是全等操作符</li>
</ul>
</li>
</ul>
</li>
<li><strong>lastIndexOf()</strong>
<ul>
<li>接收两个参数
<ul>
<li>要查找的项和（可选的）表示查找起点位置的索引</li>
<li>从数组的末尾开始向前查找</li>
<li>返回要查要的项在数组中的位置，没找到的情况下返回 -1</li>
<li>比较时采用的是全等操作符</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5>迭代方法</h5>
<ul>
<li>每个方法都接受两个参数
<ul>
<li>要在每一项上运行的函数</li>
<li>（可选的）运行该函数的作用域对象 - 影响 this 的值</li>
</ul>
</li>
<li>传入这些方法中的函数会接收三个值
<ul>
<li>数组项的值</li>
<li>该项在数组中的位置（索引）</li>
<li>数组对象本身</li>
</ul>
</li>
<li>5 个迭代方法及作用（这几个方法都不会修改数组中包含的值）
<ul>
<li><strong>every()</strong>：对数组中的每一项运行给定函数，如果该函数对每一项都返回 true ，则返回 true
<ul>
<li>用于查询数组中的项是否满足某个条件</li>
</ul>
</li>
<li><strong>some()</strong>：对数组中的每一项运行给定函数，如果该函数对任一项返回 true ，则返回 true
<ul>
<li>用于查询数组中的项是否满足某个条件</li>
</ul>
</li>
<li><strong>filter()</strong>：对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组
<ul>
<li>返回数组中满足函数中条件的项</li>
</ul>
</li>
<li><strong>map()</strong>：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组
<ul>
<li>返回在原始数组中对应项上运行传入函数的结果的数组</li>
</ul>
</li>
<li><strong>forEach()</strong>：对数组中的每一项运行给定函数，该方法没有返回值
<ul>
<li>本质上与 for 循环迭代数组一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5>缩小方法</h5>
<ul>
<li><strong>reduce()</strong> 和 <strong>reduceRight()</strong>
<ul>
<li>都会迭代数组的所有项，然后构建一个最终返回的值</li>
<li>reduce() 方法从数组第一项开始，逐个遍历到最后</li>
<li>reduceRight() 方法从数组最后一项开始，向前遍历到第一项</li>
<li>都接受两个参数
<ul>
<li>在每一项上调用的函数
<ul>
<li>函数接收四个参数（前一个值、当前值、项的索引、数组对象）</li>
<li>函数返回的任何值都会作为第一个参数自动传给下一项</li>
<li>第一次迭代发生在数组的第二项上，此时第一个参数是数组的第一项，第二个参数是数组的第二项</li>
</ul>
</li>
<li>（可选的）用作第一个调用函数的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>Date 类型</h3>
<ul>
<li>使用 UTC（国际协调时间）1970 年 1 月 1 时午夜（零时）开始经过的毫秒数来保存日期，能精确到 1970 年 1 月 1 日之前货之后的 285616 年</li>
<li>创建一个日期对象，使用 new 操作符和 Date 构造函数
<ul>
<li>如果第一个值是数值，Date 构造函数就会假设该值是日期中的年份，第二个是月份</li>
</ul>
</li>
<li>根据特定的日期或者时间创建日期对象，必须传入该日期的毫秒数，为了简化这一过程，ECMAScript 提供了两个方法 Date.parse() 和 Date.UTC()
<ul>
<li>Date.parse() ：接收一个表示日期的字符串参数，然后尝试根据这个字符串返回相应日期的毫秒数，字符串形式如下面几种方法所示
<ul>
<li>"月/日/年"，如 6/13/2004</li>
<li>"英文月名 日,年"，如 January 12,2004</li>
<li>"英文星期几 英文月名 日 年 时:分:秒 时区"，如 Tue May 25 2004 00:00:00 GMT-0700</li>
<li>"YYYY-MM-DDTHH:mm:ss.sssZ"， 如 2004-05-25T00:00:00 (兼容 ECMAScript5 才支持)</li>
<li>如果传入的字符串不能表示日期，则会返回 NaN</li>
<li>实际上如果直接将表示日期的字符串传给 Date 构造函数，也会在后台调用 Date.parse()</li>
</ul>
</li>
<li>Date.UTC() ：返回表示日期的毫秒数，与 Date().parse() 在狗键值时使用不同的信息
<ul>
<li>参数分别是 年份、基于 0 的月份（一月是 0、二月是 1，以此类推）、月中的哪一天（1-31）、小时数（0-23）、分钟、秒以及毫秒数
<ul>
<li>只有两个参数（年和月）是必填的，如果没有提供天数则设天数为 1，如果省略其他参数，则统统设为 0</li>
</ul>
</li>
</ul>
</li>
<li><strong>Date.now()</strong>：返回表示调用这个方法时的日期和时间的毫秒数</li>
</ul>
</li>
</ul>
<h4>日期时间组件方法</h4>
<ul>
<li>getTime()：返回表示日期的毫秒数，与 valueOf() 方法返回的值相同</li>
<li>getFullYear()：取得四位数年份</li>
<li>getMonth()：返回日期中的月份，0 表示一月，11 表示 12 月</li>
<li>getDate()：返回日期月份中的天数（1-31）</li>
<li>getDay()：返回日期中的星期的星期几（0 表示星期日，6 表示星期日）</li>
<li>getHours()：返回日期中的小时数（0-23）</li>
<li>getMinutes()：返回日期中的分钟数（0-59）</li>
<li>getSeconds()：返回日期中的秒数（0-59）</li>
<li>getMilliseconds()：返回日期中的毫秒数</li>
</ul>
<h3>RegExp 类型（未完成）</h3>
<ul>
<li>ECMAScript 通过 RegExp 类型来支持正则表达式。</li>
<li>使用下面的语法可以创建一个正则表达式
<ul>
<li><code>var exoression = / pattern / flags</code>
<ul>
<li><code>pattern</code>：可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。</li>
<li>每个正则表达式都可带有一个或多个标志（ <code>flags</code> ），用以标明正则表达式的行为。</li>
<li>正则表达式的匹配模式支持下列三个标志
<ul>
<li><code>g</code>：表示全局（global）模式，即模式将被应用与所有字符串，而非在发现第一个匹配项时立即停止</li>
<li><code>i</code>：表示不区分大小写模式，即在确定匹配项时忽略模式与字符串的大小写</li>
<li><code>m</code>：表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否讯在于模式匹配的项</li>
</ul>
</li>
<li>一个正则表达式就是一个模式与上述三个标志的组合体</li>
<li>模式中所有的元字符都必须转义， 正则表达式中的元字符包括：<code>()</code></li>
<li>例子
<ul>
<li><code>var pattern1 = /at/g</code>：匹配字符串中所有 “at” 的实例</li>
<li><code>vat pattern2 = /[bc]at/i]</code>：匹配第一个 “bat” 或 "cat"，不区分大小写</li>
<li><code>var pattern3 = /.at/gi</code>：匹配所有以 “at” 结尾的 3 个字符的组合，不区分大小写</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>Function 类型</h3>
<ul>
<li>没有重载，同名函数会直接覆盖</li>
<li>函数声明与函数表达式
<ul>
<li>优先读取函数声明，并使其在执行任何代码之前可用（可以访问）</li>
<li>函数表达式必须等到解释器执行到他所在的代码行才会被解释执行</li>
<li>作为值的函数</li>
</ul>
</li>
</ul>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 调用例子</span>
  <span class="token keyword">function</span> <span class="token function">callSomeFunction</span><span class="token punctuation">(</span><span class="token parameter">someFunction<span class="token punctuation">,</span> someArgument</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">someFunction</span><span class="token punctuation">(</span>someArgument<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">add10</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">10</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token function">callSomeFunction</span><span class="token punctuation">(</span>add10<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> name
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token function">callSomeFunction</span><span class="token punctuation">(</span>getGreeting<span class="token punctuation">,</span> <span class="token string">'Nicholas'</span><span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>

  <span class="token comment">// 根据对象属性对数组进行排序</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'孙振洋'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'喜小乐'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'高越'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
  <span class="token keyword">function</span> <span class="token function">creatComparisonFunction</span><span class="token punctuation">(</span><span class="token parameter">propertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> value1 <span class="token operator">=</span> object1<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span>
      <span class="token keyword">let</span> value2 <span class="token operator">=</span> object2<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&gt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">creatComparisonFunction</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul>
<li>函数的内部属性
<ul>
<li>函数内部，有两个特殊的对象：<code>arguments</code> 和 <code>this</code>
<ul>
<li><code>arguments</code>：类数组对象，包含传入函数中的所有参数
<ul>
<li>这个对象还有一个名叫 <code>callee</code> 的属性，该属性是一个指针，指向拥有这个 <code>arguments</code> 对象的函数</li>
</ul>
</li>
<li><code>this</code>：是函数据以执行的环境对象，或者也可以说是 this 值（当在网页的全局作用域中调用函数时，this 对象的引用就是 window）</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// callee</span>
  <span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inner<span class="token punctuation">.</span>caller<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inner<span class="token punctuation">.</span>caller<span class="token punctuation">.</span>caller<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul>
<li>
<p>ECMAScript 5 也规范了另一个函数对象的属性：<code>caller</code></p>
<ul>
<li>这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为 <code>null</code></li>
<li>严格模式下 <code>arguments.callee</code> 会导致错误</li>
<li>ECMAScript 5 还定义了 <code>arguments.caller</code> 属性，但在严格模式下访问它也会导致错误，而在非严格模式下这个属性始终是 <code>undefined</code></li>
<li>定义这个属性是为了分清 <code>arguments.caller</code> 和 函数的 <code>caller</code> 属性，以上变化都是为了加强这门语言的安全性，这样第三方代码库就不能在相同的环境里窥视其它代码了</li>
<li>严格模式还有一个限制：不能为函数的：<code>caller</code> 属性复制，否则会导致 错误</li>
</ul>
</li>
<li>
<p>函数属性和方法</p>
<ul>
<li>每个函数都包含两个属性：<code>length</code> 和 <code>prototype</code>
<ul>
<li><code>length</code>：表示函数希望接收的命名参数的个数，</li>
<li><code>prototype</code>
<ul>
<li>每个函数都包括两个非继承而来的方法：<code>apply()</code> 和 <code>call()</code>，这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内 this 的值。
<ul>
<li><strong>apply()</strong> ：接受两个参数，一个是在其中运行函数的作用域，另一个是参数数组。 其中，第二个参数可以是 Array 的实例，也可以是 arguments 对象</li>
<li><strong>call()</strong>：与 apply() 方法的作用基本相同，它们的区别仅在于接收参数的方式不同。第一个参数 this 值没有变化，变化的是其余参数都是直接传递给函数。换句话说，在使用 call() 方法时，传递给函数的参数据需逐个列举出来</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'red'</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'blue'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'color'</span>
  <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'：'</span>

  <span class="token keyword">function</span> <span class="token function">sayColor</span><span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">sayColor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">[</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// color：red</span>
  <span class="token function">sayColor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//color：blue</span>
  <span class="token function">sayColor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token comment">//color：red</span>
  <span class="token function">sayColor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token comment">// color：blue</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul>
<li><strong>bind()</strong>：创建一个函数的实例，其 this 值会被绑定到传给 bind() 函数的值</li>
</ul>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'red'</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'blue'</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">sayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> sayColorStr <span class="token operator">=</span> <span class="token function">sayColor</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
  <span class="token keyword">var</span> sayColorObj <span class="token operator">=</span> <span class="token function">sayColor</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  <span class="token function">sayColorStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// red</span>
  <span class="token function">sayColorObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// blue</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul>
<li>每个函数继承的 <code>toLocaleString()</code> 和 <code>toString()</code> 方法始终返回函数的代码。
<ul>
<li>返回代码的格式因浏览器而异，有的返回的代码与源代码中的函数代码一样，而有的则返回函数代码的内部表示，即由解释器删除了注释并对某些代码做了改动后的代码。由于这些差异，我们无法根据这两个方法来实现任何功能，不过这些信息在调试代码时很有用。另一个继承的 valueOf() 方法同样也只返回函数代码。</li>
</ul>
</li>
</ul>
<h3>基本包装 类型</h3>
<h4>Boolean 类型</h4>
<ul>
<li>重写了 <code>valueOf()</code> 方法，返回基本类型值 true 或 false</li>
<li>重写了 <code>toString() </code> 方法，返回字符串 “true” 和 “false”</li>
<li>建议永远不要使用 Boolean 对象</li>
</ul>
<h4>Number 类型</h4>
<ul>
<li>重写了 <code>valueOf()</code> 方法，返回对象表示的基本类型的数值</li>
<li>另外两个方法则返回字符串形式的数值</li>
<li>将数值格式化为字符串的方法
<ul>
<li><code>tofixed()</code>：按照指定的小数位（0~20）返回数值的字符串表示（如果数值本身包含的小数位比指定的还多，那么接近指定的最大小数位的值就会舍入）</li>
<li><code>toExponential()</code>：该方法会返回以指数表示法（也成 e 表示法）表示的数值的字符串形式，与 tofixed() 一样，toExponential() 也接受一个参数，而且该参数也是指定输出结果中的小数位数</li>
<li><code>toPrecision()</code>：该方法可能会赶回固定格式大小（ fixed ）格式，也可能返回指数格式，接受一个参数，即表示数值的所有数字位数（不包括指数部分 1~21）</li>
</ul>
</li>
<li>仍然不建议直接实例化 Number 类型</li>
</ul>
<h4>String 类型</h4>
<ul>
<li><code>String</code> 对象的方法也可以在所有基本的字符串值中访问到。其中，继承的 valueOf()、toLocaleString()、toString() 方法都返回对象所表示的基本字符串的值</li>
<li>即使字符串中包含双字节字符（不是占一个字节的 ASCLL 字符），每个字符仍算一个字符</li>
</ul>
<h5>字符方法</h5>
<ul>
<li><code>chartAt()</code> 和 <code>charCodeAt()</code>，这两个方法都接受一个参数，即基于 0 的字符串位置。
<ul>
<li><strong>charAt()</strong> 方法以单字符字符串形式返回给定位置的那个字符</li>
<li><strong>charCodeAt()</strong> 方法返回字符编码</li>
<li><code>str[index]</code> 的形式也可访问字符串中的特定字符（IE8 以前版本的 IE 浏览器不支持）</li>
</ul>
</li>
</ul>
<h5>字符串操作方法</h5>
<ul>
<li><code>contact()</code>：用于将一个或多个字符串拼接起来，返回拼接得到的新字符串</li>
<li><code>slice()</code>、<code>substr()</code>、<code>substring()</code>
<ul>
<li>这三个方法都会返回被操作字符串的一个子字符串</li>
<li>都接受一或两个参数，第一个参数指定子字符串的开始位置</li>
<li><code>slice()</code> 和 <code>substring()</code> 的第二个参数指定的是子字符串最后一个字符后面的位置</li>
<li><code>substr()</code> 的第二个参数指定的是返回字符个数</li>
<li>如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置</li>
<li>与 <code>contact()</code> 方法一样，这三个函数不会修改字符串本身的值，只是返回一个基本类型的字符串值，对原始字符串没有任何影响</li>
<li>当传入参数存在负值时
<ul>
<li><code>slice() </code>：将传入的负值与字符串的长度相加</li>
<li><code>substr()</code>：将负的第一个参数加上字符串的长度，将负的第二个参数转换为 0</li>
<li><code>substring()</code>：将所有负值参数都转换为 0，<strong>该方法会将较小的数作为开始位置，将较大的数作为结束位置</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5>字符串位置方法</h5>
<ul>
<li><code>indexOf()</code>、<code>lastIndexOf()</code>
<ul>
<li>在一个字符串中搜索给定字符串，然后返回字符串位置，如果没有找到该字符串，则返回 -1</li>
<li><code>indexOf()</code> 从字符串的开头向后搜索字符串</li>
<li><code>lastIndexOf()</code> 从字符串的末尾向前搜索字符串</li>
<li>这两个方法都可以接受第二个参数，表示从字符串的哪个位置开始搜索
<ul>
<li><code>indexOf()</code> 从该参数指定的位置向后搜索，忽略该位置之前的所有字符串</li>
</ul>
</li>
<li><code>lastIndexOf()</code> 从该参数指定的位置向前搜索，忽略该位置之后的所有字符串</li>
</ul>
</li>
</ul>
<h5>trim() 方法</h5>
<ul>
<li>创建一个字符串的副本删除前置及后缀的所有空格，然后返回结果</li>
</ul>
<h5>字符串大小写转换方法</h5>
<ul>
<li><code>toLowerCase()</code>：将字符串转化为小写</li>
<li><code>toLocaleLowerCase()</code>：将字符串转化为小写</li>
<li><code>toUpperCase</code>：将字符串转化为大写</li>
<li><code>toLocaleUpperCase()</code>：将字符串转化为大写</li>
<li><code>toLocaleLowerCase()</code> 和 <code>toLocaleUpperCase()</code> 是针对特定地区实现。对有些地区来说，针对地区方法与其通用方法得到的结果相同，但少数语言（如土耳其语）会为 Unicode 大小写转换应用特殊的规则，这时候就必须使用针对地区的方法来保证实现正确的转换。</li>
<li>在不知道自己的代码将在哪种语言环境中运行的情况下，使用针对地区的方法更稳妥一些</li>
</ul>
<h5>字符串的模式匹配方法（未完成）</h5>
<ul>
<li><code>match()</code>：在字符串上调用这个方法，本质上与调用 RegExp 的 exec() 方法相同
<ul>
<li>只接收一个参数，要么是一个正则表达式，要么是一个 RegExp 对象</li>
</ul>
</li>
</ul>
<h5>localeCompare() 方法</h5>
<ul>
<li>比较两个字符串，并返回下列值中的一个
<ul>
<li>如果字符串在字母表中应该排在字符串参数之前，则返回一个负数（大多数情况返回 -1，具体的值要视实现而定）</li>
<li>如果字符串等于字符串参数，则返回 0</li>
<li>如果字符串在字母表中应该排在字符串参数之后，则返回一个正数（大多数情况返回 1，具体的值同样要视实现而定）</li>
</ul>
</li>
</ul>
<h5>fromCharCode() 方法</h5>
<ul>
<li>接受一或多个字符编码，然后将它们转换成一个字符串</li>
<li>从本质上来看，这个方法与实例方法 charCodeAt() 执行的是相反的操作</li>
</ul>
<h4>单体内置对象</h4>
<ul>
<li>ECMA-262 对内置对象的定义是：由 ECMAScript 实现提供的、不依赖宿主环境的对象，这些对象在 ECMAScript 程序执行之前就已经存在了。”意思就是说，开发人员不必显式的实例化内置对象，因为它们已经实例化了。</li>
<li><code>Object</code>、<code>Array</code>、<code>Strinfg</code>、<code>Global</code>、<code>Math</code></li>
</ul>
<h5>Global 对象</h5>
<ul>
<li>ECMAScript 中最特别的一个对象，因为不管你从什么角度上看，这个对象都是不存在的。</li>
<li>ECMAScript 中的 Global 对象在某种意义上是最为一个终极的 “兜底儿对象”来定义的。换句话说，<strong>不属于任何其他对象的属性和方法，最终都是它的属性和方法，事实上没有全局变量或者全局函数，所有在全局作用于中定义的函数和方法都是 Global 对象的属性</strong>。</li>
</ul>
<h6>Global 对象包含的一些方法</h6>
<p>####### URL 编码方法</p>
<ul>
<li><code>encodeURI()</code> 和 <code>encodeURIComponent()</code> 方法可以对 URI（通用资源标识符）进行编码以便发送给浏览器
<ul>
<li>有效的 URI 中不能包含某些字符，例如空格</li>
<li>这两个 URI 编码方法就可以对 URI 进行编码，它们用特殊的 UTF-8 编码替换所有无效的字符，从而让浏览器能够接受和理解</li>
<li><code>encodeURI()</code> 主要用于整个 URI，而 <code>encodeURIComponent()</code> 主要用于对 URI 中的某一段进行编码。</li>
<li>两个函数主要的区别在于 <code>encodeURI()</code> 不会对本身属于 URI 的特殊字符进行编码，如冒号、正斜杠、问好和井字号，而 <code>encodeURIComponent()</code> 会对它发现的任何非标准字符进行编码</li>
</ul>
</li>
<li>与 <code>encodeURI()</code> 和 <code>encodeURIComponent()</code> 对应的两个方法分别是 <code>decodeURI()</code> 和 <code>decodeURIComponent()</code>
<ul>
<li>其中 decodeURI() 只能对使用 <code>encodeURI()</code> 替换的字符进行解码，同样的，decodeURIComponent() 能够解码使用 encodeURIComponent() 编码的所有字符，即它可以解码任何特殊字符的编码</li>
</ul>
</li>
</ul>
<h6>eval() 方法</h6>
<ul>
<li>只接受一个参数，即要执行的 ECMAScript（或 JavaScript）字符串</li>
<li>当解析器发现代码中调用 eval() 方法时，它会将传入的参数当做实际的 ECMAScript 语句来解析，然后把执行结果插入到原来的位置。</li>
<li>通过 eval() 执行的代码被认为是包含该次调用的执行环境的一部分，因此被执行的代码具有与该执行环境相同的作用域链。这意味着通过 eval() 执行的代码可以引用在包含环境中定义的变量</li>
<li>在 eval() 中创建的任何变量或函数都不会被提升，因为在解析代码的时候，他们被包含在一个字符串中，他们只有在 eval() 执行的时候创建</li>
<li>严格模式下，在外部访问不到 eval() 中创建的任何变量或函数，同样，在严格模式下，为 eval 赋值也会导致错误</li>
</ul>
<h6>Global 对象的属性</h6>
<ul>
<li>window 对象 ECMAScript 虽然没有指出如何直接访问 Global 对象，但 Web 浏览器都是将这个全局对象作为 window 对象的一部分加以实现的。因此，在全局作用域中声明的所有变量和函数，就都成为了 window 对象的属性</li>
</ul>
<h5>Math 对象</h5>
<h6>Math 对象的属性</h6>
<p>| 属性         | 说明                                |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>面向对象</title>
      <link>https://codemake.fun/fe/javascript/knowledge/13.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/13.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</guid>
      <source url="https://codemake.fun/rss.xml">面向对象</source>
      <description>理解对象
属性类型

ECMAScript-262 第五版在定义只有内才用的特性时，描述了属性的各种特征。ECMAScript-262 定义这些特性是为了实现 JavaScript 引擎用的，因此在 JavaScript 中不能直接访问和他们。为了表示特性是内部值，该规范把他们放在了两对儿方括号中，例如 [[Enumerable]]

数据属性

[[...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>理解对象</h2>
<h3>属性类型</h3>
<blockquote>
<p>ECMAScript-262 第五版在定义只有内才用的特性时，描述了属性的各种特征。ECMAScript-262 定义这些特性是为了实现 JavaScript 引擎用的，因此在 JavaScript 中不能直接访问和他们。为了表示特性是内部值，该规范把他们放在了两对儿方括号中，例如 [[Enumerable]]</p>
</blockquote>
<h4>数据属性</h4>
<ul>
<li><code>[[Configurable]]</code>：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。
<ul>
<li>一旦此属性定义为 <code>false</code>，则不能再把它变回可配置，此时在调用 <code>Object.defineProperty() </code> 只能修改 <code>writable</code> 特性</li>
</ul>
</li>
<li><code>[[Enumerable]]</code>：表示能否通过 for-in 循环返回属性。</li>
<li><code>[[Writable]]</code>：表示能否修改属性的值。</li>
<li><code>[[Value]]</code>：包含这个属性的数据值。读取属性值的时候从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。</li>
<li><code>Object.defineProperty()</code>：要修改属性默认的特性，必须使用此方法
<ul>
<li>接受三个参数：属性所在对象、属性的名字、和一个描述符对象
<ul>
<li>描述符对象的属性必须是：configurable、enumerable、writable、value。设置其中的一个或多个值可以修改对应的特性值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4>访问器属性</h4>
<ul>
<li>访问器属性不包括数据值；他们包含一对儿 <strong>getter</strong> 和 <strong>setter</strong> 函数（饭不是必须的）</li>
<li>在读取访问器属性时，会调用 <strong>getter</strong> 函数，这个函数负责返回有效的值；</li>
<li>在写入访问器属性时，会调用 <strong>setter</strong> 函数，这个函数负责决定如何处理；数据</li>
<li>访问器属性特性
<ul>
<li><code>[[Configurable]]</code>：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</li>
<li><code>[[Enumerable]]</code>：表示能否通过 for-in 循环返回属性。</li>
<li><code>[[Get]]</code>：在读取属性时调用的函数，默认值为 undefined。</li>
<li><code>[[Set]]</code>：在写入属性时调用的函数，默认值为 undefined。</li>
</ul>
</li>
<li><code>Object.defineProperty()</code>：要定义访问器属性，必须使用此方法
<ul>
<li>接受三个参数：属性所在对象、属性的名字、和一个描述符对象
<ul>
<li>描述符对象的属性必须是：configurable、enumerable、writable、value。设置其中的一个或多个值可以修改对应的特性值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">_year</span><span class="token operator">:</span> <span class="token number">2004</span><span class="token punctuation">,</span> <span class="token comment">// 前面加 '_' 表示只能通过对象方法访问的属性</span>
    <span class="token literal-property property">edition</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;</span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue
        <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2005</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token comment">// 2005</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span> <span class="token comment">// 2</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>定义多个属性</h3>
<ul>
<li><code>Object.defineProperties()</code>：为对象定义多个属性
<ul>
<li>接收两个对象参数
<ul>
<li>第一个对象是要添加和修改其属性的对象</li>
<li>第二个对象的属性与第一个对象中要添加或修改的属性一一对应。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3>读取属性的特性</h3>
<ul>
<li><code>Object.getOwnPropertyDescriptor()</code>：获取给定属性的描述符
<ul>
<li>接收两个参数
<ul>
<li>属性所在的对象</li>
<li>要读取其描述符的属性名称</li>
</ul>
</li>
<li>返回一个对象
<ul>
<li>如果是数据属性，这个对象的属性有 configurable、enumerable、writable、value</li>
<li>如果是访问器属性，这个对象的属性有 configurable、enumerable、get、set</li>
</ul>
</li>
</ul>
</li>
<li>在 JavaScript 中，可以针对任何对象使用 <code>Object.getOwnPropertyDescriptor()</code>，包括 BOM 和 DOM</li>
</ul>
<h2>创建对象</h2>
<h3>工厂模式</h3>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 工厂模式</span>
  <span class="token comment">// 优点：解决了创建多个相似对象的问题</span>
  <span class="token comment">// 缺点：没有解决对象识别的问题（ 即怎样知道一个对象的类型 ）</span>
  <span class="token keyword">function</span> <span class="token function">creatPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age
    obj<span class="token punctuation">.</span>job <span class="token operator">=</span> job
    <span class="token keyword">return</span> obj
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">creatPerson</span><span class="token punctuation">(</span><span class="token string">'sunzhenyang'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'web'</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>构造函数模式</h3>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 构造函数模式</span>
  <span class="token comment">// 优点：可以将它的实例标识为一种特点定的类型</span>
  <span class="token comment">// 缺点：每个方法都要在每个实例上重新创建一遍</span>
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job
  <span class="token punctuation">}</span>

  <span class="token comment">/* new 操作符操作步骤
   * 1. 创建一个新对象
   * 2. 将构造函数的作用域赋给新对象（ 因此 this 就指向了这个新对象 ）
   * 3. 执行构造函数中的代码（ 为这个对象添加属性 ）
   * 4. 返回新对象
   */</span>
  <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'gaoyue'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">'kefu'</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'gaomeili'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'contact'</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul>
<li>对象的 <strong>constructor</strong> 最初是用来表示对象类型的，但是，还是使用 <strong>instanceof</strong> 操作符更可靠一些</li>
<li>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型，这也正是构造函数模式胜过工厂模式的地方</li>
<li>以这种方式定义的构造函数是定义在 Global 对象（在浏览器中是 window 对象）中的。</li>
</ul>
<h4>将构造函数当做函数</h4>
<ul>
<li>构造函数与其他函数唯一的区别，就在于调用他们的方式不同。</li>
<li>构造函数依然势函数，不存在定义构造函数的特殊语法</li>
<li>任何函数吗，只要通过 new 操作符来调用，那他就可以作为构造函数</li>
<li>任何函数，如果不通过构造函数来调用，那它和普通函数也没有区别</li>
</ul>
<h3>原型模式</h3>
<ul>
<li>每个被创建的函数都有 <code>prototype</code>（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。按字面意思理解，那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。</li>
<li>使用原型对象的好处就是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。</li>
</ul>
<h4>理解原型对象</h4>
<ul>
<li>只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象</li>
<li>默认情况下，所有原型对象都会自动获取一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。</li>
<li>创建了自定义构造函数之后，其原型对象默认只会取得 constructor 属性，至于其他方法，则都是从 Object 继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMA-262 第五版管这个指针叫 [[Prototype]]</li>
<li><code>isProtptypeOf()</code>：从本质上讲没如果 [[Prototype]] 指向调用 isPrototypeOf() 方法的对象（Proson.prototype）,那么这个方法就返回 true</li>
<li>ECMAScript 5 增加了一个新方法，叫 <code>Object.getPrototypeOf()</code>，返回 [[Prototype]] 的值</li>
<li>可以通过对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。</li>
<li>如果在实例中有与实例原型相同的属性名，则该属性会屏蔽原型中的属性</li>
<li>使用 delete 操作符可以完全删除实例属性，从而让我们能够重新访问原型中的属性</li>
<li><code>hasOwnProperty()</code>：检测一个属性是存在于实例中还是存在于原型中，这个方法（不要忘了它是从 Object 继承来的）只在给定属性存在于对象实例中时，才会返回 true</li>
<li><code>in</code>：操作符只要通过对象能够访问到属性就返回 true</li>
<li><code>Object.keys(obj)</code>：取的对象上所有可枚举的实例属性，接受一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。</li>
<li><code>Object.getOwnPropertyDescriptor(obj, 'name')</code>：返回实例属性描述符，要取得原型属性的描述符，必须在原型对象上调用 Object.getOwnPropertyDescriptor() 方法</li>
<li><code>Object.keys(obj)</code>：得到对象上的所有可枚举的实例属性</li>
<li><code>Object.getOwnPropertyNames(obj)</code>：得到对象上的所有实例属性，无论是否可枚举</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>设计模式</title>
      <link>https://codemake.fun/fe/javascript/knowledge/14.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/14.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</guid>
      <source url="https://codemake.fun/rss.xml">设计模式</source>
      <description>设计原则
引言

设计：按照一种思路或者标准来实现功能
功能相同，可以有不同的设计方案来实现
伴随着需求增加，设计的作用才能体现出来

《UNIX/LINUX 设计哲学》准则

准则 1：小即是美
准则 2：让每个程序只做好一件事
准则 3：快速建立原型
准则 4：舍弃高效率而取可移植性
准则 5：采用纯文本来存储数据
准则 6：充分利用软件的杠杆效应...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>设计原则</h2>
<h3>引言</h3>
<ul>
<li>设计：按照一种思路或者标准来实现功能</li>
<li>功能相同，可以有不同的设计方案来实现</li>
<li>伴随着需求增加，设计的作用才能体现出来</li>
</ul>
<h3>《UNIX/LINUX 设计哲学》准则</h3>
<ul>
<li>准则 1：小即是美</li>
<li>准则 2：让每个程序只做好一件事</li>
<li>准则 3：快速建立原型</li>
<li>准则 4：舍弃高效率而取可移植性</li>
<li>准则 5：采用纯文本来存储数据</li>
<li>准则 6：充分利用软件的杠杆效应（软件复用）</li>
<li>准则 7：使用 shell 脚本来提高杠杆效应和可以执行</li>
<li>准则 8：避免强制性的用户界面</li>
<li>准则 9：让每个程序都成为过滤器
<ul>
<li><code>ls | grep *.json</code></li>
</ul>
</li>
<li>小准则
<ul>
<li>允许用户定制环境</li>
<li>尽量使操作系统内核小而轻量化</li>
<li>使用小写字母并尽量简短</li>
<li>沉默是金</li>
<li>寻求 90% 的解决方案</li>
</ul>
</li>
</ul>
<h3>五大设计原则</h3>
<h4>单一职责原则（ S ）</h4>
<ul>
<li>一个程序只做好一件事</li>
<li>如果功能过于复杂就拆分开，每个部分保持独立</li>
</ul>
<h4>开放封闭原则（ O ）</h4>
<ul>
<li>对扩展开放，对修改封闭</li>
<li>增加需求时，扩展新代码，而非修改已有代码</li>
</ul>
<h4>里式置换原则（ L ）</h4>
<ul>
<li>子类能覆盖父类</li>
<li>父类能出现的地方，子类就能出现</li>
<li>JS 中使用较少（ 弱类型 &amp; 继承使用较少 ）</li>
</ul>
<h4>接口独立原则（ I ）</h4>
<ul>
<li>保持接口的单一独立，避免出现"胖接口"</li>
<li>JS 中没有接口（ typescript 除外 ），使用较少</li>
<li>类似于单一职责原则，这里更关注接口</li>
</ul>
<h4>依赖倒置原则（ D ）</h4>
<ul>
<li>面向接口编程，依赖于抽象而不依赖于具体</li>
<li>使用方只关注接口而不关注具体类的实现</li>
<li>JS 中使用较少（ 没有接口 &amp; 弱类型 ）</li>
</ul>
<h2>设计模式</h2>
<h3>创建型</h3>
<blockquote>
<p>关注 <strong>如何创建对象</strong>，主要特点是将对象的创建和使用分离。一般抽象了对象实例化的过程，用来帮助创建对象的实例</p>
</blockquote>
<h4>单例模式</h4>
<blockquote>
<p>保证一个类只有一个实例，并提供一个访问它的全局访问点</p>
</blockquote>
<h4>工厂模式</h4>
<blockquote>
<p>根据输入的不同返回不同类的实例，一般用来创建同一类对象</p>
</blockquote>
<h4>抽象工厂模式</h4>
<blockquote>
<p>通过对类的工厂抽象，使其业务用于对产品类簇的创建</p>
</blockquote>
<h4>建造者模式</h4>
<blockquote>
<p>分步构建一个复杂对象，使得同样的构建过程可以采用不同的表示</p>
</blockquote>
<h3>结构型模式</h3>
<blockquote>
<p>关注如何 <strong>将对象按某种布局组成更大的结构</strong></p>
</blockquote>
<h4>代理模式</h4>
<blockquote>
<p>为目标对象创造一个代理对象，以控制对目标对象的访问</p>
</blockquote>
<h4>享元模式</h4>
<blockquote>
<p>运用共享技术来有效地支持大量细粒度对象的复用，减少创建的对象的数量</p>
</blockquote>
<h4>适配器模式</h4>
<blockquote>
<p>解决两个软件实体间接口不兼容的问题</p>
</blockquote>
<h4>装饰者模式</h4>
<blockquote>
<p>向一个现有的对象添加新的功能，同时又不改变其结构</p>
</blockquote>
<h4></h4>
<h4>外观模式</h4>
<blockquote>
<p>为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</p>
</blockquote>
<h4>组合模式</h4>
<blockquote>
<p>用小的子对象构建更大的对象，使得对单个对象和组合对象具有一致的访问性</p>
</blockquote>
<h4>桥接模式</h4>
<blockquote>
<p>将类的抽象部分与实现部分分离，使它们可以独立地变化</p>
</blockquote>
<h4></h4>
<h3>行为型模式</h3>
<blockquote>
<p>行为型模式关注<strong>对象之间的通信</strong>，描述对象之间怎样相互协作，以及怎样分配职责</p>
</blockquote>
<h4>发布 - 订阅模式</h4>
<blockquote>
<p>多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</p>
</blockquote>
<h4>策略模式</h4>
<blockquote>
<p>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换</p>
</blockquote>
<h4>状态模式</h4>
<blockquote>
<p>允许一个对象在其内部状态发生改变时改变其行为能力</p>
</blockquote>
<h4>模板方法模式</h4>
<blockquote>
<p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</p>
</blockquote>
<h4>迭代器模式</h4>
<blockquote>
<p>提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示</p>
</blockquote>
<h4>命令模式</h4>
<blockquote>
<p>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开</p>
</blockquote>
<h4>职责链模式</h4>
<blockquote>
<p>把请求从链中的一个对象传到下一个对象，直到请求被响应为止</p>
</blockquote>
<h4>中介者模式</h4>
<blockquote>
<p>定义一个中介对象来简化原有对象之间的复杂耦合关系</p>
</blockquote>
<h4>备忘录模式</h4>
<h4>访问者模式</h4>
<h4>解释器模式</h4>
<h4>观察者模式</h4>
<h3>其他模式</h3>
<ul>
<li><code>MVC</code>、<code>MVP</code>、<code>MVVM</code>： 用于系统分层，降低层间耦合</li>
<li>模块模式： 将内部的属性和方法隐藏，仅暴露需要暴露的部分</li>
<li>链模式： 通过在对象方法中将当前对象返回，实现对同一个对象的多个方法的链式调用</li>
<li>中间件： 处于操作系统和应用程序之间的软件，来完成对任何数据的预处理和后处理</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>常见考点</title>
      <link>https://codemake.fun/fe/javascript/knowledge/15.%E5%B8%B8%E8%A7%81%E8%80%83%E7%82%B9.html</link>
      <guid>https://codemake.fun/fe/javascript/knowledge/15.%E5%B8%B8%E8%A7%81%E8%80%83%E7%82%B9.html</guid>
      <source url="https://codemake.fun/rss.xml">常见考点</source>
      <description>问题考点
typeof 能判断哪些类型

考点：JS 变量类型
返回判断：

所有值类型
函数
引用类型（不可细分）



何时使用 === 何时使用 ==

考点：强制类型装换
使用：除了 == null 之外，其他一律用 ===

window.onload 和 DOMContentLoaded 的区别

考点：页面渲染过程

JS 创建 10 个...</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>问题考点</h2>
<h3>typeof 能判断哪些类型</h3>
<ul>
<li>考点：JS 变量类型</li>
<li>返回判断：
<ul>
<li>所有值类型</li>
<li>函数</li>
<li>引用类型（不可细分）</li>
</ul>
</li>
</ul>
<h3>何时使用 === 何时使用 ==</h3>
<ul>
<li>考点：强制类型装换</li>
<li>使用：除了 <code>== null</code> 之外，其他一律用 <code>===</code></li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment">// 相当于</span>
<span class="token comment">// if( obj.a === null || obj.a === undefined ) {}</span>
</code></pre></div><h3>window.onload 和 DOMContentLoaded 的区别</h3>
<ul>
<li>考点：页面渲染过程</li>
</ul>
<h3>JS 创建 10 个 a 标签，点击时候弹出对应的序号</h3>
<ul>
<li>考点：JS 作用域</li>
</ul>
<h3>手写节流 throttle 、防抖 debounce</h3>
<ul>
<li>考点：性能、体验优化</li>
</ul>
<h3>Promise 解决了什么问题</h3>
<ul>
<li>考点：JS 异步</li>
</ul>
<h2>知识体系</h2>
<h3>基础语法</h3>
<h4>变量类型和计算</h4>
<h3>JS-Web-API</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 深拷贝
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">obj</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> result
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'sunzhenyang'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'beijing'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
obj2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">'shanghai'</span>
obj2<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'e'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><h3>原型关系</h3>
<ul>
<li>每个 class 都有显式原型 prototype</li>
<li>每个实例都有隐式原型 <strong>proto</strong></li>
<li>实例的隐式原型指向对应 class 的 prototype</li>
<li>每个 class 的显式原型的隐式原型指向其父类的隐式原型</li>
<li>Object 的隐式原型指向 null</li>
<li>instanceof：沿着隐式原型往上找到对应的显式原型</li>
</ul>
<h3>class 本质</h3>
<ul>
<li>原型和原型链的图示</li>
<li>属性和方法的执行规则</li>
</ul>
<p>![](<a href="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/iShot2021-11-07" target="_blank" rel="noopener noreferrer">https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/iShot2021-11-07</a> 20.21.38.png)</p>
<h3>闭包</h3>
<h4>作用域应用的特殊情况</h4>
<ul>
<li>函数作为参数被传递</li>
<li>函数作为返回值被返回</li>
</ul>
<h4>应用</h4>
<p>隐藏数据</p>
<p><strong>自由变量的查找，是在函数定义的地方，向上级作用于查找，不是在执行的地方！！！</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 函数作为返回值</span>
<span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">200</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>

<span class="token comment">// 函数作为参数</span>
<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">200</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment">// 100</span>
</code></pre></div><h3>this</h3>
<h4>调用场景</h4>
<ul>
<li>作为普通函数</li>
<li>使用 call apply bind</li>
<li>作为对象方法被调用</li>
<li>class 方法中被调用</li>
<li>箭头函数</li>
</ul>
<p>*<em>this 取值是在函数执行时被确定的，不是在函数定义时确定的！！！</em></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 数组参数转换为数组</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> window
  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> window
  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> f2 <span class="token operator">=</span> fn1<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

fn1<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>

fn2<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><h2>作业</h2>
<ul>
<li>研究 call bind apply</li>
<li>手写 call bind apply</li>
<li>闭包隐藏数据</li>
<li></li>
</ul>
<h2>运行环境</h2>
<h3>加载过程</h3>
<ul>
<li>DNS 解析：域名 -&gt; IP 地址</li>
<li>浏览器根据 IP 地址向服务器发起 http 请求（三次握手等等）</li>
<li>服务器处理 http 请求，并返回给浏览器</li>
</ul>
<h3>渲染过程</h3>
<ul>
<li>根据 HTML 生成 DOM Tree</li>
<li>根据 CSS 生成 CSSOM</li>
<li>将 DOM Tree 和 CSSOM 整合形成 Render Tree</li>
<li>遇到 <code>&lt;script&gt;</code> 则暂停渲染，优先加载并执行 JS 代码，完成再继续</li>
<li>直至 Render Tree 渲染完成</li>
</ul>
<h3>性能优化</h3>
<ul>
<li>空间换时间（适用于所有变成的性能优化）
<ul>
<li>多使用内存、缓存或其他方法</li>
<li>减少 CPU 计算量，介绍网络加载耗时</li>
</ul>
</li>
<li>从何入手
<ul>
<li>让加载更快
<ul>
<li>减少资源体积，压缩代码</li>
<li>减少访问次数：合并代码，SSR 服务器端渲染</li>
<li>缓存
<ul>
<li>静态资源加 hash 后缀，根据文件内容计算 hash</li>
<li>文件内容不变，则 hash 不变，则 url 不变</li>
<li>url 和 文件不变，则会自动触发 http 缓存机制，返回 304</li>
</ul>
</li>
</ul>
</li>
<li>让渲染更快
<ul>
<li>CSS 放在 head，JS 放在 body 最下面</li>
<li>尽早开始执行 JS，用 DOMContentLoaded 触发</li>
<li>懒加载（ 图片懒加载，上滑加载更多 ）</li>
<li>对 DOM 查询进行缓存</li>
<li>频繁 DOM 操作，合并到一起插入 DOM 结构 （ createDocumentFragment ）</li>
</ul>
</li>
<li>让渲染更加流程
<ul>
<li>节流 throttle</li>
<li>防抖 debounce</li>
</ul>
</li>
<li>使用更快的网络：CDN</li>
</ul>
</li>
</ul>
<h4>防抖 debounce</h4>
<h5>场景</h5>
<ul>
<li>监听输入框文字变化后触发 change 事件</li>
<li>直接用 keyup 事件，则会频繁触发 change 事件</li>
<li>防抖：用户结束或暂停时，才会触发 change 事件</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 防抖</span>
<span class="token keyword">const</span> inputEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
inputEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模拟触发change时间</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputEl<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 防抖封装</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">1000</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> inputEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>
inputEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">'keyup'</span><span class="token punctuation">,</span>
  <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><h4>节流 throttle</h4>
<h5>场景</h5>
<ul>
<li>拖拽一个元素时，要随时拿到该元素被拖拽的位置</li>
<li>直接用 drag 事件，则会频繁触发，很容易导致卡顿</li>
<li>节流：无论拖拽速度多快，都会每个 100ms 触发一次</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 节流</span>
<span class="token keyword">const</span> divEL <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
divEL<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drag'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span>
    timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 节流封装</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> divEL <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
divEL<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">'drag'</span><span class="token punctuation">,</span>
  <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><h3>安全</h3>
<h4>常见的 web 前端攻击方式</h4>
<h5>XSS 跨站请求攻击</h5>
<h5>攻击方式</h5>
<ul>
<li>一个博客网站，我发表一篇博客，其中嵌入 <code>&lt;script&gt;</code> 脚本</li>
<li>脚本内容：获取 cookie，发送到我的服务器（ 服务器配合跨域 ）</li>
<li>发布之篇博客，有人查看它，轻松收割访问者 cookie</li>
</ul>
<h5>预防</h5>
<ul>
<li>替换特殊字符，如 <code>&lt;</code> 变为 <code>&amp;lt;</code>， <code>&gt;</code> 变为 <code>&amp;gt;</code></li>
<li><code>&lt;script&gt;</code> 变为 <code> &amp;lt;script&amp;gt;</code>，直接显示，而不会作为脚本执行</li>
<li>前端要替换，后端也要替换，都做总不会有错</li>
</ul>
<h5>工具</h5>
<ul>
<li><a href="https://github.com/leizongmin/js-xss/blob/master/README.zh.md" target="_blank" rel="noopener noreferrer">根据白名单过滤 HTML(防止 XSS 攻击)</a></li>
</ul>
<h5>XSRF 跨站请求伪造</h5>
<h5>攻击方式</h5>
<ul>
<li>你正在购物，看中了某个商品，商品 id 是 100</li>
<li>付费接口是 <a href="http://xxx.com/pay?id=100%EF%BC%8C%E4%BD%86%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E9%AA%8C%E8%AF%81" target="_blank" rel="noopener noreferrer">xxx.com/pay?id=100，但没有任何验证</a></li>
<li>我是攻击者，我看中了一个商品，id 是 200</li>
<li>我向你发送一封电子邮件，邮件标题很吸引人</li>
<li>但邮件正文隐藏着 &lt;img <a href="http://src=xxx.com/pay?id=200" target="_blank" rel="noopener noreferrer">src=xxx.com/pay?id=200</a> /&gt;</li>
<li>你已查看右键，就帮我购买了 id 是 200 的商品</li>
</ul>
<h5>预防</h5>
<ul>
<li>使用 POST 接口</li>
<li>增加验证，例如密码、短信验证码、指纹等</li>
</ul>
]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-vuepress-img/img/iShot2021-11-07 20.21.38.png" type="image/png"/>
    </item>
    <item>
      <title>Qs</title>
      <link>https://codemake.fun/fe/javascript/plugins/01.Qs.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/01.Qs.html</guid>
      <source url="https://codemake.fun/rss.xml">Qs</source>
      <description>一个 url 参数转化 ( parse 和 stringify ) 的轻量级 JavaScript 库
GitHub

引入
直接引入
导入包
简单使用</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一个 url 参数转化 ( parse 和 stringify ) 的轻量级 JavaScript 库</p>
<p><a href="https://github.com/ljharb/qs" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>引入</h2>
<h3>直接引入</h3>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 注意：此方式引入后会直接挂载到 window.Qs 属性上 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/qs-main/dist/qs.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> qs <span class="token operator">=</span> Qs
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>导入包</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'qs'</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span>
</code></pre></div><h2>简单使用</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Yang'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">'28'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将对象转化为 url 参数</span>
<span class="token keyword">var</span> dataStr <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span> <span class="token comment">// name=Yang&amp;age=28&amp;gender=%E7%94%B7</span>

<span class="token comment">// 将 url 参数转换为对象</span>
<span class="token keyword">var</span> dataObj <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">)</span> <span class="token comment">// {name: 'Yang', age: '28', gender: '男'}</span>

<span class="token comment">// 解析 url 时忽略问号</span>
<span class="token keyword">var</span> dataObj <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">ignoreQueryPrefix</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Lodash</title>
      <link>https://codemake.fun/fe/javascript/plugins/02.Lodash.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/02.Lodash.html</guid>
      <source url="https://codemake.fun/rss.xml">Lodash</source>
      <description>一个一致性、模块化、高性能的 JavaScript 实用工具库
GitHub 中文文档</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一个一致性、模块化、高性能的 JavaScript 实用工具库</p>
<p><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://www.lodashjs.com/" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Day</title>
      <link>https://codemake.fun/fe/javascript/plugins/03.Day.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/03.Day.html</guid>
      <source url="https://codemake.fun/rss.xml">Day</source>
      <description>一个轻量的处理时间和日期的 JavaScript 库
GitHub 中文文档</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一个轻量的处理时间和日期的 JavaScript 库</p>
<p><a href="https://github.com/iamkun/dayjs/blob/dev/docs/zh-cn/README.zh-CN.md" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://dayjs.gitee.io/docs/zh-CN/installation/installation" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Big</title>
      <link>https://codemake.fun/fe/javascript/plugins/04.Big.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/04.Big.html</guid>
      <source url="https://codemake.fun/rss.xml">Big</source>
      <description>一个用于任意精度十进制算术的小型快速 JavaScript 库
GitHub 官方文档</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一个用于任意精度十进制算术的小型快速 JavaScript 库</p>
<p><a href="https://github.com/MikeMcl/big.js" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://mikemcl.github.io/big.js/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>FileSaver</title>
      <link>https://codemake.fun/fe/javascript/plugins/05.FileSaver.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/05.FileSaver.html</guid>
      <source url="https://codemake.fun/rss.xml">FileSaver</source>
      <description>一款基于 HTML5 完成文件保存的插件
GitHub</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一款基于 HTML5 完成文件保存的插件</p>
<p><a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>KeyboardJS</title>
      <link>https://codemake.fun/fe/javascript/plugins/06.KeyboardJS.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/06.KeyboardJS.html</guid>
      <source url="https://codemake.fun/rss.xml">KeyboardJS</source>
      <description>一个设置键绑定和使用组合键来设置复杂的绑定 JavaScript 库
GitHub</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一个设置键绑定和使用组合键来设置复杂的绑定 JavaScript 库</p>
<p><a href="https://github.com/RobertWHurst/KeyboardJS" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Sortable</title>
      <link>https://codemake.fun/fe/javascript/plugins/07.Sortable.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/07.Sortable.html</guid>
      <source url="https://codemake.fun/rss.xml">Sortable</source>
      <description>一款功能强大的 JavaScript 拖拽库
GitHub</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>一款功能强大的 JavaScript 拖拽库</p>
<p><a href="https://github.com/SortableJS/Sortable" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Animation</title>
      <link>https://codemake.fun/fe/javascript/plugins/08.Animation.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/08.Animation.html</guid>
      <source url="https://codemake.fun/rss.xml">Animation</source>
      <description>Anime

一个 JavaScript 动画库，可以处理 CSS 属性，单个 CSS 转换，SVG 或任何 DOM 属性以及 JavaScript 对象
GitHub

Velocity

一个高效的 Javascript 动画引擎，与 jQuery 的 $.animate() 有相同的 API, 同时还支持彩色动画、转换、循环、画架、SVG 支持和...</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>Anime</h2>
<blockquote>
<p>一个 JavaScript 动画库，可以处理 CSS 属性，单个 CSS 转换，SVG 或任何 DOM 属性以及 JavaScript 对象</p>
<p><a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>Velocity</h2>
<blockquote>
<p>一个高效的 Javascript 动画引擎，与 jQuery 的 $.animate() 有相同的 API, 同时还支持彩色动画、转换、循环、画架、SVG 支持和滚动等效果</p>
<p><a href="https://github.com/julianshapiro/velocity" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>Vivus</h2>
<blockquote>
<p>一个零依赖的 JavaScript 动画库，使用用 SVG 制作动画，使其具有被绘制的外观</p>
<p><a href="https://github.com/maxwellito/vivus" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>GreenSock</h2>
<blockquote>
<p>一个 JavaScript 动画库，用于创建高性能、零依赖、跨浏览器动画，已在超过 400 万个网站上使用, 并且可以在 React、Vue、Angular 项目中使用</p>
<p><a href="https://github.com/greensock/GSAP" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>Kute.js</h2>
<blockquote>
<p>一个强大高性能且可扩展的原生 JavaScript 动画引擎，具有跨浏览器动画的基本功能</p>
<p><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://github.com/iiunknown/iscroll5.doc.cn" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>图像相关</title>
      <link>https://codemake.fun/fe/javascript/plugins/09.%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/09.%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3.html</guid>
      <source url="https://codemake.fun/rss.xml">图像相关</source>
      <description>html2canvas

一个将网页 HTML 截图为图片的 JavaScript 插件
GitHub

dom-to-image

一个可以将任意 DOM 节点转换为用 JavaScript 编写的矢量（SVG）或光栅（PNG 或 JPEG）图像的库
GitHub

pica

一个在浏览器中调整图像大小，而不会出现像素失真，处理速度非常快的图片处理...</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>html2canvas</h2>
<blockquote>
<p>一个将网页 HTML 截图为图片的 JavaScript 插件</p>
<p><a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>dom-to-image</h2>
<blockquote>
<p>一个可以将任意 DOM 节点转换为用 JavaScript 编写的矢量（SVG）或光栅（PNG 或 JPEG）图像的库</p>
<p><a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>pica</h2>
<blockquote>
<p>一个在浏览器中调整图像大小，而不会出现像素失真，处理速度非常快的图片处理库</p>
<p><a href="https://github.com/nodeca/pica" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>Fabric</h2>
<blockquote>
<p>一个易于使用的基于 HTML5 canvas 元素的图片编辑器</p>
<p><a href="https://github.com/fabricjs/fabric.js" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>cropperjs</h2>
<blockquote>
<p>一款强大的图片裁切库, 支持灵活的图片裁切方式</p>
<p><a href="https://github.com/fengyuanchen/cropperjs" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>Grade</h2>
<blockquote>
<p>一个基于图像中的前 2 种主要颜色生成互补渐变背景的库</p>
<p><a href="https://github.com/benhowdle89/grade" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Scroll</title>
      <link>https://codemake.fun/fe/javascript/plugins/10.Scroll.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/10.Scroll.html</guid>
      <source url="https://codemake.fun/rss.xml">Scroll</source>
      <description>fullPage.js

一个可轻易创建全屏滚动网站的 js 滚动动画库, 兼容性无可替代
GitHub

Iscroll

一个移动端使用的轻量级滚动插件
GitHub 中文文档

WOW

一个页面向下滚动时触发动画的 JavaScript 库
GitHub

Scroll Reveal

一个页面（向上火向下）滚动时触发动画的 JavaScrip...</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>fullPage.js</h2>
<blockquote>
<p>一个可轻易创建全屏滚动网站的 js 滚动动画库, 兼容性无可替代</p>
<p><a href="https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>Iscroll</h2>
<blockquote>
<p>一个移动端使用的轻量级滚动插件</p>
<p><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="https://iiunknown.gitbooks.io/iscroll-5-api-cn/content/" target="_blank" rel="noopener noreferrer">中文文档</a></p>
</blockquote>
<h2>WOW</h2>
<blockquote>
<p>一个页面向下滚动时触发动画的 JavaScript 库</p>
<p><a href="https://github.com/matthieua/WOW" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
<h2>Scroll Reveal</h2>
<blockquote>
<p>一个页面（向上火向下）滚动时触发动画的 JavaScript 库</p>
<p><a href="https://github.com/jlmakes/scrollreveal" target="_blank" rel="noopener noreferrer">GitHub</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Effect</title>
      <link>https://codemake.fun/fe/javascript/plugins/11.Effect.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/11.Effect.html</guid>
      <source url="https://codemake.fun/rss.xml">Effect</source>
      <description>Typed.js

一个轻松实现打字效果的 js 插件
GitHub 官方文档</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>Typed.js</h2>
<blockquote>
<p>一个轻松实现打字效果的 js 插件</p>
<p><a href="https://github.com/mattboldt/typed.js/" target="_blank" rel="noopener noreferrer">GitHub</a> <a href="http://mattboldt.github.io/typed.js/docs/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>PDF预览</title>
      <link>https://codemake.fun/fe/javascript/plugins/12.PDF%E9%A2%84%E8%A7%88.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/12.PDF%E9%A2%84%E8%A7%88.html</guid>
      <source url="https://codemake.fun/rss.xml">PDF预览</source>
      <description>PDF预览插件
【GitHub】 【官方文档】

下载安装
使用方式

在官方文档中下载预建版本




将文件复制到项目文件夹



直接使用(预览全部)

直接访问：http://localhost/web/viewer.html?file=pdf_url

自定义显示方式</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>PDF预览插件</p>
<p><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="noopener noreferrer">【GitHub】</a> <a href="https://mozilla.github.io/pdf.js/getting_started/" target="_blank" rel="noopener noreferrer">【官方文档】</a></p>
</blockquote>
<h2>下载安装</h2>
<h2>使用方式</h2>
<ol>
<li>在官方文档中下载预建版本</li>
</ol>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20220826165319373.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>
<p>将文件复制到项目文件夹</p>
<figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20220826165437871.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
</ol>
<h3>直接使用(预览全部)</h3>
<ul>
<li>直接访问：<code>http://localhost/web/viewer.html?file=pdf_url</code></li>
</ul>
<h3>自定义显示方式</h3>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>PDF预览测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 控制按钮 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Previous<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span> <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Page: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page_num<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> / <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page_count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>the-canvas<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pdfjs/build/pdf.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// PDF 文件路径</span>
  <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'./test.pdf'</span><span class="token punctuation">;</span>

  <span class="token comment">// 通过 &lt;script&gt; 标签加载，创建访问 PDF.js 导出的快捷方式</span>
  <span class="token keyword">var</span> pdfjsLib <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">'pdfjs-dist/build/pdf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 指定 workerSrc 属性</span>
  pdfjsLib<span class="token punctuation">.</span>GlobalWorkerOptions<span class="token punctuation">.</span>workerSrc <span class="token operator">=</span> <span class="token string">'pdfjs/build/pdf.worker.js'</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> pdfDoc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    pageNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    pageRendering <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    pageNumPending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    scale <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span>
    canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'the-canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 从文档中获取页面信息，相应地调整画布大小，并渲染页面
   * <span class="token keyword">@param</span> <span class="token parameter">num</span> 页码.
   */</span>
  <span class="token keyword">function</span> <span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pageRendering <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用 promise 获取页面</span>
    pdfDoc<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> viewport <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">scale</span><span class="token operator">:</span> scale
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> viewport<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
      canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> viewport<span class="token punctuation">.</span>width<span class="token punctuation">;</span>

      <span class="token comment">// 将 PDF 页面渲染到画布上下文中</span>
      <span class="token keyword">var</span> renderContext <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">canvasContext</span><span class="token operator">:</span> ctx<span class="token punctuation">,</span>
        <span class="token literal-property property">viewport</span><span class="token operator">:</span> viewport
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> renderTask <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>renderContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 等待渲染完成</span>
      renderTask<span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pageRendering <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageNumPending <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 渲染新页面</span>
          <span class="token function">renderPage</span><span class="token punctuation">(</span>pageNumPending<span class="token punctuation">)</span><span class="token punctuation">;</span>
          pageNumPending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 更新页面计数器</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_num'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 如果另一个页面正在渲染，等待直到渲染完成
   * 否则，将立即执行渲染
   */</span>
  <span class="token keyword">function</span> <span class="token function">queueRenderPage</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageRendering<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pageNumPending <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">renderPage</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 显示上一页
   */</span>
  <span class="token keyword">function</span> <span class="token function">onPrevPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageNum <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pageNum<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token function">queueRenderPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'prev'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> onPrevPage<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 显示下一页
   */</span>
  <span class="token keyword">function</span> <span class="token function">onNextPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageNum <span class="token operator">&gt;=</span> pdfDoc<span class="token punctuation">.</span>numPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pageNum<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">queueRenderPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> onNextPage<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 异步下载PDF
   */</span>
  pdfjsLib<span class="token punctuation">.</span><span class="token function">getDocument</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">pdfDoc_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pdfDoc <span class="token operator">=</span> pdfDoc_<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> pdfDoc<span class="token punctuation">.</span>numPages<span class="token punctuation">;</span>

    <span class="token comment">// 初始化显示第一页</span>
    <span class="token function">renderPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20220826165319373.png" type="image/png"/>
    </item>
    <item>
      <title>动画相关</title>
      <link>https://codemake.fun/fe/javascript/plugins/13.%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3.html</link>
      <guid>https://codemake.fun/fe/javascript/plugins/13.%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3.html</guid>
      <source url="https://codemake.fun/rss.xml">动画相关</source>
      <description>Lottie

本文文档出处：【lottie 动画】lottie-web 一个适用于 Web，Android，iOS，React Native 和 Windows 的移动库可以使用 Bodymovin 解析以 JSON 格式导出的 Adobe After Effects 动画，并在本地进行渲染【官方文档】 【GitHub】

安装

通过一个叫 Bod...</description>
      <category>plugins</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<h2>Lottie</h2>
<blockquote>
<p>本文文档出处：<a href="https://www.cnblogs.com/yf-html/p/15406174.html" target="_blank" rel="noopener noreferrer">【lottie 动画】</a><br>lottie-web 一个适用于 Web，Android，iOS，React Native 和 Windows 的移动库<br>可以使用 <code>Bodymovin</code> 解析以 <code>JSON</code> 格式导出的 Adobe After Effects 动画，并在本地进行渲染<br><a href="http://airbnb.io/lottie/#/web" target="_blank" rel="noopener noreferrer">【官方文档】</a> <a href="https://github.com/airbnb/lottie" target="_blank" rel="noopener noreferrer">【GitHub】</a></p>
</blockquote>
<h3>安装</h3>
<blockquote>
<p>通过一个叫 Bodymovin 的开源 After Effects 插件，以 JSON 文件的形式进行输出，Lottie 通过 JSON 格式下载动画数据并实时提供给开发者</p>
</blockquote>
<ul>
<li><code>bodymovin</code> 插件下载安装</li>
<li>安装并解压 <code>bodymovin</code></li>
<li>打开 AE，添加 <code>bodymovin</code> 扩展</li>
<li>导出 <code>data.json</code> 文件，动画的数据文件 详细可参考：<a href="https://wenku.baidu.com/view/af9328ddbbf67c1cfad6195f312b3169a451eafc.html" target="_blank" rel="noopener noreferrer">【AE 插件 Bodymovin.zxp 的安装与使用】</a></li>
</ul>
<h3>使用</h3>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/lottie.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">#animation</span> <span class="token punctuation">{</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 680px<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 1920px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
        <span class="token property">margin-left</span><span class="token punctuation">:</span> -960px<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>banner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>animation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>play<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>停止<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pause<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>暂停<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> animation <span class="token operator">=</span> lottie<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">container</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'animation'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 动画容器</span>
          <span class="token literal-property property">renderer</span><span class="token operator">:</span> <span class="token string">'svg'</span><span class="token punctuation">,</span> <span class="token comment">//渲染格式</span>
          <span class="token literal-property property">loop</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//循环播放</span>
          <span class="token literal-property property">autoplay</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//自动播放</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/data/bannerData.json'</span> <span class="token comment">// 动画 JSON 路径</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// 开始播放</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#play'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          animation<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// 暂停播放，停在当前帧</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#pause'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          bodymovin<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// 停止播放，回到第 0 帧</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#stop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          animation<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token doc-comment comment">/**
         * 事件监听
         * 动画结束：onComplete
         * 当前循环结束：onLoopComplete
         */</span>
        animation<span class="token punctuation">.</span><span class="token function-variable function">onComplete</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
        animation<span class="token punctuation">.</span><span class="token function-variable function">onLoopComplete</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 当前循环结束</span>
        
        <span class="token comment">// 使用addEventListener方式</span>
        <span class="token comment">// animation.addEventListener('complete', function () {})</span>
        <span class="token comment">// animation.addEventListener('loopComplete', function () {})</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>优点</h3>
<ul>
<li>动画由设计使用专业的动画制作工具Adobe After Effects来实现，使动画实现更加方便，动画效果也更好</li>
<li>前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量</li>
<li>设计制作动画，前端展现动画，专业人做专业事，分工合理</li>
<li>卖家秀即买家秀，还原程度百分之百</li>
<li>使用lottie方案，json文件大小会比gif文件小很多，性能也会更好</li>
</ul>
<h3>缺点</h3>
<ul>
<li>lottie-web 文件本身仍然比较大，lottie.js 大小为 513k，轻量版压缩后也有 144k，经过 gzip 后，大小为 39k。所以，需要注意 lottie-web的 加载。目前 H5 项目有离线包，PC 项目也会上 PWA，会对其进行缓存，保证加载速度</li>
<li>lottie 动画其实可以理解为 svg动画/canvas动画，不能给已存在的 html 添加动画效果</li>
<li>动画 json文 件的导出，目前是将AE里面的参数一一导出成 json 内容，如果设计师建了很多的图层，可能仍然有json文件比较大（20kb）的问题。需要设计师遵循一定的规范</li>
<li>有很少量的AE动画效果，lottie无法实现，有些是因为性能问题，有些是没有做。比如：描边动画等</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>无法使用 JSX，除非提供了 --jsx 标志</title>
      <link>https://codemake.fun/fe/javascript/question/01.%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%20JSX%EF%BC%8C%E9%99%A4%E9%9D%9E%E6%8F%90%E4%BE%9B%E4%BA%86%20--jsx%20%E6%A0%87%E5%BF%97.html</link>
      <guid>https://codemake.fun/fe/javascript/question/01.%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%20JSX%EF%BC%8C%E9%99%A4%E9%9D%9E%E6%8F%90%E4%BE%9B%E4%BA%86%20--jsx%20%E6%A0%87%E5%BF%97.html</guid>
      <source url="https://codemake.fun/rss.xml">无法使用 JSX，除非提供了 --jsx 标志</source>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// jsconfig.json 中加入下面属性，重启编辑器</span>
<span class="token string-property property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>判断是否为移动端浏览器</title>
      <link>https://codemake.fun/fe/javascript/tricks/01.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8.html</link>
      <guid>https://codemake.fun/fe/javascript/tricks/01.%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8.html</guid>
      <source url="https://codemake.fun/rss.xml">判断是否为移动端浏览器</source>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> flag <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 移动端</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// PC端</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>网页全屏显示</title>
      <link>https://codemake.fun/fe/javascript/tricks/02.%E7%BD%91%E9%A1%B5%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA.html</link>
      <guid>https://codemake.fun/fe/javascript/tricks/02.%E7%BD%91%E9%A1%B5%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA.html</guid>
      <source url="https://codemake.fun/rss.xml">网页全屏显示</source>
      <description>注意，&amp;lt;iframe&amp;gt; 标签全屏时需要在标签中添加 allowfullscreen 属性</description>
      <category>JavaScript</category>
      <pubDate>Wed, 11 Jan 2023 09:12:15 GMT</pubDate>
      <content:encoded><![CDATA[<!-- more -->
<blockquote>
<p>注意，<code>&lt;iframe&gt;</code> 标签全屏时需要在标签中添加 <code>allowfullscreen</code> 属性</p>
</blockquote>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 全屏</span>
<span class="token keyword">function</span> <span class="token function">handleFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> de <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement
  <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token punctuation">.</span>requestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    de<span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token punctuation">.</span>mozRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    de<span class="token punctuation">.</span><span class="token function">mozRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token punctuation">.</span>webkitRequestFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    de<span class="token punctuation">.</span><span class="token function">webkitRequestFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token punctuation">.</span>msRequestFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    de<span class="token punctuation">.</span><span class="token function">msRequestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'当前浏览器不支持全屏操作'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 取消全屏</span>
<span class="token keyword">function</span> <span class="token function">exitFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>exitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">exitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>mozCancelFullScreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">mozCancelFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>webkitExitFullscreen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">webkitExitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'当前浏览器不支持取消全屏操作'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>