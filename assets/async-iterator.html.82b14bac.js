import{_ as p,o as e,c as o,a as s,b as c,e as a,d as n,r as l}from"./app.41291239.js";const i={},u=a(`<h2 id="\u540C\u6B65\u904D\u5386\u5668\u7684\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u540C\u6B65\u904D\u5386\u5668\u7684\u95EE\u9898" aria-hidden="true">#</a> \u540C\u6B65\u904D\u5386\u5668\u7684\u95EE\u9898</h2><p>\u300A\u904D\u5386\u5668\u300B\u4E00\u7AE0\u8BF4\u8FC7\uFF0CIterator \u63A5\u53E3\u662F\u4E00\u79CD\u6570\u636E\u904D\u5386\u7684\u534F\u8BAE\uFF0C\u53EA\u8981\u8C03\u7528\u904D\u5386\u5668\u5BF9\u8C61\u7684<code>next</code>\u65B9\u6CD5\uFF0C\u5C31\u4F1A\u5F97\u5230\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u8868\u793A\u5F53\u524D\u904D\u5386\u6307\u9488\u6240\u5728\u7684\u90A3\u4E2A\u4F4D\u7F6E\u7684\u4FE1\u606F\u3002<code>next</code>\u65B9\u6CD5\u8FD4\u56DE\u7684\u5BF9\u8C61\u7684\u7ED3\u6784\u662F<code>{value, done}</code>\uFF0C\u5176\u4E2D<code>value</code>\u8868\u793A\u5F53\u524D\u7684\u6570\u636E\u7684\u503C\uFF0C<code>done</code>\u662F\u4E00\u4E2A\u5E03\u5C14\u503C\uFF0C\u8868\u793A\u904D\u5386\u662F\u5426\u7ED3\u675F\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">idMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> index<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">idMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token comment">// 0</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token comment">// 1</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token comment">// 2</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C\u53D8\u91CF<code>it</code>\u662F\u4E00\u4E2A\u904D\u5386\u5668\uFF08iterator\uFF09\u3002\u6BCF\u6B21\u8C03\u7528<code>it.next()</code>\u65B9\u6CD5\uFF0C\u5C31\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u8868\u793A\u5F53\u524D\u904D\u5386\u4F4D\u7F6E\u7684\u4FE1\u606F\u3002</p><p>\u8FD9\u91CC\u9690\u542B\u7740\u4E00\u4E2A\u89C4\u5B9A\uFF0C<code>it.next()</code>\u65B9\u6CD5\u5FC5\u987B\u662F\u540C\u6B65\u7684\uFF0C\u53EA\u8981\u8C03\u7528\u5C31\u5FC5\u987B\u7ACB\u523B\u8FD4\u56DE\u503C\u3002\u4E5F\u5C31\u662F\u8BF4\uFF0C\u4E00\u65E6\u6267\u884C<code>it.next()</code>\u65B9\u6CD5\uFF0C\u5C31\u5FC5\u987B\u540C\u6B65\u5730\u5F97\u5230<code>value</code>\u548C<code>done</code>\u8FD9\u4E24\u4E2A\u5C5E\u6027\u3002\u5982\u679C\u904D\u5386\u6307\u9488\u6B63\u597D\u6307\u5411\u540C\u6B65\u64CD\u4F5C\uFF0C\u5F53\u7136\u6CA1\u6709\u95EE\u9898\uFF0C\u4F46\u5BF9\u4E8E\u5F02\u6B65\u64CD\u4F5C\uFF0C\u5C31\u4E0D\u592A\u5408\u9002\u4E86\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">idMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> index<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>next()</code>\u65B9\u6CD5\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A Promise \u5BF9\u8C61\uFF0C\u8FD9\u6837\u5C31\u4E0D\u884C\uFF0C\u4E0D\u7B26\u5408 Iterator \u534F\u8BAE\uFF0C\u53EA\u8981\u4EE3\u7801\u91CC\u9762\u5305\u542B\u5F02\u6B65\u64CD\u4F5C\u90FD\u4E0D\u884C\u3002\u4E5F\u5C31\u662F\u8BF4\uFF0CIterator \u534F\u8BAE\u91CC\u9762<code>next()</code>\u65B9\u6CD5\u53EA\u80FD\u5305\u542B\u540C\u6B65\u64CD\u4F5C\u3002</p><p>\u76EE\u524D\u7684\u89E3\u51B3\u65B9\u6CD5\u662F\uFF0C\u5C06\u5F02\u6B65\u64CD\u4F5C\u5305\u88C5\u6210 Thunk \u51FD\u6570\u6216\u8005 Promise \u5BF9\u8C61\uFF0C\u5373<code>next()</code>\u65B9\u6CD5\u8FD4\u56DE\u503C\u7684<code>value</code>\u5C5E\u6027\u662F\u4E00\u4E2A Thunk \u51FD\u6570\u6216\u8005 Promise \u5BF9\u8C61\uFF0C\u7B49\u5F85\u4EE5\u540E\u8FD4\u56DE\u771F\u6B63\u7684\u503C\uFF0C\u800C<code>done</code>\u5C5E\u6027\u5219\u8FD8\u662F\u540C\u6B65\u4EA7\u751F\u7684\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">idMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">idMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">o</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">o</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">o</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>value</code>\u5C5E\u6027\u7684\u8FD4\u56DE\u503C\u662F\u4E00\u4E2A Promise \u5BF9\u8C61\uFF0C\u7528\u6765\u653E\u7F6E\u5F02\u6B65\u64CD\u4F5C\u3002\u4F46\u662F\u8FD9\u6837\u5199\u5F88\u9EBB\u70E6\uFF0C\u4E0D\u592A\u7B26\u5408\u76F4\u89C9\uFF0C\u8BED\u4E49\u4E5F\u6BD4\u8F83\u7ED5\u3002</p>`,10),k=n("ES2018 "),r={href:"https://github.com/tc39/proposal-async-iteration",target:"_blank",rel:"noopener noreferrer"},d=n("\u5F15\u5165"),v=n("\u4E86\u201C\u5F02\u6B65\u904D\u5386\u5668\u201D\uFF08Async Iterator\uFF09\uFF0C\u4E3A\u5F02\u6B65\u64CD\u4F5C\u63D0\u4F9B\u539F\u751F\u7684\u904D\u5386\u5668\u63A5\u53E3\uFF0C\u5373"),m=s("code",null,"value",-1),b=n("\u548C"),y=s("code",null,"done",-1),f=n("\u8FD9\u4E24\u4E2A\u5C5E\u6027\u90FD\u662F\u5F02\u6B65\u4EA7\u751F\u3002"),w=a(`<h2 id="\u5F02\u6B65\u904D\u5386\u7684\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65\u904D\u5386\u7684\u63A5\u53E3" aria-hidden="true">#</a> \u5F02\u6B65\u904D\u5386\u7684\u63A5\u53E3</h2><p>\u5F02\u6B65\u904D\u5386\u5668\u7684\u6700\u5927\u7684\u8BED\u6CD5\u7279\u70B9\uFF0C\u5C31\u662F\u8C03\u7528\u904D\u5386\u5668\u7684<code>next</code>\u65B9\u6CD5\uFF0C\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A Promise \u5BF9\u8C61\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>asyncIterator
  <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">/* ... */</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>asyncIterator</code>\u662F\u4E00\u4E2A\u5F02\u6B65\u904D\u5386\u5668\uFF0C\u8C03\u7528<code>next</code>\u65B9\u6CD5\u4EE5\u540E\uFF0C\u8FD4\u56DE\u4E00\u4E2A Promise \u5BF9\u8C61\u3002\u56E0\u6B64\uFF0C\u53EF\u4EE5\u4F7F\u7528<code>then</code>\u65B9\u6CD5\u6307\u5B9A\uFF0C\u8FD9\u4E2A Promise \u5BF9\u8C61\u7684\u72B6\u6001\u53D8\u4E3A<code>resolve</code>\u4EE5\u540E\u7684\u56DE\u8C03\u51FD\u6570\u3002\u56DE\u8C03\u51FD\u6570\u7684\u53C2\u6570\uFF0C\u5219\u662F\u4E00\u4E2A\u5177\u6709<code>value</code>\u548C<code>done</code>\u4E24\u4E2A\u5C5E\u6027\u7684\u5BF9\u8C61\uFF0C\u8FD9\u4E2A\u8DDF\u540C\u6B65\u904D\u5386\u5668\u662F\u4E00\u6837\u7684\u3002</p><p>\u6211\u4EEC\u77E5\u9053\uFF0C\u4E00\u4E2A\u5BF9\u8C61\u7684\u540C\u6B65\u904D\u5386\u5668\u7684\u63A5\u53E3\uFF0C\u90E8\u7F72\u5728<code>Symbol.iterator</code>\u5C5E\u6027\u4E0A\u9762\u3002\u540C\u6837\u5730\uFF0C\u5BF9\u8C61\u7684\u5F02\u6B65\u904D\u5386\u5668\u63A5\u53E3\uFF0C\u90E8\u7F72\u5728<code>Symbol.asyncIterator</code>\u5C5E\u6027\u4E0A\u9762\u3002\u4E0D\u7BA1\u662F\u4EC0\u4E48\u6837\u7684\u5BF9\u8C61\uFF0C\u53EA\u8981\u5B83\u7684<code>Symbol.asyncIterator</code>\u5C5E\u6027\u6709\u503C\uFF0C\u5C31\u8868\u793A\u5E94\u8BE5\u5BF9\u5B83\u8FDB\u884C\u5F02\u6B65\u904D\u5386\u3002</p><p>\u4E0B\u9762\u662F\u4E00\u4E2A\u5F02\u6B65\u904D\u5386\u5668\u7684\u4F8B\u5B50\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> asyncIterable <span class="token operator">=</span> <span class="token function">createAsyncIterable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> asyncIterator <span class="token operator">=</span> asyncIterable<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

asyncIterator
<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">iterResult1</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterResult1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: &#39;a&#39;, done: false }</span>
  <span class="token keyword">return</span> asyncIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">iterResult2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterResult2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: &#39;b&#39;, done: false }</span>
  <span class="token keyword">return</span> asyncIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">iterResult3</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterResult3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: undefined, done: true }</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C\u5F02\u6B65\u904D\u5386\u5668\u5176\u5B9E\u8FD4\u56DE\u4E86\u4E24\u6B21\u503C\u3002\u7B2C\u4E00\u6B21\u8C03\u7528\u7684\u65F6\u5019\uFF0C\u8FD4\u56DE\u4E00\u4E2A Promise \u5BF9\u8C61\uFF1B\u7B49\u5230 Promise \u5BF9\u8C61<code>resolve</code>\u4E86\uFF0C\u518D\u8FD4\u56DE\u4E00\u4E2A\u8868\u793A\u5F53\u524D\u6570\u636E\u6210\u5458\u4FE1\u606F\u7684\u5BF9\u8C61\u3002\u8FD9\u5C31\u662F\u8BF4\uFF0C\u5F02\u6B65\u904D\u5386\u5668\u4E0E\u540C\u6B65\u904D\u5386\u5668\u6700\u7EC8\u884C\u4E3A\u662F\u4E00\u81F4\u7684\uFF0C\u53EA\u662F\u4F1A\u5148\u8FD4\u56DE Promise \u5BF9\u8C61\uFF0C\u4F5C\u4E3A\u4E2D\u4ECB\u3002</p><p>\u7531\u4E8E\u5F02\u6B65\u904D\u5386\u5668\u7684<code>next</code>\u65B9\u6CD5\uFF0C\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A Promise \u5BF9\u8C61\u3002\u56E0\u6B64\uFF0C\u53EF\u4EE5\u628A\u5B83\u653E\u5728<code>await</code>\u547D\u4EE4\u540E\u9762\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> asyncIterable <span class="token operator">=</span> <span class="token function">createAsyncIterable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> asyncIterator <span class="token operator">=</span> asyncIterable<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> asyncIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// { value: &#39;a&#39;, done: false }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> asyncIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// { value: &#39;b&#39;, done: false }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> asyncIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// { value: undefined, done: true }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>next</code>\u65B9\u6CD5\u7528<code>await</code>\u5904\u7406\u4EE5\u540E\uFF0C\u5C31\u4E0D\u5FC5\u4F7F\u7528<code>then</code>\u65B9\u6CD5\u4E86\u3002\u6574\u4E2A\u6D41\u7A0B\u5DF2\u7ECF\u5F88\u63A5\u8FD1\u540C\u6B65\u5904\u7406\u4E86\u3002</p><p>\u6CE8\u610F\uFF0C\u5F02\u6B65\u904D\u5386\u5668\u7684<code>next</code>\u65B9\u6CD5\u662F\u53EF\u4EE5\u8FDE\u7EED\u8C03\u7528\u7684\uFF0C\u4E0D\u5FC5\u7B49\u5230\u4E0A\u4E00\u6B65\u4EA7\u751F\u7684 Promise \u5BF9\u8C61<code>resolve</code>\u4EE5\u540E\u518D\u8C03\u7528\u3002\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C<code>next</code>\u65B9\u6CD5\u4F1A\u7D2F\u79EF\u8D77\u6765\uFF0C\u81EA\u52A8\u6309\u7167\u6BCF\u4E00\u6B65\u7684\u987A\u5E8F\u8FD0\u884C\u4E0B\u53BB\u3002\u4E0B\u9762\u662F\u4E00\u4E2A\u4F8B\u5B50\uFF0C\u628A\u6240\u6709\u7684<code>next</code>\u65B9\u6CD5\u653E\u5728<code>Promise.all</code>\u65B9\u6CD5\u91CC\u9762\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> asyncIterable <span class="token operator">=</span> <span class="token function">createAsyncIterable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> asyncIterator <span class="token operator">=</span> asyncIterable<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> v1<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> v2<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  asyncIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asyncIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53E6\u4E00\u79CD\u7528\u6CD5\u662F\u4E00\u6B21\u6027\u8C03\u7528\u6240\u6709\u7684<code>next</code>\u65B9\u6CD5\uFF0C\u7136\u540E<code>await</code>\u6700\u540E\u4E00\u6B65\u64CD\u4F5C\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> writer <span class="token operator">=</span> <span class="token function">openFile</span><span class="token punctuation">(</span><span class="token string">&#39;someFile.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  writer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  writer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-await-of" tabindex="-1"><a class="header-anchor" href="#for-await-of" aria-hidden="true">#</a> for await...of</h2><p>\u524D\u9762\u4ECB\u7ECD\u8FC7\uFF0C<code>for...of</code>\u5FAA\u73AF\u7528\u4E8E\u904D\u5386\u540C\u6B65\u7684 Iterator \u63A5\u53E3\u3002\u65B0\u5F15\u5165\u7684<code>for await...of</code>\u5FAA\u73AF\uFF0C\u5219\u662F\u7528\u4E8E\u904D\u5386\u5F02\u6B65\u7684 Iterator \u63A5\u53E3\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> <span class="token function">createAsyncIterable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// a</span>
<span class="token comment">// b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>createAsyncIterable()</code>\u8FD4\u56DE\u4E00\u4E2A\u62E5\u6709\u5F02\u6B65\u904D\u5386\u5668\u63A5\u53E3\u7684\u5BF9\u8C61\uFF0C<code>for...of</code>\u5FAA\u73AF\u81EA\u52A8\u8C03\u7528\u8FD9\u4E2A\u5BF9\u8C61\u7684\u5F02\u6B65\u904D\u5386\u5668\u7684<code>next</code>\u65B9\u6CD5\uFF0C\u4F1A\u5F97\u5230\u4E00\u4E2A Promise \u5BF9\u8C61\u3002<code>await</code>\u7528\u6765\u5904\u7406\u8FD9\u4E2A Promise \u5BF9\u8C61\uFF0C\u4E00\u65E6<code>resolve</code>\uFF0C\u5C31\u628A\u5F97\u5230\u7684\u503C\uFF08<code>x</code>\uFF09\u4F20\u5165<code>for...of</code>\u7684\u5FAA\u73AF\u4F53\u3002</p><p><code>for await...of</code>\u5FAA\u73AF\u7684\u4E00\u4E2A\u7528\u9014\uFF0C\u662F\u90E8\u7F72\u4E86 asyncIterable \u64CD\u4F5C\u7684\u5F02\u6B65\u63A5\u53E3\uFF0C\u53EF\u4EE5\u76F4\u63A5\u653E\u5165\u8FD9\u4E2A\u5FAA\u73AF\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span><span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token keyword">of</span> req<span class="token punctuation">)</span> body <span class="token operator">+=</span> data<span class="token punctuation">;</span>
  <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;got&#39;</span><span class="token punctuation">,</span> parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>req</code>\u662F\u4E00\u4E2A asyncIterable \u5BF9\u8C61\uFF0C\u7528\u6765\u5F02\u6B65\u8BFB\u53D6\u6570\u636E\u3002\u53EF\u4EE5\u770B\u5230\uFF0C\u4F7F\u7528<code>for await...of</code>\u5FAA\u73AF\u4EE5\u540E\uFF0C\u4EE3\u7801\u4F1A\u975E\u5E38\u7B80\u6D01\u3002</p><p>\u5982\u679C<code>next</code>\u65B9\u6CD5\u8FD4\u56DE\u7684 Promise \u5BF9\u8C61\u88AB<code>reject</code>\uFF0C<code>for await...of</code>\u5C31\u4F1A\u62A5\u9519\uFF0C\u8981\u7528<code>try...catch</code>\u6355\u6349\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> <span class="token function">createRejectingIterable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6CE8\u610F\uFF0C<code>for await...of</code>\u5FAA\u73AF\u4E5F\u53EF\u4EE5\u7528\u4E8E\u540C\u6B65\u904D\u5386\u5668\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a</span>
<span class="token comment">// b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Node v10 \u652F\u6301\u5F02\u6B65\u904D\u5386\u5668\uFF0CStream \u5C31\u90E8\u7F72\u4E86\u8FD9\u4E2A\u63A5\u53E3\u3002\u4E0B\u9762\u662F\u8BFB\u53D6\u6587\u4EF6\u7684\u4F20\u7EDF\u5199\u6CD5\u4E0E\u5F02\u6B65\u904D\u5386\u5668\u5199\u6CD5\u7684\u5DEE\u5F02\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u4F20\u7EDF\u5199\u6CD5</span>
<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">inputFilePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>
    inputFilePath<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">1024</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt; &#39;</span><span class="token operator">+</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;### DONE ###&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5F02\u6B65\u904D\u5386\u5668\u5199\u6CD5</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">inputFilePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>
    inputFilePath<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">1024</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> chunk <span class="token keyword">of</span> readStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&gt;&gt; &#39;</span><span class="token operator">+</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;### DONE ###&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5F02\u6B65-generator-\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65-generator-\u51FD\u6570" aria-hidden="true">#</a> \u5F02\u6B65 Generator \u51FD\u6570</h2><p>\u5C31\u50CF Generator \u51FD\u6570\u8FD4\u56DE\u4E00\u4E2A\u540C\u6B65\u904D\u5386\u5668\u5BF9\u8C61\u4E00\u6837\uFF0C\u5F02\u6B65 Generator \u51FD\u6570\u7684\u4F5C\u7528\uFF0C\u662F\u8FD4\u56DE\u4E00\u4E2A\u5F02\u6B65\u904D\u5386\u5668\u5BF9\u8C61\u3002</p><p>\u5728\u8BED\u6CD5\u4E0A\uFF0C\u5F02\u6B65 Generator \u51FD\u6570\u5C31\u662F<code>async</code>\u51FD\u6570\u4E0E Generator \u51FD\u6570\u7684\u7ED3\u5408\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> genObj <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
genObj<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// { value: &#39;hello&#39;, done: false }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>gen</code>\u662F\u4E00\u4E2A\u5F02\u6B65 Generator \u51FD\u6570\uFF0C\u6267\u884C\u540E\u8FD4\u56DE\u4E00\u4E2A\u5F02\u6B65 Iterator \u5BF9\u8C61\u3002\u5BF9\u8BE5\u5BF9\u8C61\u8C03\u7528<code>next</code>\u65B9\u6CD5\uFF0C\u8FD4\u56DE\u4E00\u4E2A Promise \u5BF9\u8C61\u3002</p><p>\u5F02\u6B65\u904D\u5386\u5668\u7684\u8BBE\u8BA1\u76EE\u7684\u4E4B\u4E00\uFF0C\u5C31\u662F Generator \u51FD\u6570\u5904\u7406\u540C\u6B65\u64CD\u4F5C\u548C\u5F02\u6B65\u64CD\u4F5C\u65F6\uFF0C\u80FD\u591F\u4F7F\u7528\u540C\u4E00\u5957\u63A5\u53E3\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u540C\u6B65 Generator \u51FD\u6570</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">iterable<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> iter <span class="token operator">=</span> iterable<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>value<span class="token punctuation">,</span> done<span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token function">func</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5F02\u6B65 Generator \u51FD\u6570</span>
<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">iterable<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> iter <span class="token operator">=</span> iterable<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>value<span class="token punctuation">,</span> done<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token function">func</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>map</code>\u662F\u4E00\u4E2A Generator \u51FD\u6570\uFF0C\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F\u53EF\u904D\u5386\u5BF9\u8C61<code>iterable</code>\uFF0C\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u4E00\u4E2A\u56DE\u8C03\u51FD\u6570<code>func</code>\u3002<code>map</code>\u7684\u4F5C\u7528\u662F\u5C06<code>iterable</code>\u6BCF\u4E00\u6B65\u8FD4\u56DE\u7684\u503C\uFF0C\u4F7F\u7528<code>func</code>\u8FDB\u884C\u5904\u7406\u3002\u4E0A\u9762\u6709\u4E24\u4E2A\u7248\u672C\u7684<code>map</code>\uFF0C\u524D\u4E00\u4E2A\u5904\u7406\u540C\u6B65\u904D\u5386\u5668\uFF0C\u540E\u4E00\u4E2A\u5904\u7406\u5F02\u6B65\u904D\u5386\u5668\uFF0C\u53EF\u4EE5\u770B\u5230\u4E24\u4E2A\u7248\u672C\u7684\u5199\u6CD5\u57FA\u672C\u4E0A\u662F\u4E00\u81F4\u7684\u3002</p><p>\u4E0B\u9762\u662F\u53E6\u4E00\u4E2A\u5F02\u6B65 Generator \u51FD\u6570\u7684\u4F8B\u5B50\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fileOpen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">yield</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C\u5F02\u6B65\u64CD\u4F5C\u524D\u9762\u4F7F\u7528<code>await</code>\u5173\u952E\u5B57\u6807\u660E\uFF0C\u5373<code>await</code>\u540E\u9762\u7684\u64CD\u4F5C\uFF0C\u5E94\u8BE5\u8FD4\u56DE Promise \u5BF9\u8C61\u3002\u51E1\u662F\u4F7F\u7528<code>yield</code>\u5173\u952E\u5B57\u7684\u5730\u65B9\uFF0C\u5C31\u662F<code>next</code>\u65B9\u6CD5\u505C\u4E0B\u6765\u7684\u5730\u65B9\uFF0C\u5B83\u540E\u9762\u7684\u8868\u8FBE\u5F0F\u7684\u503C\uFF08\u5373<code>await file.readLine()</code>\u7684\u503C\uFF09\uFF0C\u4F1A\u4F5C\u4E3A<code>next()</code>\u8FD4\u56DE\u5BF9\u8C61\u7684<code>value</code>\u5C5E\u6027\uFF0C\u8FD9\u4E00\u70B9\u662F\u4E0E\u540C\u6B65 Generator \u51FD\u6570\u4E00\u81F4\u7684\u3002</p><p>\u5F02\u6B65 Generator \u51FD\u6570\u5185\u90E8\uFF0C\u80FD\u591F\u540C\u65F6\u4F7F\u7528<code>await</code>\u548C<code>yield</code>\u547D\u4EE4\u3002\u53EF\u4EE5\u8FD9\u6837\u7406\u89E3\uFF0C<code>await</code>\u547D\u4EE4\u7528\u4E8E\u5C06\u5916\u90E8\u64CD\u4F5C\u4EA7\u751F\u7684\u503C\u8F93\u5165\u51FD\u6570\u5185\u90E8\uFF0C<code>yield</code>\u547D\u4EE4\u7528\u4E8E\u5C06\u51FD\u6570\u5185\u90E8\u7684\u503C\u8F93\u51FA\u3002</p><p>\u4E0A\u9762\u4EE3\u7801\u5B9A\u4E49\u7684\u5F02\u6B65 Generator \u51FD\u6570\u7684\u7528\u6CD5\u5982\u4E0B\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> line <span class="token keyword">of</span> <span class="token function">readLines</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F02\u6B65 Generator \u51FD\u6570\u53EF\u4EE5\u4E0E<code>for await...of</code>\u5FAA\u73AF\u7ED3\u5408\u8D77\u6765\u4F7F\u7528\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">prefixLines</span><span class="token punctuation">(</span><span class="token parameter">asyncIterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> line <span class="token keyword">of</span> asyncIterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string">&#39;&gt; &#39;</span> <span class="token operator">+</span> line<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F02\u6B65 Generator \u51FD\u6570\u7684\u8FD4\u56DE\u503C\u662F\u4E00\u4E2A\u5F02\u6B65 Iterator\uFF0C\u5373\u6BCF\u6B21\u8C03\u7528\u5B83\u7684<code>next</code>\u65B9\u6CD5\uFF0C\u4F1A\u8FD4\u56DE\u4E00\u4E2A Promise \u5BF9\u8C61\uFF0C\u4E5F\u5C31\u662F\u8BF4\uFF0C\u8DDF\u5728<code>yield</code>\u547D\u4EE4\u540E\u9762\u7684\uFF0C\u5E94\u8BE5\u662F\u4E00\u4E2A Promise \u5BF9\u8C61\u3002\u5982\u679C\u50CF\u4E0A\u9762\u90A3\u4E2A\u4F8B\u5B50\u90A3\u6837\uFF0C<code>yield</code>\u547D\u4EE4\u540E\u9762\u662F\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u4F1A\u88AB\u81EA\u52A8\u5305\u88C5\u6210\u4E00\u4E2A Promise \u5BF9\u8C61\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.random.org/decimal-fractions/&#39;</span>
    <span class="token operator">+</span> <span class="token string">&#39;?num=1&amp;dec=10&amp;col=1&amp;format=plain&amp;rnd=new&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">asyncGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (A)</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;Result: &#39;</span> <span class="token operator">+</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (B)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> ag <span class="token operator">=</span> <span class="token function">asyncGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ag<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>value<span class="token punctuation">,</span> done<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>ag</code>\u662F<code>asyncGenerator</code>\u51FD\u6570\u8FD4\u56DE\u7684\u5F02\u6B65\u904D\u5386\u5668\u5BF9\u8C61\u3002\u8C03\u7528<code>ag.next()</code>\u4EE5\u540E\uFF0C\u4E0A\u9762\u4EE3\u7801\u7684\u6267\u884C\u987A\u5E8F\u5982\u4E0B\u3002</p><ol><li><code>ag.next()</code>\u7ACB\u523B\u8FD4\u56DE\u4E00\u4E2A Promise \u5BF9\u8C61\u3002</li><li><code>asyncGenerator</code>\u51FD\u6570\u5F00\u59CB\u6267\u884C\uFF0C\u6253\u5370\u51FA<code>Start</code>\u3002</li><li><code>await</code>\u547D\u4EE4\u8FD4\u56DE\u4E00\u4E2A Promise \u5BF9\u8C61\uFF0C<code>asyncGenerator</code>\u51FD\u6570\u505C\u5728\u8FD9\u91CC\u3002</li><li>A \u5904\u53D8\u6210 fulfilled \u72B6\u6001\uFF0C\u4EA7\u751F\u7684\u503C\u653E\u5165<code>result</code>\u53D8\u91CF\uFF0C<code>asyncGenerator</code>\u51FD\u6570\u7EE7\u7EED\u5F80\u4E0B\u6267\u884C\u3002</li><li>\u51FD\u6570\u5728 B \u5904\u7684<code>yield</code>\u6682\u505C\u6267\u884C\uFF0C\u4E00\u65E6<code>yield</code>\u547D\u4EE4\u53D6\u5230\u503C\uFF0C<code>ag.next()</code>\u8FD4\u56DE\u7684\u90A3\u4E2A Promise \u5BF9\u8C61\u53D8\u6210 fulfilled \u72B6\u6001\u3002</li><li><code>ag.next()</code>\u540E\u9762\u7684<code>then</code>\u65B9\u6CD5\u6307\u5B9A\u7684\u56DE\u8C03\u51FD\u6570\u5F00\u59CB\u6267\u884C\u3002\u8BE5\u56DE\u8C03\u51FD\u6570\u7684\u53C2\u6570\u662F\u4E00\u4E2A\u5BF9\u8C61<code>{value, done}</code>\uFF0C\u5176\u4E2D<code>value</code>\u7684\u503C\u662F<code>yield</code>\u547D\u4EE4\u540E\u9762\u7684\u90A3\u4E2A\u8868\u8FBE\u5F0F\u7684\u503C\uFF0C<code>done</code>\u7684\u503C\u662F<code>false</code>\u3002</li></ol><p>A \u548C B \u4E24\u884C\u7684\u4F5C\u7528\u7C7B\u4F3C\u4E8E\u4E0B\u9762\u7684\u4EE3\u7801\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">fetchRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Result: &#39;</span> <span class="token operator">+</span> result<span class="token punctuation">,</span>
       <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u5F02\u6B65 Generator \u51FD\u6570\u629B\u51FA\u9519\u8BEF\uFF0C\u4F1A\u5BFC\u81F4 Promise \u5BF9\u8C61\u7684\u72B6\u6001\u53D8\u4E3A<code>reject</code>\uFF0C\u7136\u540E\u629B\u51FA\u7684\u9519\u8BEF\u88AB<code>catch</code>\u65B9\u6CD5\u6355\u83B7\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">asyncGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Problem!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">asyncGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Problem!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6CE8\u610F\uFF0C\u666E\u901A\u7684 async \u51FD\u6570\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A Promise \u5BF9\u8C61\uFF0C\u800C\u5F02\u6B65 Generator \u51FD\u6570\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A\u5F02\u6B65 Iterator \u5BF9\u8C61\u3002\u53EF\u4EE5\u8FD9\u6837\u7406\u89E3\uFF0Casync \u51FD\u6570\u548C\u5F02\u6B65 Generator \u51FD\u6570\uFF0C\u662F\u5C01\u88C5\u5F02\u6B65\u64CD\u4F5C\u7684\u4E24\u79CD\u65B9\u6CD5\uFF0C\u90FD\u7528\u6765\u8FBE\u5230\u540C\u4E00\u79CD\u76EE\u7684\u3002\u533A\u522B\u5728\u4E8E\uFF0C\u524D\u8005\u81EA\u5E26\u6267\u884C\u5668\uFF0C\u540E\u8005\u901A\u8FC7<code>for await...of</code>\u6267\u884C\uFF0C\u6216\u8005\u81EA\u5DF1\u7F16\u5199\u6267\u884C\u5668\u3002\u4E0B\u9762\u5C31\u662F\u4E00\u4E2A\u5F02\u6B65 Generator \u51FD\u6570\u7684\u6267\u884C\u5668\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">takeAsync</span><span class="token punctuation">(</span><span class="token parameter">asyncIterable<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">Infinity</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> iterator <span class="token operator">=</span> asyncIterable<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>value<span class="token punctuation">,</span> done<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C\u5F02\u6B65 Generator \u51FD\u6570\u4EA7\u751F\u7684\u5F02\u6B65\u904D\u5386\u5668\uFF0C\u4F1A\u901A\u8FC7<code>while</code>\u5FAA\u73AF\u81EA\u52A8\u6267\u884C\uFF0C\u6BCF\u5F53<code>await iterator.next()</code>\u5B8C\u6210\uFF0C\u5C31\u4F1A\u8FDB\u5165\u4E0B\u4E00\u8F6E\u5FAA\u73AF\u3002\u4E00\u65E6<code>done</code>\u5C5E\u6027\u53D8\u4E3A<code>true</code>\uFF0C\u5C31\u4F1A\u8DF3\u51FA\u5FAA\u73AF\uFF0C\u5F02\u6B65\u904D\u5386\u5668\u6267\u884C\u7ED3\u675F\u3002</p><p>\u4E0B\u9762\u662F\u8FD9\u4E2A\u81EA\u52A8\u6267\u884C\u5668\u7684\u4E00\u4E2A\u4F7F\u7528\u5B9E\u4F8B\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">takeAsync</span><span class="token punctuation">(</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F02\u6B65 Generator \u51FD\u6570\u51FA\u73B0\u4EE5\u540E\uFF0CJavaScript \u5C31\u6709\u4E86\u56DB\u79CD\u51FD\u6570\u5F62\u5F0F\uFF1A\u666E\u901A\u51FD\u6570\u3001async \u51FD\u6570\u3001Generator \u51FD\u6570\u548C\u5F02\u6B65 Generator \u51FD\u6570\u3002\u8BF7\u6CE8\u610F\u533A\u5206\u6BCF\u79CD\u51FD\u6570\u7684\u4E0D\u540C\u4E4B\u5904\u3002\u57FA\u672C\u4E0A\uFF0C\u5982\u679C\u662F\u4E00\u7CFB\u5217\u6309\u7167\u987A\u5E8F\u6267\u884C\u7684\u5F02\u6B65\u64CD\u4F5C\uFF08\u6BD4\u5982\u8BFB\u53D6\u6587\u4EF6\uFF0C\u7136\u540E\u5199\u5165\u65B0\u5185\u5BB9\uFF0C\u518D\u5B58\u5165\u786C\u76D8\uFF09\uFF0C\u53EF\u4EE5\u4F7F\u7528 async \u51FD\u6570\uFF1B\u5982\u679C\u662F\u4E00\u7CFB\u5217\u4EA7\u751F\u76F8\u540C\u6570\u636E\u7ED3\u6784\u7684\u5F02\u6B65\u64CD\u4F5C\uFF08\u6BD4\u5982\u4E00\u884C\u4E00\u884C\u8BFB\u53D6\u6587\u4EF6\uFF09\uFF0C\u53EF\u4EE5\u4F7F\u7528\u5F02\u6B65 Generator \u51FD\u6570\u3002</p><p>\u5F02\u6B65 Generator \u51FD\u6570\u4E5F\u53EF\u4EE5\u901A\u8FC7<code>next</code>\u65B9\u6CD5\u7684\u53C2\u6570\uFF0C\u63A5\u6536\u5916\u90E8\u4F20\u5165\u7684\u6570\u636E\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> writer <span class="token operator">=</span> <span class="token function">openFile</span><span class="token punctuation">(</span><span class="token string">&#39;someFile.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7ACB\u5373\u6267\u884C</span>
writer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7ACB\u5373\u6267\u884C</span>
<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7B49\u5F85\u5199\u5165\u7ED3\u675F</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>openFile</code>\u662F\u4E00\u4E2A\u5F02\u6B65 Generator \u51FD\u6570\u3002<code>next</code>\u65B9\u6CD5\u7684\u53C2\u6570\uFF0C\u5411\u8BE5\u51FD\u6570\u5185\u90E8\u7684\u64CD\u4F5C\u4F20\u5165\u6570\u636E\u3002\u6BCF\u6B21<code>next</code>\u65B9\u6CD5\u90FD\u662F\u540C\u6B65\u6267\u884C\u7684\uFF0C\u6700\u540E\u7684<code>await</code>\u547D\u4EE4\u7528\u4E8E\u7B49\u5F85\u6574\u4E2A\u5199\u5165\u64CD\u4F5C\u7ED3\u675F\u3002</p><p>\u6700\u540E\uFF0C\u540C\u6B65\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528\u5F02\u6B65 Generator \u51FD\u6570\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createAsyncIterable</span><span class="token punctuation">(</span><span class="token parameter">syncIterable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> elem <span class="token keyword">of</span> syncIterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> elem<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C\u7531\u4E8E\u6CA1\u6709\u5F02\u6B65\u64CD\u4F5C\uFF0C\u6240\u4EE5\u4E5F\u5C31\u6CA1\u6709\u4F7F\u7528<code>await</code>\u5173\u952E\u5B57\u3002</p><h2 id="yield-\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#yield-\u8BED\u53E5" aria-hidden="true">#</a> yield* \u8BED\u53E5</h2><p><code>yield*</code>\u8BED\u53E5\u4E5F\u53EF\u4EE5\u8DDF\u4E00\u4E2A\u5F02\u6B65\u904D\u5386\u5668\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// result \u6700\u7EC8\u4F1A\u7B49\u4E8E 2</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">gen1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E2D\uFF0C<code>gen2</code>\u51FD\u6570\u91CC\u9762\u7684<code>result</code>\u53D8\u91CF\uFF0C\u6700\u540E\u7684\u503C\u662F<code>2</code>\u3002</p><p>\u4E0E\u540C\u6B65 Generator \u51FD\u6570\u4E00\u6837\uFF0C<code>for await...of</code>\u5FAA\u73AF\u4F1A\u5C55\u5F00<code>yield*</code>\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> <span class="token function">gen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a</span>
<span class="token comment">// b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70);function g(h,x){const t=l("ExternalLinkIcon");return e(),o("div",null,[u,s("p",null,[k,s("a",r,[d,c(t)]),v,m,b,y,f]),w])}var I=p(i,[["render",g],["__file","async-iterator.html.vue"]]);export{I as default};
