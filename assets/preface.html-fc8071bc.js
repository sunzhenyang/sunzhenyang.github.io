import{_ as n,Q as s,S as r,a0 as e,a1 as o,a2 as a,C as c}from"./framework-2ed98ecf.js";const _={},l=e("p",null,"单元测试是前端一个很重要的方向，鉴别一个开源库是否靠谱的一个标准是它的单元测试是否完善。有了完整的单元测试，未来你去重构现有代码或者是增加新的需求都会有十足的把握不出现 regression bug。",-1),i=e("p",null,"在前面的章节，我们已经编写完成 ts-axios 库的代码，并通过 demo 的形式简单地对一些功能做了验证，但是 demo 可以走到的代码分支，覆盖的场景都是极其有限的。为了用更科学的手段保证我们代码的可靠性，我们需要去编写单元测试，并尽可能达到 99% 以上的测试覆盖率。",-1),p={href:"https://jestjs.io/en/",target:"_blank",rel:"noopener noreferrer"},d=e("p",null,"由于时间有限，我不会带大家一行行手敲测试代码，但我会把所有的知识点和测试代码都带大家过一遍，确保大家都能够学会。但是我希望你们在学习的过程中，能自己手敲这些测试代码，这样有助于你们学习和巩固。",-1),u=e("p",null,"通过这一章节的学习，我希望你们能够学会使用 Jest 去对 JS 库或者是 TS 库编写单元测试，并能把所学应用到你们的实际项目中。给自己的代码添加完整的测试代码也是一个非常好的开发习惯，虽然枯燥但十分实用，如果养成这些好习惯会有助于提升你的行业竞争力，所以希望大家虽然把代码实现了，也不要太骄傲，耐心把单元测试写好。",-1),f=e("p",null,"那么接下来就让我们开启单元测试之旅。",-1);function h(m,x){const t=c("ExternalLinkIcon");return s(),r("div",null,[l,i,e("p",null,[o("这门课我们会使用开源测试框架 "),e("a",p,[o("Jest"),a(t)]),o("，它是 Facebook 出品的一个测试框架，相对其他测试框架，它的一大特点就是内置了常用的测试工具，比如自带断言、测试覆盖率工具，实现了开箱即用。")]),d,u,f])}const b=n(_,[["render",h],["__file","preface.html.vue"]]);export{b as default};
