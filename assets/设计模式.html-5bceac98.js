import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e,f as t}from"./app-e1714ab0.js";const l={},c=t(`<blockquote><p>设计模式指的是一套被反复使用的、多数人知晓的、经过分类编目的代码设计经验总结</p></blockquote><h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> 创建型模式</h2><blockquote><p>关注对象创建过程的模式</p></blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h3><blockquote><p>目的：使得类的一个对象成为该类系统中的唯一实例</p><p>定义：一个类有且仅有一个实例，并且自行实例化向整个系统提供</p></blockquote><h4 id="要点" tabindex="-1"><a class="header-anchor" href="#要点" aria-hidden="true">#</a> 要点</h4><ul><li>某个类只能有一个实例</li><li>必须自行创建实例</li><li>必须自行向整个系统提供这个实例</li></ul><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h4><ul><li>只提供私有的构造方法</li><li>含有一个该类的静态私有对象</li><li>提供一个静态的公有方法用于创建和获取静态私有对象</li></ul><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>在内存中只有一个对象，节省内存空间</li><li>避免频繁的创建销毁对象，提高性能</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>扩展比较困难</li><li>实例化后对象长期不用，系统将默认为垃圾进行回收，造成状态丢失</li></ul><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h4><ul><li>创建对象时占用资源过多，但同时又需要用到该类对象</li><li>对系统内资源要求统一读写，如读写配置信息</li><li>当多个实例存在可能引起程序逻辑错误，如号码生成器</li></ul><h4 id="饿汉式" tabindex="-1"><a class="header-anchor" href="#饿汉式" aria-hidden="true">#</a> 饿汉式</h4><blockquote><p>在对象创建过程中立即完成实例化，空间换时间，线程安全</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonOne</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="懒汉式" tabindex="-1"><a class="header-anchor" href="#懒汉式" aria-hidden="true">#</a> 懒汉式</h4><blockquote><p>在对象创建过程中不实例化，在静态共有方法中再实例化，时间换空间，存在线程风险</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonOne</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工厂方法模式 建造者模式 抽象工厂模式 原型模式</p><h2 id="组合型模式" tabindex="-1"><a class="header-anchor" href="#组合型模式" aria-hidden="true">#</a> 组合型模式</h2><blockquote><p>关注类和对象组合的模式</p></blockquote><p>桥接模式 装饰器模式 代理模式 组合模式 享元模式 外观模式 适配器模式</p><h2 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式" aria-hidden="true">#</a> 行为型模式</h2><blockquote><p>关注对象之间的通信过程</p></blockquote><p>备忘录模式 状态模式 解释器模式 命令模式 模板方法模式 访问者模式 中介者模式 迭代子模式 观察者模式 策略模式 责任链模式</p>`,29);function p(i,o){return a(),s("div",null,[e(" more "),c])}const u=n(l,[["render",p],["__file","设计模式.html.vue"]]);export{u as default};
