import{_ as t,P as o,Q as c,Z as p,$ as n,a0 as a,a1 as l,a2 as s,F as i}from"./framework-0028f3de.js";const r={},u=s(`<h2 id="arraybuffer" tabindex="-1"><a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a> ArrayBuffer</h2><blockquote><p>基本的二进制对象，<strong>对固定长度的连续内存空间的引用</strong>，与其他语言相比，JavaScript 中的二进制数据是以非标准方式实现的</p></blockquote><ul><li>它会分配一个固定字节数的连续内存空间，并用 0 进行预填充</li><li>注意：<code>ArrayBuffer</code> <strong>不是某种东西的数组</strong><ul><li>长度是固定的，无法增加或减少它的长度</li><li>正好占用了内存中的那么多空间</li><li>要访问单个字节，需要另一个“视图”对象，而不是 <code>buffer[index]</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个长度为 16 的 buffer</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="视图对象" tabindex="-1"><a class="header-anchor" href="#视图对象" aria-hidden="true">#</a> 视图对象</h2>`,5),d=n("p",null,[a("视图对象本身并不存储任何东西，用于解释存储在 "),n("code",null,"ArrayBuffer"),a(" 中的字节")],-1),k={href:"https://zh.javascript.info/arraybuffer-binary-arrays",target:"_blank",rel:"noopener noreferrer"},m=s(`<ul><li><code>Uint8Array</code>：将 <code>ArrayBuffer</code> 中的每个字节视为 0 到 255 之间的单个数字（每个字节是 8 位，因此只能容纳那么多）。这称为 “8 位无符号整数”</li><li><code>Uint16Array</code>：将每 2 个字节视为一个 0 到 65535 之间的整数。这称为 “16 位无符号整数”</li><li><code>Uint32Array</code>：将每 4 个字节视为一个 0 到 4294967295 之间的整数。这称为 “32 位无符号整数”</li><li><code>Float64Array</code>：将每 8 个字节视为一个 <code>5.0x10-324</code> 到 <code>1.8x10308</code> 之间的浮点数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个长度为 16 的 buffer</span>
<span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 buffer 视为一个 32 位整数的序列</span>
<span class="token function">alert</span><span class="token punctuation">(</span>Uint32Array<span class="token punctuation">.</span><span class="token constant">BYTES_PER_ELEMENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个整数 4 个字节</span>
<span class="token function">alert</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4，它存储了 4 个整数</span>
<span class="token function">alert</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16，字节中的大小</span>

<span class="token comment">// 写入一个值</span>
view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span> <span class="token comment">// 溢出时会在 0 ~ n 之间循环</span>

<span class="token comment">// 遍历值</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123456，然后 0，0，0（一共 4 个值）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function f(v,b){const e=i("ExternalLinkIcon");return o(),c("div",null,[p(" more "),u,n("blockquote",null,[d,n("p",null,[n("a",k,[a("【相关文章】"),l(e)])])]),m])}const h=t(r,[["render",f],["__file","01.Binary.html.vue"]]);export{h as default};
