const t=JSON.parse(`{"key":"v-1a598dda","path":"/technology/es6/iterator.html","title":"Iterator 和 for...of 循环","lang":"zh-CN","frontmatter":{"title":"Iterator 和 for...of 循环","icon":"article","category":"javascript","article":false,"tag":["es6"],"copyright":"Copyright by 阮一峰","description":"Iterator（遍历器）的概念 JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。 遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/es6/iterator.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Iterator 和 for...of 循环"}],["meta",{"property":"og:description","content":"Iterator（遍历器）的概念 JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。 遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"es6"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Iterator 和 for...of 循环\\",\\"description\\":\\"Iterator（遍历器）的概念 JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。 遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。\\"}"]]},"headers":[{"level":2,"title":"Iterator（遍历器）的概念","slug":"iterator-遍历器-的概念","link":"#iterator-遍历器-的概念","children":[]},{"level":2,"title":"默认 Iterator 接口","slug":"默认-iterator-接口","link":"#默认-iterator-接口","children":[]},{"level":2,"title":"调用 Iterator 接口的场合","slug":"调用-iterator-接口的场合","link":"#调用-iterator-接口的场合","children":[]},{"level":2,"title":"字符串的 Iterator 接口","slug":"字符串的-iterator-接口","link":"#字符串的-iterator-接口","children":[]},{"level":2,"title":"Iterator 接口与 Generator 函数","slug":"iterator-接口与-generator-函数","link":"#iterator-接口与-generator-函数","children":[]},{"level":2,"title":"遍历器对象的 return()，throw()","slug":"遍历器对象的-return-throw","link":"#遍历器对象的-return-throw","children":[]},{"level":2,"title":"for...of 循环","slug":"for-of-循环","link":"#for-of-循环","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"Set 和 Map 结构","slug":"set-和-map-结构","link":"#set-和-map-结构","children":[]},{"level":3,"title":"计算生成的数据结构","slug":"计算生成的数据结构","link":"#计算生成的数据结构","children":[]},{"level":3,"title":"类似数组的对象","slug":"类似数组的对象","link":"#类似数组的对象","children":[]},{"level":3,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":3,"title":"与其他遍历语法的比较","slug":"与其他遍历语法的比较","link":"#与其他遍历语法的比较","children":[]}]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":18.27,"words":5481},"filePathRelative":"technology/es6/iterator.md","localizedDate":"2023年1月11日","excerpt":"<h2> Iterator（遍历器）的概念</h2>\\n<p>JavaScript 原有的表示“集合”的数据结构，主要是数组（<code>Array</code>）和对象（<code>Object</code>），ES6 又添加了<code>Map</code>和<code>Set</code>。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是<code>Map</code>，<code>Map</code>的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。</p>\\n<p>遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p>","autoDesc":true}`);export{t as data};
