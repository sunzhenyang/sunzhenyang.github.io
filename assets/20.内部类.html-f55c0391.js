import{_ as n,P as s,Q as a,Z as e,a2 as t}from"./framework-f3782457.js";const p={},c=t(`<h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类" aria-hidden="true">#</a> 内部类</h3><ul><li><p>在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类</p></li><li><p>与之对应，包含内部类的类被称为外部类</p></li></ul><h4 id="成员内部类" tabindex="-1"><a class="header-anchor" href="#成员内部类" aria-hidden="true">#</a> 成员内部类</h4><ul><li><p>内部类中最常见的就是成员内部类，也称为普通内部类</p></li><li><p>内部类在外部使用时，无法直接实例化，需要借由外部类信息才能完成实例化</p></li><li><p>内部类的访问修饰符可以任意，但是访问范围会受到影响</p></li><li><p>内部类可以直接访问外部类的成员，如果出现同名属性，优先访问内部类中定义的</p></li><li><p>可以在内部类中使用 <code>外部类.this.成员</code> 的方式，访问外部类中的同名信息</p></li><li><p>外部类访问内部类信息，需要通过内部类实例，无法直接访问</p></li><li><p>内部类编译后 <code>.class</code> 文件命名：<code>外部类$内部类.class</code></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Person.java</span>
<span class="token comment">// 外部类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Heart</span> <span class="token function">getHeart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 内部类</span>
	<span class="token keyword">class</span> <span class="token class-name">Heart</span><span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token string">&quot;心脏在跳动&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// PersonTest.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Person</span> zhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 方式1：new 外部类.new 内部类</span>
		<span class="token class-name">Person<span class="token punctuation">.</span>Heart</span> heart1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 方式2：外部类对象.new 内部类</span>
		<span class="token class-name">Person<span class="token punctuation">.</span>Heart</span> heart2 <span class="token operator">=</span> zhangsan<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 方式3：外部类对象.获取方法</span>
		<span class="token class-name">Person<span class="token punctuation">.</span>Heart</span> heart3 <span class="token operator">=</span> zhangsan<span class="token punctuation">.</span><span class="token function">getHeart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态内部类" tabindex="-1"><a class="header-anchor" href="#静态内部类" aria-hidden="true">#</a> 静态内部类</h4><ul><li><p>内部类加上 <code>static</code> 修饰符</p></li><li><p>静态内部类中，只能直接访问外部类的静态成员，如果需要调用外部非静态成员，可以通过对象实例</p></li><li><p>静态内部类对象实例化时，可以不依赖于外部类对象</p></li><li><p>可以通过 <code>外部类.内部类.静态成员</code> 的方式，访问内部类中的静态成员</p></li><li><p>当内部类属性与外部类属性同名时，默认直接调用内部类中的成员</p></li><li><p>如果需要访问外部类中的静态属性，可以通过 <code>外部类.属性</code> 的方式</p></li><li><p>如果需要访问外部类中的非静态属性，可以通过 <code>new 外部类().属性</code> 的方式</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取静态内部类对象实例</span>
<span class="token class-name">Person<span class="token punctuation">.</span>Heart</span> heart1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 测试类中调用静态内部类的静态方法</span>
<span class="token class-name">Person<span class="token punctuation">.</span>Heart</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法内部类" tabindex="-1"><a class="header-anchor" href="#方法内部类" aria-hidden="true">#</a> 方法内部类</h4><ul><li>定义在外部类方法中的内部类，也称局部内部类</li><li>作用范围在方法内</li></ul><ul><li>和方法内部成员使用规则一样，不能使用 <code>public</code>、<code>protected</code>、<code>private</code> 修饰</li><li>方法内部类中不能包含静态成员</li><li>方法内部类中可以包含 <code>final</code>、<code>abstract</code> 修饰的成员，但不推荐</li></ul><ul><li>内部类编译后 <code>.class</code> 文件命名：<code>外部类+$数字+内部类.class</code></li></ul><h4 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类" aria-hidden="true">#</a> 匿名内部类</h4><ul><li>将类的定义与类的创建，放到一起完成</li><li>匿名内部类没有类型名称、实例对象名称</li><li>编译后的文件命名：<code>外部类$数字.class</code></li><li>无法在类型名称前添加修饰符 <code>public protected private abstract static</code></li><li>无法在内部编写构造方法，可添加构造代码块</li><li>不能出现静态成员</li><li>匿名内部类可以实现接口也可以继承父类，但是不可兼得</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/2-11 常见内部类的比较.png" alt="2-11 常见内部类的比较" tabindex="0" loading="lazy"><figcaption>2-11 常见内部类的比较</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/2-12 关于内部类的常见问题.png" alt="2-12 关于内部类的常见问题" tabindex="0" loading="lazy"><figcaption>2-12 关于内部类的常见问题</figcaption></figure>`,16);function l(i,o){return s(),a("div",null,[e(" more "),c])}const d=n(p,[["render",l],["__file","20.内部类.html.vue"]]);export{d as default};
