import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t,f as e}from"./app-BybQgHW9.js";const p={},c=e(`<blockquote><p>多态：允许不同类的对象对同一消息做出不同的响应</p></blockquote><ul><li>可以借由向上转型和动态绑定机制完成</li><li>向上转型实现了将子类对象向上转型为父类类型</li><li>动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法</li></ul><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><ul><li>编译时多态：又称设计时多态，通过方法重载实现</li><li>运行时多态：程序运行时动态决定调用哪个方法，Java 中指的多态一般指的就是运行时多态</li></ul><h2 id="必要条件" tabindex="-1"><a class="header-anchor" href="#必要条件"><span>必要条件</span></a></h2><ul><li>满足继承关系</li><li>父类引用指向子类对象</li></ul><h2 id="向上转型" tabindex="-1"><a class="header-anchor" href="#向上转型"><span>向上转型</span></a></h2><ul><li><p>语法：<code>父类类型 父类引用 = new 子类类型(参数)</code></p></li><li><p>又称隐式转型、自动转型</p></li><li><p>父类引用指向子类实例，也表示子类对象可以赋值给父类的对象</p></li><li><p>只能调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法</p></li><li><p>是安全的，因为任何子类都继承并接受了父类的非私有成员方法</p></li><li><p>应用场景：多适用于有多个同父子类共同应用的场景，此时，可以借由父类引用，根据实际需要，转型为特定的子类对象实现多态</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是人就要吃饭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Chinese</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;中国人爱吃饺子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// French</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">French</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;法国人爱喝香槟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Russian</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Russian</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;俄国人爱吃列巴&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">French</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Russian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="向下转型" tabindex="-1"><a class="header-anchor" href="#向下转型"><span>向下转型</span></a></h2><ul><li>在某些资料中也被叫做 强制类型转换</li><li>必须转换为原始类型，不允许转换成非原始类型</li><li>将子类的引用指向父类对象，此处必须进行强制类型转换</li><li>可以调用子类独有的方法</li><li>使用场景：<strong>一般用来重新获得因为向上转型而丢失的子类特性而存在</strong>，因此通常向下转型前需要先进行向上转型，向下转型通常也会结合 <code>instanceof</code> 一起应用，在灵活运用多态的基础上，同时兼顾子类的独有性，相较于直接创建子类实例，提高了代码的灵活性</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cat</span> car  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="绑定机制" tabindex="-1"><a class="header-anchor" href="#绑定机制"><span>绑定机制</span></a></h2><ul><li>将一个方法调用同一个方法所在的类连接到一起，Java 中存在静态绑定和动态绑定。</li><li>静态绑定：指在程序运行之前进行绑定（由编译器和链接程序完成的）,也叫前期绑定</li><li>动态绑定：指在程序运行期间由 JVM 根据对象的类型自动的判断应该调用哪个方法，也叫后期绑定</li></ul><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span>instanceof</span></a></h2><blockquote><p>判断左边对象是否是右边类型的实例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>one <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function o(l,i){return s(),a("div",null,[t(" more "),c])}const d=n(p,[["render",o],["__file","11.多态.html.vue"]]),r=JSON.parse(`{"path":"/notes/java/Java%E5%9F%BA%E7%A1%80/11.%E5%A4%9A%E6%80%81.html","title":"多态","lang":"zh-CN","frontmatter":{"title":"多态","icon":"java","article":true,"breadcrumb":false,"date":"2023-03-04T00:00:00.000Z","order":11,"category":["Java"],"tag":["Java基础"],"description":"多态：允许不同类的对象对同一消息做出不同的响应 可以借由向上转型和动态绑定机制完成 向上转型实现了将子类对象向上转型为父类类型 动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法 分类 编译时多态：又称设计时多态，通过方法重载实现 运行时多态：程序运行时动态决定调用哪个方法，Java 中指的多态一般指的就是运行时多态 必要条件 满足继承关系 ...","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/java/Java%E5%9F%BA%E7%A1%80/11.%E5%A4%9A%E6%80%81.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"多态"}],["meta",{"property":"og:description","content":"多态：允许不同类的对象对同一消息做出不同的响应 可以借由向上转型和动态绑定机制完成 向上转型实现了将子类对象向上转型为父类类型 动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法 分类 编译时多态：又称设计时多态，通过方法重载实现 运行时多态：程序运行时动态决定调用哪个方法，Java 中指的多态一般指的就是运行时多态 必要条件 满足继承关系 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-01T04:40:50.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2023-03-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-01T04:40:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多态\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-01T04:40:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yang\\",\\"url\\":\\"https://codemake.fun/\\",\\"email\\":\\"874530670@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":2,"title":"必要条件","slug":"必要条件","link":"#必要条件","children":[]},{"level":2,"title":"向上转型","slug":"向上转型","link":"#向上转型","children":[]},{"level":2,"title":"向下转型","slug":"向下转型","link":"#向下转型","children":[]},{"level":2,"title":"绑定机制","slug":"绑定机制","link":"#绑定机制","children":[]},{"level":2,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]}],"git":{"createdTime":1680324050000,"updatedTime":1680324050000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":2.61,"words":784},"filePathRelative":"notes/java/Java基础/11.多态.md","localizedDate":"2023年3月4日","excerpt":"","autoDesc":true}`);export{d as comp,r as data};
