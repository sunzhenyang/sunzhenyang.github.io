import{_ as o,P as t,Q as p,Z as c,$ as n,a0 as a,a1 as e,a2 as i,F as l}from"./framework-6c45d443.js";const u={},r=i(`<h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h2><blockquote><p>是直接存储在浏览器中的一小串数据</p><p>通常由 Web 服务器使用响应 <code>Set-Cookie</code> HTTP-header 设置的，然后浏览器使用 <code>Cookie</code> HTTP-header 将它们自动添加到（几乎）每个对相同域的请求中</p></blockquote><h3 id="获取" tabindex="-1"><a class="header-anchor" href="#获取" aria-hidden="true">#</a> 获取</h3><ul><li>值由 <code>name=value</code> 对组成，以 <code>;</code> 分隔。每一个都是独立的 cookie</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> cookie <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h3><ul><li>只会更新其中对应 name 的 cookie，而不会涉及其他 cookie</li><li>cookie 的名称和值可以是任何字符。为了保持有效的格式，它们应该使用内建的 <code>encodeURIComponent</code> 函数对其进行转义 <ul><li><code>encodeURIComponent</code> 编码后的 <code>name=value</code> 对，<strong>大小不能超过 4KB</strong></li><li>每个域的 cookie 总数不得超过 20+ 左右，具体限制取决于浏览器</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;user=yang&#39;</span> <span class="token comment">// 只会更新名称为 user 的 cookie</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=yangwd; path=/; expires=Tue, 19 Jan 2038 03:14:07 GMT&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span>   <span class="token comment">// // 展示所有 cookie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 特殊字符（空格），需要编码</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&quot;name value&quot;</span>

<span class="token comment">// 将 cookie 编码为 my%20name=name%20value</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ...; my%20name=name%20value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h3><h4 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h4><blockquote><p><code>path=/mypath</code>，设置可访问该 cookie 的页面路径</p></blockquote><ul><li>url 路径前缀必须是绝对路径，它使得该路径下的页面可以访问该 cookie，默认为当前路径</li><li>如果一个 cookie 带有 <code>path=/admin</code> 设置，那么该 cookie 在 <code>/admin</code> 和 <code>/admin/something</code> 下都是可见的，但是在 <code>/home</code> 或 <code>/adminpage</code> 下不可见</li><li>通常将 <code>path</code> 设置为根目录：<code>path=/</code>，以使 cookie 对此网站的所有页面可见</li></ul><h4 id="domain" tabindex="-1"><a class="header-anchor" href="#domain" aria-hidden="true">#</a> domain</h4><blockquote><p><code>domain=site.com</code>，设置可访问 cookie 的域，但是在实际中，有一些限制。无法设置任何域</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在 site.com</span>
<span class="token comment">// 使 cookie 可以被在任何子域 *.site.com 访问：</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=John; domain=site.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="expires-max-age" tabindex="-1"><a class="header-anchor" href="#expires-max-age" aria-hidden="true">#</a> expires | max-age</h4><ul><li><p>如果一个 cookie 没有设置这两个参数中的任何一个，那么在关闭浏览器之后，它就会消失，此类 cookie 被称为 &quot;session cookie”</p></li><li><p>为了让 cookie 在浏览器关闭后仍然存在，需要设置 <code>expires</code> 或 <code>max-age</code> 选项中的一个</p><ul><li><code>expires</code>：过期时间，将其设置为过去的时间，则 cookie 会被删除</li><li><code>max-age</code>：过期时间距离当前时间的 <strong>秒</strong> 数，将其设置为 0 或负数，则 cookie 会被删除</li></ul></li><li><p>日期必须完全采用 GMT 时区的这种格式。可以使用 <code>date.toUTCString</code> 来获取它</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>expires<span class="token operator">=</span>Tue<span class="token punctuation">,</span> <span class="token number">19</span> Jan <span class="token number">2038</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">07</span> <span class="token constant">GMT</span>

<span class="token comment">// 当前时间 +1 天</span>
<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">86400e3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=yang; expires=&quot;</span> <span class="token operator">+</span> date<span class="token punctuation">;</span>

<span class="token comment">// cookie 会在一小时后失效</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=yang; max-age=3600&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 删除 cookie（让它立即过期）</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=yang; max-age=0&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="secure" tabindex="-1"><a class="header-anchor" href="#secure" aria-hidden="true">#</a> secure</h4><blockquote><p>设置 Cookie 应只能被通过 HTTPS 传输</p></blockquote><ul><li>默认情况下 cookie 是基于域的，它们不区分协议</li><li>使用此选项，如果一个 cookie 是通过 <code>https://site.com</code> 设置的，那么它不会在相同域的 HTTP 环境下出现</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设我们现在在 HTTPS 环境下</span>
<span class="token comment">// 设置 cookie secure（只在 HTTPS 环境下可访问）</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;user=yang; secure&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="httponly" tabindex="-1"><a class="header-anchor" href="#httponly" aria-hidden="true">#</a> httpOnly</h4><blockquote><p>Web 服务器使用 <code>Set-Cookie</code> header 来设置 cookie，并且，它可以设置 <code>httpOnly</code> 选项</p><p>这个选项禁止任何 JavaScript 访问 cookie。使用 <code>document.cookie</code> 看不到此类 cookie，也无法对此类 cookie 进行操作</p></blockquote><h3 id="实用函数" tabindex="-1"><a class="header-anchor" href="#实用函数" aria-hidden="true">#</a> 实用函数</h3><blockquote><p>当更新或删除一个 cookie 时，我们应该使用和设置 cookie 时相同的路径和域选项</p></blockquote><h4 id="获取-cookie" tabindex="-1"><a class="header-anchor" href="#获取-cookie" aria-hidden="true">#</a> 获取 Cookie</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">name</span> 给定的 Cookie Name
 * 返回具有给定 name 的 cookie
 * 如果没找到，则返回 undefined
 * new RegExp 是动态生成的，以匹配 ; name=&lt;value&gt;
 * cookie 的值是经过编码的，所以 getCookie 使用了内建方法 decodeURIComponent 函数对其进行解码
 */</span>
<span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> matches <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>
    <span class="token string">&quot;(?:^|; )&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$1&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=([^;]*)&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> matches <span class="token operator">?</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置-cookie" tabindex="-1"><a class="header-anchor" href="#设置-cookie" aria-hidden="true">#</a> 设置 Cookie</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 将 cookie 的 name 设置为具有默认值 path=/（可以修改以添加其他默认值）和给定值 value
 */</span>
<span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  options <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 如果需要，可以在这里添加其他默认值</span>
    <span class="token operator">...</span>options
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>expires <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>expires <span class="token operator">=</span> options<span class="token punctuation">.</span>expires<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> updatedCookie <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> optionKey <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    updatedCookie <span class="token operator">+=</span> <span class="token string">&quot;; &quot;</span> <span class="token operator">+</span> optionKey<span class="token punctuation">;</span>
    <span class="token keyword">let</span> optionValue <span class="token operator">=</span> options<span class="token punctuation">[</span>optionKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>optionValue <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      updatedCookie <span class="token operator">+=</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> optionValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> updatedCookie<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用范例：</span>
<span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;max-age&#39;</span><span class="token operator">:</span> <span class="token number">3600</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除-cookie" tabindex="-1"><a class="header-anchor" href="#删除-cookie" aria-hidden="true">#</a> 删除 Cookie</h4><blockquote><p>要删除一个 cookie，可以给它设置一个负的过期时间来调用它</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deleteCookie</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;max-age&#39;</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="storage" tabindex="-1"><a class="header-anchor" href="#storage" aria-hidden="true">#</a> Storage</h2><blockquote><p>Web 存储对象 <code>localStorage</code> 和 <code>sessionStorage</code> 允许在浏览器上保存键/值对</p><p>在页面刷新后（对于 <code>sessionStorage</code>）甚至浏览器完全重启（对于 <code>localStorage</code>）后，数据仍然保留在浏览器中</p></blockquote><ul><li>与 cookie 不同，Web 存储对象不会随每个请求被发送到服务器</li><li>可以保存更多数据，大多数现代浏览器都允许保存至少 5MB 的数据（或更多），并且具有用于配置数据的设置</li><li>服务器无法通过 HTTP header 操纵存储对象，一切都是在 JavaScript 中完成的</li><li>存储绑定到源（域/协议/端口三者），不同协议或子域对应不同的存储对象，它们之间无法访问彼此数据</li><li><strong>键和值都必须是字符串</strong>，如果是任何其他类型，例数字或对象，它会被自动转换为字符串</li></ul><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><h4 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h4><ul><li>在同源的所有标签页和窗口之间共享数据</li><li>数据不会过期，它在浏览器重启甚至系统重启后仍然存在</li></ul><h4 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage</h4><ul><li>数据只存在于当前浏览器标签页 <ul><li>具有相同页面的另一个标签页中将会有不同的存储</li><li>在同一标签页下的 iframe 之间是共享的（假如它们来自相同的源）</li></ul></li><li>数据在页面刷新后仍然保留，但在关闭/重新打开浏览器标签页后不会被保留</li></ul><h3 id="方法、属性" tabindex="-1"><a class="header-anchor" href="#方法、属性" aria-hidden="true">#</a> 方法、属性</h3><blockquote><p>两个存储对象都提供相同的方法和属性</p></blockquote><ul><li><code>setItem(key, value)</code>：存储键/值对</li><li><code>getItem(key)</code>：按照键获取值</li><li><code>removeItem(key)</code>：删除键及其对应的值</li><li><code>clear()</code>：删除所有数据</li><li><code>key(index)</code>：获取该索引下的键名</li><li><code>length</code>：存储的内容的长度</li></ul><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式一</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> key <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方式二</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> localStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localStorage<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 跳过像 &quot;setItem&quot;，&quot;getItem&quot; 等这样的键</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方式三</span>
<span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h3><blockquote><p>当 <code>localStorage</code> 或 <code>sessionStorage</code> 中的数据更新后，<code>storage</code> 事件就会触发（在调用 <code>setItem</code>，<code>removeItem</code>，<code>clear</code> 方法后触发，将键作为对象属性来访问，不会触发 <code>storage</code> 事件）</p><p>该事件会在所有可访问到存储对象的 <code>window</code> 对象上触发，导致当前数据改变的 <code>window</code> 对象除外</p></blockquote><ul><li><code>event.key</code>：发生更改的数据的 <code>key</code>（如果调用的是 <code>.clear()</code> 方法，则为 <code>null</code>）</li><li><code>event.oldValue</code>：旧值（如果是新增数据，则为 <code>null</code>）</li><li><code>event.newValue</code>：新值（如果是删除数据，则为 <code>null</code>）</li><li><code>event.url</code>：发生数据更新的文档的 url</li><li><code>event.storageArea</code>：发生数据更新的 <code>localStorage</code> 或 <code>sessionStorage</code> 对象</li></ul><h2 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb" aria-hidden="true">#</a> IndexedDB</h2>`,51),d={href:"https://zh.javascript.info/indexeddb",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const s=l("ExternalLinkIcon");return t(),p("div",null,[c(" more "),r,n("blockquote",null,[n("p",null,[n("a",d,[a("【相关说明】"),e(s)]),a(),n("a",k,[a("【MDN文档】"),e(s)])])])])}const g=o(u,[["render",m],["__file","04.数据存储.html.vue"]]);export{g as default};
