const e=JSON.parse(`{"key":"v-487fb094","path":"/technology/webapi/server-sent-events.html","title":"Server-Sent Events","lang":"zh-CN","frontmatter":{"title":"Server-Sent Events","icon":"article","category":"Web API","article":false,"tag":["Web API"],"copyright":"Copyright by 阮一峰","description":"简介 服务器向客户端推送数据，有很多解决方案。除了“轮询” 和 WebSocket，HTML 5 还提供了 Server-Sent Events（以下简称 SSE）。 一般来说，HTTP 协议只能客户端向服务器发起请求，服务器不能主动向客户端推送。但是有一种特殊情况，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。 SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/webapi/server-sent-events.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Server-Sent Events"}],["meta",{"property":"og:description","content":"简介 服务器向客户端推送数据，有很多解决方案。除了“轮询” 和 WebSocket，HTML 5 还提供了 Server-Sent Events（以下简称 SSE）。 一般来说，HTTP 协议只能客户端向服务器发起请求，服务器不能主动向客户端推送。但是有一种特殊情况，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。 SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"Web API"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Server-Sent Events\\",\\"description\\":\\"简介 服务器向客户端推送数据，有很多解决方案。除了“轮询” 和 WebSocket，HTML 5 还提供了 Server-Sent Events（以下简称 SSE）。 一般来说，HTTP 协议只能客户端向服务器发起请求，服务器不能主动向客户端推送。但是有一种特殊情况，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。 SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。\\"}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"与 WebSocket 的比较","slug":"与-websocket-的比较","link":"#与-websocket-的比较","children":[]},{"level":2,"title":"客户端 API","slug":"客户端-api","link":"#客户端-api","children":[{"level":3,"title":"EventSource 对象","slug":"eventsource-对象","link":"#eventsource-对象","children":[]},{"level":3,"title":"readyState 属性","slug":"readystate-属性","link":"#readystate-属性","children":[]},{"level":3,"title":"url 属性","slug":"url-属性","link":"#url-属性","children":[]},{"level":3,"title":"withCredentials 属性","slug":"withcredentials-属性","link":"#withcredentials-属性","children":[]},{"level":3,"title":"onopen 属性","slug":"onopen-属性","link":"#onopen-属性","children":[]},{"level":3,"title":"onmessage 属性","slug":"onmessage-属性","link":"#onmessage-属性","children":[]},{"level":3,"title":"onerror 属性","slug":"onerror-属性","link":"#onerror-属性","children":[]},{"level":3,"title":"自定义事件","slug":"自定义事件","link":"#自定义事件","children":[]},{"level":3,"title":"close() 方法","slug":"close-方法","link":"#close-方法","children":[]}]},{"level":2,"title":"服务器实现","slug":"服务器实现","link":"#服务器实现","children":[{"level":3,"title":"数据格式","slug":"数据格式","link":"#数据格式","children":[]},{"level":3,"title":"data 字段","slug":"data-字段","link":"#data-字段","children":[]},{"level":3,"title":"id 字段","slug":"id-字段","link":"#id-字段","children":[]},{"level":3,"title":"event 字段","slug":"event-字段","link":"#event-字段","children":[]},{"level":3,"title":"retry 字段","slug":"retry-字段","link":"#retry-字段","children":[]}]},{"level":2,"title":"Node 服务器实例","slug":"node-服务器实例","link":"#node-服务器实例","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":7.26,"words":2177},"filePathRelative":"technology/webapi/server-sent-events.md","localizedDate":"2023年1月11日","excerpt":"<h2> 简介</h2>\\n<p>服务器向客户端推送数据，有很多解决方案。除了“轮询” 和 WebSocket，HTML 5 还提供了 Server-Sent Events（以下简称 SSE）。</p>\\n<p>一般来说，HTTP 协议只能客户端向服务器发起请求，服务器不能主动向客户端推送。但是有一种特殊情况，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。</p>\\n<p>SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p>","autoDesc":true}`);export{e as data};
