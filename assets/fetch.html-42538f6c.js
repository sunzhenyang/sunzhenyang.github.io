const e=JSON.parse(`{"key":"v-19d33afe","path":"/technology/webapi/fetch.html","title":"Fetch API","lang":"zh-CN","frontmatter":{"title":"Fetch API","icon":"article","category":"Web API","article":false,"tag":["Web API"],"copyright":"Copyright by 阮一峰","description":"fetch()是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。 浏览器原生提供这个对象。本章详细介绍它的用法。 基本用法 fetch()的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。 （1）fetch()使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。 （2）fetch()采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/webapi/fetch.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Fetch API"}],["meta",{"property":"og:description","content":"fetch()是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。 浏览器原生提供这个对象。本章详细介绍它的用法。 基本用法 fetch()的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。 （1）fetch()使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。 （2）fetch()采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"Web API"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Fetch API\\",\\"description\\":\\"fetch()是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。 浏览器原生提供这个对象。本章详细介绍它的用法。 基本用法 fetch()的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。 （1）fetch()使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。 （2）fetch()采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。\\"}"]]},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":2,"title":"Response 对象：处理 HTTP 回应","slug":"response-对象-处理-http-回应","link":"#response-对象-处理-http-回应","children":[{"level":3,"title":"Response 对象的同步属性","slug":"response-对象的同步属性","link":"#response-对象的同步属性","children":[]},{"level":3,"title":"判断请求是否成功","slug":"判断请求是否成功","link":"#判断请求是否成功","children":[]},{"level":3,"title":"Response.headers 属性","slug":"response-headers-属性","link":"#response-headers-属性","children":[]},{"level":3,"title":"读取内容的方法","slug":"读取内容的方法","link":"#读取内容的方法","children":[]},{"level":3,"title":"Response.clone()","slug":"response-clone","link":"#response-clone","children":[]},{"level":3,"title":"Response.body 属性","slug":"response-body-属性","link":"#response-body-属性","children":[]}]},{"level":2,"title":"fetch()的第二个参数：定制 HTTP 请求","slug":"fetch-的第二个参数-定制-http-请求","link":"#fetch-的第二个参数-定制-http-请求","children":[]},{"level":2,"title":"fetch()配置对象的完整 API","slug":"fetch-配置对象的完整-api","link":"#fetch-配置对象的完整-api","children":[]},{"level":2,"title":"取消fetch()请求","slug":"取消fetch-请求","link":"#取消fetch-请求","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":13.53,"words":4059},"filePathRelative":"technology/webapi/fetch.md","localizedDate":"2023年1月11日","excerpt":"<p><code>fetch()</code>是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。</p>\\n<p>浏览器原生提供这个对象。本章详细介绍它的用法。</p>\\n<h2> 基本用法</h2>\\n<p><code>fetch()</code>的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。</p>\\n<p>（1）<code>fetch()</code>使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。</p>\\n<p>（2）<code>fetch()</code>采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。</p>","autoDesc":true}`);export{e as data};
