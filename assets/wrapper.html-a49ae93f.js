const e=JSON.parse(`{"key":"v-2fbdcb0a","path":"/technology/javascript/stdlib/wrapper.html","title":"包装对象","lang":"zh-CN","frontmatter":{"title":"包装对象","icon":"article","category":"javascript","article":false,"tag":["javascript"],"copyright":"Copyright by 阮一峰","description":"定义 对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”（wrapper）。 所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的Number、String、Boolean三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。 var v1 = new Number(123); var v2 = new String('abc'); var v3 = new Boolean(true); typeof v1 // \\"object\\" typeof v2 // \\"object\\" typeof v3 // \\"object\\" v1 === 123 // false v2 === 'abc' // false v3 === true // false","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/javascript/stdlib/wrapper.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"包装对象"}],["meta",{"property":"og:description","content":"定义 对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”（wrapper）。 所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的Number、String、Boolean三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。 var v1 = new Number(123); var v2 = new String('abc'); var v3 = new Boolean(true); typeof v1 // \\"object\\" typeof v2 // \\"object\\" typeof v3 // \\"object\\" v1 === 123 // false v2 === 'abc' // false v3 === true // false"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"包装对象\\",\\"description\\":\\"定义 对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”（wrapper）。 所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的Number、String、Boolean三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。 var v1 = new Number(123); var v2 = new String('abc'); var v3 = new Boolean(true); typeof v1 // \\\\\\"object\\\\\\" typeof v2 // \\\\\\"object\\\\\\" typeof v3 // \\\\\\"object\\\\\\" v1 === 123 // false v2 === 'abc' // false v3 === true // false\\"}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"valueOf()","slug":"valueof","link":"#valueof","children":[]},{"level":3,"title":"toString()","slug":"tostring","link":"#tostring","children":[]}]},{"level":2,"title":"原始类型与实例对象的自动转换","slug":"原始类型与实例对象的自动转换","link":"#原始类型与实例对象的自动转换","children":[]},{"level":2,"title":"自定义方法","slug":"自定义方法","link":"#自定义方法","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":3.95,"words":1185},"filePathRelative":"technology/javascript/stdlib/wrapper.md","localizedDate":"2023年1月11日","excerpt":"<h2> 定义</h2>\\n<p>对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”（wrapper）。</p>\\n<p>所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的<code>Number</code>、<code>String</code>、<code>Boolean</code>三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> v1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">var</span> v2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'abc'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">var</span> v3 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typeof</span> v1 <span class=\\"token comment\\">// \\"object\\"</span>\\n<span class=\\"token keyword\\">typeof</span> v2 <span class=\\"token comment\\">// \\"object\\"</span>\\n<span class=\\"token keyword\\">typeof</span> v3 <span class=\\"token comment\\">// \\"object\\"</span>\\n\\nv1 <span class=\\"token operator\\">===</span> <span class=\\"token number\\">123</span> <span class=\\"token comment\\">// false</span>\\nv2 <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'abc'</span> <span class=\\"token comment\\">// false</span>\\nv3 <span class=\\"token operator\\">===</span> <span class=\\"token boolean\\">true</span> <span class=\\"token comment\\">// false</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
