const n=JSON.parse(`{"key":"v-3fed4dd2","path":"/technology/ts_axios/chapter2/advance.html","title":"高级类型","lang":"zh-CN","frontmatter":{"title":"高级类型","icon":"article","category":"typescript","article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，Person &amp; Loggable 同时是 Person 和 Loggable。 就是说这个类型的对象同时拥有了这两种类型的成员。 我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在 JavaScript 里发生这种情况的场合很多！） 下面是如何创建混入的一个简单例子： function extend&lt;T, U&gt; (first: T, second: U): T &amp; U { let result = {} as T &amp; U for (let id in first) { result[id] = first[id] as any } for (let id in second) { if (!result.hasOwnProperty(id)) { result[id] = second[id] as any } } return result } class Person { constructor (public name: string) { } } interface Loggable { log (): void } class ConsoleLogger implements Loggable { log () { // ... } } var jim = extend(new Person('Jim'), new ConsoleLogger()) var n = jim.name jim.log()","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter2/advance.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"高级类型"}],["meta",{"property":"og:description","content":"交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，Person &amp; Loggable 同时是 Person 和 Loggable。 就是说这个类型的对象同时拥有了这两种类型的成员。 我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在 JavaScript 里发生这种情况的场合很多！） 下面是如何创建混入的一个简单例子： function extend&lt;T, U&gt; (first: T, second: U): T &amp; U { let result = {} as T &amp; U for (let id in first) { result[id] = first[id] as any } for (let id in second) { if (!result.hasOwnProperty(id)) { result[id] = second[id] as any } } return result } class Person { constructor (public name: string) { } } interface Loggable { log (): void } class ConsoleLogger implements Loggable { log () { // ... } } var jim = extend(new Person('Jim'), new ConsoleLogger()) var n = jim.name jim.log()"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"高级类型\\",\\"description\\":\\"交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，Person &amp; Loggable 同时是 Person 和 Loggable。 就是说这个类型的对象同时拥有了这两种类型的成员。 我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在 JavaScript 里发生这种情况的场合很多！） 下面是如何创建混入的一个简单例子： function extend&lt;T, U&gt; (first: T, second: U): T &amp; U { let result = {} as T &amp; U for (let id in first) { result[id] = first[id] as any } for (let id in second) { if (!result.hasOwnProperty(id)) { result[id] = second[id] as any } } return result } class Person { constructor (public name: string) { } } interface Loggable { log (): void } class ConsoleLogger implements Loggable { log () { // ... } } var jim = extend(new Person('Jim'), new ConsoleLogger()) var n = jim.name jim.log()\\"}"]]},"headers":[{"level":2,"title":"交叉类型","slug":"交叉类型","link":"#交叉类型","children":[]},{"level":2,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]},{"level":2,"title":"类型保护","slug":"类型保护","link":"#类型保护","children":[{"level":3,"title":"用户自定义的类型保护","slug":"用户自定义的类型保护","link":"#用户自定义的类型保护","children":[]},{"level":3,"title":"typeof 类型保护","slug":"typeof-类型保护","link":"#typeof-类型保护","children":[]},{"level":3,"title":"instanceof 类型保护","slug":"instanceof-类型保护","link":"#instanceof-类型保护","children":[]}]},{"level":2,"title":"可以为 null 的类型","slug":"可以为-null-的类型","link":"#可以为-null-的类型","children":[{"level":3,"title":"可选参数和可选属性","slug":"可选参数和可选属性","link":"#可选参数和可选属性","children":[]},{"level":3,"title":"类型保护和类型断言","slug":"类型保护和类型断言","link":"#类型保护和类型断言","children":[]}]},{"level":2,"title":"字符串字面量类型","slug":"字符串字面量类型","link":"#字符串字面量类型","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":8.92,"words":2676},"filePathRelative":"technology/ts_axios/chapter2/advance.md","localizedDate":"2023年1月11日","excerpt":"<h2> 交叉类型</h2>\\n<p>交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，<code>Person &amp; Loggable</code> 同时是 <code>Person</code> 和 <code>Loggable</code>。 就是说这个类型的对象同时拥有了这两种类型的成员。</p>\\n<p>我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在 JavaScript 里发生这种情况的场合很多！） 下面是如何创建混入的一个简单例子：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">extend</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">U</span><span class=\\"token operator\\">&gt;</span></span></span> <span class=\\"token punctuation\\">(</span>first<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> second<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">U</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span> <span class=\\"token operator\\">&amp;</span> <span class=\\"token constant\\">U</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">as</span> <span class=\\"token constant\\">T</span> <span class=\\"token operator\\">&amp;</span> <span class=\\"token constant\\">U</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> id <span class=\\"token keyword\\">in</span> first<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    result<span class=\\"token punctuation\\">[</span>id<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> first<span class=\\"token punctuation\\">[</span>id<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">as</span> <span class=\\"token builtin\\">any</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> id <span class=\\"token keyword\\">in</span> second<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasOwnProperty</span><span class=\\"token punctuation\\">(</span>id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      result<span class=\\"token punctuation\\">[</span>id<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> second<span class=\\"token punctuation\\">[</span>id<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">as</span> <span class=\\"token builtin\\">any</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> result\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">public</span> name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Loggable</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">log</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ConsoleLogger</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Loggable</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">log</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// ...</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">var</span> jim <span class=\\"token operator\\">=</span> <span class=\\"token function\\">extend</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Jim'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConsoleLogger</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">var</span> n <span class=\\"token operator\\">=</span> jim<span class=\\"token punctuation\\">.</span>name\\njim<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
