import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as a,c as s,a as c,b as e,d as t,e as o,f as l}from"./app-BybQgHW9.js";const u={},p={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},d=l(`<br><blockquote><p>JavaScript 的 <strong><code>Number</code></strong> 对象是经过封装的能让你处理数字值的对象<br><code>Number</code> 对象由 <code>Number()</code> 构造器创建。</p></blockquote><br><ul><li>参数 <ul><li><code>value</code>：被创建对象的数字值</li></ul></li><li>作用 <ul><li>如果参数无法被转换为数字，则返回 <code>NAN</code></li><li>在非构造器上下文中 (如：没有 <code>new</code> 操作符)，<code>Number</code> 能被用来执行类型转换。</li></ul></li></ul><br><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 示例</span>
<span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a === 123 is false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="number-max-safe-integer" tabindex="-1"><a class="header-anchor" href="#number-max-safe-integer"><span>Number.MAX_SAFE_INTEGER</span></a></h2><blockquote><p>JavaScript 中最大的安全整数 2^53 - 1</p></blockquote><h2 id="number-min-safe-integer" tabindex="-1"><a class="header-anchor" href="#number-min-safe-integer"><span>Number.MIN_SAFE_INTEGER</span></a></h2><blockquote><p>JavaScript 中最小的安全整数 - ( 2^53 - 1 )</p></blockquote><h2 id="number-max-value" tabindex="-1"><a class="header-anchor" href="#number-max-value"><span>Number.MAX_VALUE</span></a></h2><blockquote><p>能表示的最大正数<br>最小的负数是 <code>-MAX_VALUE</code></p></blockquote><h2 id="number-min-value" tabindex="-1"><a class="header-anchor" href="#number-min-value"><span>Number.MIN_VALUE</span></a></h2><blockquote><p>能表示的最小正数即最接近 0 的正数 (实际上不会变成 0)<br>最大的负数是 <code>-MIN_VALUE</code></p></blockquote>`,15),b={id:"number-isnan",tabindex:"-1"},m={class:"header-anchor",href:"#number-isnan"},h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN",target:"_blank",rel:"noopener noreferrer"},_=l("<ul><li>描述：确定传的值是否是 <code>NaN</code>，是全局 <code>isNaN()</code> 的更稳妥的版本，不会自行将参数转换成数字，<strong>只有在参数是值为 NaN 的数字时，才会返回 true</strong>。</li><li>语法：<code>Number.isNaN(value)</code></li><li>参数： <ul><li>value：要检测是否为 <code>NaN</code> 的值</li></ul></li><li>返回值：一个布尔值，表示给定的值是否是 <code>NaN</code></li></ul><br>",2),N={id:"number-isfinite",tabindex:"-1"},g={class:"header-anchor",href:"#number-isfinite"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite",target:"_blank",rel:"noopener noreferrer"},v=l("<ul><li><p>描述：确定传递的值类型及本身是否是有限数，和全局的 isFinite() 函数相比，这个方法不会强制将一个非数值的参数转换成数值，这就意味着，<strong>只有数值类型的值，且是有穷的（finite），才返回 true</strong>。</p></li><li><p>语法：<code>Number.isFinite(value)</code></p></li><li><p>参数</p><ul><li>value：要被检测有穷性的值</li></ul></li><li><p>返回值：一个 布尔值，表示给定的值是否是一个有穷数</p></li></ul><br>",2),k={id:"number-isinteger",tabindex:"-1"},x={class:"header-anchor",href:"#number-isinteger"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger",target:"_blank",rel:"noopener noreferrer"},S=l("<ul><li><p>描述：确定传递的值类型是 <code>number</code>，且是整数</p></li><li><p>语法：<code>Number.isInteger(value)</code></p></li><li><p>参数</p><ul><li>value：要判断此参数是否为整数</li></ul></li><li><p>返回值：判断给定值是否是整数的 <code>Boolean</code> 值</p></li></ul><br>",2),E={id:"number-parsefloat",tabindex:"-1"},j={class:"header-anchor",href:"#number-parsefloat"},z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat",target:"_blank",rel:"noopener noreferrer"},A=l("<ul><li><p>描述：和全局对象 parseFloat() 一样，把一个字符串解析成浮点数</p></li><li><p>语法：<code>Number.parseFloat(string)</code></p></li><li><p>参数</p><ul><li>string：被解析的字符串</li></ul></li><li><p>返回值：给定值被解析成浮点数，如果无法被解析成浮点数，则返回 <code>NaN</code></p></li></ul><br>",2),F={id:"number-parseint",tabindex:"-1"},O={class:"header-anchor",href:"#number-parseint"},I={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt",target:"_blank",rel:"noopener noreferrer"},R=l("<ul><li><p>描述：和全局对象 parseInt() 一样，把字符串 [ 参数 string 的值] 解析成整数</p></li><li><p>语法：<code>Number.parseInt(string[, radix])</code></p></li><li><p>参数</p><ul><li>string：要解析的值，如果此参数不是字符串，则使用ToString抽象操作将其转换为字符串，忽略此参数中的前导空格</li><li>radix：一个介于2到36之间的整数，代表字符串的基数(数学数字系统中的基)，小心-这并不是默认为10</li></ul></li><li><p>返回值：从给定字符串中解析的整数，如果基数小于11，且第一个非空白字符不能转换为数字，则返回 <code>NaN</code></p></li></ul><br>",2),J={id:"number-prototype-toexponential",tabindex:"-1"},C={class:"header-anchor",href:"#number-prototype-toexponential"},G={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential",target:"_blank",rel:"noopener noreferrer"},M=l("<ul><li><p>描述：以指数表示法返回该数值字符串表示形式</p></li><li><p>语法：<code>numObj.toExponential(fractionDigits)</code></p></li><li><p>参数</p><ul><li>fractionDigits：可选。一个整数，用来指定小数点后有几位数字。默认情况下用尽可能多的位数来显示数字。</li></ul></li><li><p>返回值：一个用幂的形式 (科学记数法) 来表示Number 对象的字符串。小数点后以fractionDigits 提供的值来四舍五入。如果 fractionDigits 参数被忽略了，小数点后的将尽可能用最多的位数来表示该数值</p></li><li><p>注意</p><ul><li>对数值字面量使用 <code>toExponential()</code> 方法，且该数值没有小数点和指数时，应该在该数值与该方法之间隔开一个空格，以避免点号被解释为一个小数点。也可以使用两个点号调用该方法。</li><li>如果一个数值的小数位数多余 fractionDigits 参数所提供的，则该数值将会在 fractionDigits 指定的小数位数处四舍五入</li><li>如果一个数值的小数位数多余 fractionDigits 参数所提供的，则该数值将会在 fractionDigits 指定的小数位数处四舍五入。</li><li>如果 fractionDigits 太小或太大将会抛出该错误 <code> RangeError</code> 。介于 0 和 20（包括20）之间的值不会引起 <code>RangeError </code> ，执行环境也可以支持更大或更小范围</li><li>如果该方法在一个非数值类型对象上调用，会抛出 <code>TypeError</code>错误</li></ul></li></ul><br>",2),T={id:"number-prototype-tofixed",tabindex:"-1"},q={class:"header-anchor",href:"#number-prototype-tofixed"},L={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed",target:"_blank",rel:"noopener noreferrer"},W=l("<ul><li>描述：使用定点表示法来格式化一个数值</li><li>语法：<code>numObj.toFixed(digits)</code></li><li>参数 <ul><li>digits：小数点后数字的个数；介于 0 到 20 （包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0</li></ul></li><li>返回值：使用定点表示法表示给定数字的字符串</li><li>注意 <ul><li>如果 digits 参数太小或太大会引起 <code>RangeError</code>，0 到 20（包括）之间的值不会引起</li><li>如果该方法在一个非数值类型对象上调用，会抛出 <code>TypeError</code>错误</li></ul></li></ul><br>",2),w={id:"number-prototype-tolocalestring",tabindex:"-1"},D={class:"header-anchor",href:"#number-prototype-tolocalestring"},V={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString",target:"_blank",rel:"noopener noreferrer"},X=e("ul",null,[e("li",null,"描述：返回这个数字在特定语言环境下的表示字符串"),e("li",null,[t("语法："),e("code",null,"numObj.toLocaleString([locales [, options]])")])],-1),U=e("br",null,null,-1),B={id:"number-prototype-tostring",tabindex:"-1"},P={class:"header-anchor",href:"#number-prototype-tostring"},Y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString",target:"_blank",rel:"noopener noreferrer"},Z=l("<ul><li>描述：返回指定 Number 对象的字符串表示形式</li><li>语法：<code>numObj.toString([radix])</code></li><li>参数 <ul><li>radix：指定要用于数字到字符串的转换的基数(从2到36)。如果未指定 radix 参数，则默认值为 10</li></ul></li><li>注意 <ul><li>如果 toString() 的 radix 参数不在 2 到 36 之间，将会抛出一个 <code>RangeError</code></li></ul></li></ul><br>",2),H={id:"number-prototype-valueof",tabindex:"-1"},K={class:"header-anchor",href:"#number-prototype-valueof"},Q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf",target:"_blank",rel:"noopener noreferrer"},$=e("ul",null,[e("li",null,[t("描述：返回一个被 "),e("code",null,"Number "),t("对象包装的原始值")]),e("li",null,[t("语法："),e("code",null,"numObj.valueOf()")]),e("li",null,"注意：该方法通常是由 JavaScript 引擎在内部隐式调用的，而不是由用户在代码中显式调用的。")],-1);function ee(te,re){const r=i("ExternalLinkIcon");return a(),s("div",null,[c(" more "),e("p",null,[e("a",p,[t("Number"),o(r)])]),d,e("h2",b,[e("a",m,[e("span",null,[e("a",h,[t("Number.isNaN()"),o(r)])])])]),_,e("h2",N,[e("a",g,[e("span",null,[e("a",f,[t("Number.isFinite()"),o(r)])])])]),v,e("h2",k,[e("a",x,[e("span",null,[e("a",y,[t("Number.isInteger()"),o(r)])])])]),S,e("h2",E,[e("a",j,[e("span",null,[e("a",z,[t("Number.parseFloat()"),o(r)])])])]),A,e("h2",F,[e("a",O,[e("span",null,[e("a",I,[t("Number.parseInt()"),o(r)])])])]),R,e("h2",J,[e("a",C,[e("span",null,[e("a",G,[t("Number.prototype.toExponential()"),o(r)])])])]),M,e("h2",T,[e("a",q,[e("span",null,[e("a",L,[t("Number.prototype.toFixed()"),o(r)])])])]),W,e("h2",w,[e("a",D,[e("span",null,[e("a",V,[t("Number.prototype.toLocaleString()"),o(r)])])])]),X,U,e("h2",B,[e("a",P,[e("span",null,[e("a",Y,[t("Number.prototype.toString()"),o(r)])])])]),Z,e("h2",H,[e("a",K,[e("span",null,[e("a",Q,[t("Number.prototype.valueOf()"),o(r)])])])]),$])}const ne=n(u,[["render",ee],["__file","06.Number.html.vue"]]),ie=JSON.parse(`{"path":"/notes/javascript/built-in-objects/06.Number.html","title":"Number","lang":"zh-CN","frontmatter":{"title":"Number","icon":"article","article":false,"sticky":20,"breadcrumb":false,"description":"Number JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象 Number 对象由 Number() 构造器创建。 参数 value：被创建对象的数字值 作用 如果参数无法被转换为数字，则返回 NAN 在非构造器上下文中 (如：没有 new 操作符)，Number 能被用来执行类型转换。 Number.MAX_SAFE_...","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/javascript/built-in-objects/06.Number.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Number"}],["meta",{"property":"og:description","content":"Number JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象 Number 对象由 Number() 构造器创建。 参数 value：被创建对象的数字值 作用 如果参数无法被转换为数字，则返回 NAN 在非构造器上下文中 (如：没有 new 操作符)，Number 能被用来执行类型转换。 Number.MAX_SAFE_..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Number\\",\\"description\\":\\"Number JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象 Number 对象由 Number() 构造器创建。 参数 value：被创建对象的数字值 作用 如果参数无法被转换为数字，则返回 NAN 在非构造器上下文中 (如：没有 new 操作符)，Number 能被用来执行类型转换。 Number.MAX_SAFE_...\\"}"]]},"headers":[{"level":2,"title":"Number.MAX_SAFE_INTEGER","slug":"number-max-safe-integer","link":"#number-max-safe-integer","children":[]},{"level":2,"title":"Number.MIN_SAFE_INTEGER","slug":"number-min-safe-integer","link":"#number-min-safe-integer","children":[]},{"level":2,"title":"Number.MAX_VALUE","slug":"number-max-value","link":"#number-max-value","children":[]},{"level":2,"title":"Number.MIN_VALUE","slug":"number-min-value","link":"#number-min-value","children":[]},{"level":2,"title":"Number.isNaN()","slug":"number-isnan","link":"#number-isnan","children":[]},{"level":2,"title":"Number.isFinite()","slug":"number-isfinite","link":"#number-isfinite","children":[]},{"level":2,"title":"Number.isInteger()","slug":"number-isinteger","link":"#number-isinteger","children":[]},{"level":2,"title":"Number.parseFloat()","slug":"number-parsefloat","link":"#number-parsefloat","children":[]},{"level":2,"title":"Number.parseInt()","slug":"number-parseint","link":"#number-parseint","children":[]},{"level":2,"title":"Number.prototype.toExponential()","slug":"number-prototype-toexponential","link":"#number-prototype-toexponential","children":[]},{"level":2,"title":"Number.prototype.toFixed()","slug":"number-prototype-tofixed","link":"#number-prototype-tofixed","children":[]},{"level":2,"title":"Number.prototype.toLocaleString()","slug":"number-prototype-tolocalestring","link":"#number-prototype-tolocalestring","children":[]},{"level":2,"title":"Number.prototype.toString()","slug":"number-prototype-tostring","link":"#number-prototype-tostring","children":[]},{"level":2,"title":"Number.prototype.valueOf()","slug":"number-prototype-valueof","link":"#number-prototype-valueof","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":4.6,"words":1379},"filePathRelative":"notes/javascript/built-in-objects/06.Number.md","localizedDate":"2023年1月11日","excerpt":"","autoDesc":true}`);export{ne as comp,ie as data};
