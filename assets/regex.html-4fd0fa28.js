const e=JSON.parse(`{"key":"v-531b7aa3","path":"/technology/es6/regex.html","title":"正则的扩展","lang":"zh-CN","frontmatter":{"title":"正则的扩展","icon":"article","category":["javascript"],"article":false,"tag":["es6"],"copyright":"Copyright by 阮一峰","description":"RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。 var regex = new RegExp('xyz', 'i'); // 等价于 var regex = /xyz/i;","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/es6/regex.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"正则的扩展"}],["meta",{"property":"og:description","content":"RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。 var regex = new RegExp('xyz', 'i'); // 等价于 var regex = /xyz/i;"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"es6"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"正则的扩展\\",\\"description\\":\\"RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。 var regex = new RegExp('xyz', 'i'); // 等价于 var regex = /xyz/i;\\"}"]]},"headers":[{"level":2,"title":"RegExp 构造函数","slug":"regexp-构造函数","link":"#regexp-构造函数","children":[]},{"level":2,"title":"字符串的正则方法","slug":"字符串的正则方法","link":"#字符串的正则方法","children":[]},{"level":2,"title":"u 修饰符","slug":"u-修饰符","link":"#u-修饰符","children":[]},{"level":2,"title":"RegExp.prototype.unicode 属性","slug":"regexp-prototype-unicode-属性","link":"#regexp-prototype-unicode-属性","children":[]},{"level":2,"title":"y 修饰符","slug":"y-修饰符","link":"#y-修饰符","children":[]},{"level":2,"title":"RegExp.prototype.sticky 属性","slug":"regexp-prototype-sticky-属性","link":"#regexp-prototype-sticky-属性","children":[]},{"level":2,"title":"RegExp.prototype.flags 属性","slug":"regexp-prototype-flags-属性","link":"#regexp-prototype-flags-属性","children":[]},{"level":2,"title":"s 修饰符：dotAll 模式","slug":"s-修饰符-dotall-模式","link":"#s-修饰符-dotall-模式","children":[]},{"level":2,"title":"后行断言","slug":"后行断言","link":"#后行断言","children":[]},{"level":2,"title":"Unicode 属性类","slug":"unicode-属性类","link":"#unicode-属性类","children":[]},{"level":2,"title":"v 修饰符：Unicode 属性类的运算","slug":"v-修饰符-unicode-属性类的运算","link":"#v-修饰符-unicode-属性类的运算","children":[]},{"level":2,"title":"具名组匹配","slug":"具名组匹配","link":"#具名组匹配","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"解构赋值和替换","slug":"解构赋值和替换","link":"#解构赋值和替换","children":[]},{"level":3,"title":"引用","slug":"引用","link":"#引用","children":[]}]},{"level":2,"title":"d 修饰符：正则匹配索引","slug":"d-修饰符-正则匹配索引","link":"#d-修饰符-正则匹配索引","children":[]},{"level":2,"title":"String.prototype.matchAll()","slug":"string-prototype-matchall","link":"#string-prototype-matchall","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":20.08,"words":6024},"filePathRelative":"technology/es6/regex.md","localizedDate":"2023年1月11日","excerpt":"<h2> RegExp 构造函数</h2>\\n<p>在 ES5 中，<code>RegExp</code>构造函数的参数有两种情况。</p>\\n<p>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RegExp</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'xyz'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'i'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 等价于</span>\\n<span class=\\"token keyword\\">var</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">xyz</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">i</span></span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
