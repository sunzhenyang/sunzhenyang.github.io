const n=JSON.parse(`{"key":"v-7d74d812","path":"/technology/es6/class.html","title":"Class 的基本语法","lang":"zh-CN","frontmatter":{"title":"Class 的基本语法","icon":"article","category":["javascript"],"article":false,"tag":["es6"],"copyright":"Copyright by 阮一峰","description":"类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () { return '(' + this.x + ', ' + this.y + ')'; }; var p = new Point(1, 2);","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/es6/class.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Class 的基本语法"}],["meta",{"property":"og:description","content":"类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () { return '(' + this.x + ', ' + this.y + ')'; }; var p = new Point(1, 2);"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"es6"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Class 的基本语法\\",\\"description\\":\\"类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () { return '(' + this.x + ', ' + this.y + ')'; }; var p = new Point(1, 2);\\"}"]]},"headers":[{"level":2,"title":"类的由来","slug":"类的由来","link":"#类的由来","children":[]},{"level":2,"title":"constructor() 方法","slug":"constructor-方法","link":"#constructor-方法","children":[]},{"level":2,"title":"类的实例","slug":"类的实例","link":"#类的实例","children":[]},{"level":2,"title":"实例属性的新写法","slug":"实例属性的新写法","link":"#实例属性的新写法","children":[]},{"level":2,"title":"取值函数（getter）和存值函数（setter）","slug":"取值函数-getter-和存值函数-setter","link":"#取值函数-getter-和存值函数-setter","children":[]},{"level":2,"title":"属性表达式","slug":"属性表达式","link":"#属性表达式","children":[]},{"level":2,"title":"Class 表达式","slug":"class-表达式","link":"#class-表达式","children":[]},{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[]},{"level":2,"title":"静态属性","slug":"静态属性","link":"#静态属性","children":[]},{"level":2,"title":"私有方法和私有属性","slug":"私有方法和私有属性","link":"#私有方法和私有属性","children":[{"level":3,"title":"早期解决方案","slug":"早期解决方案","link":"#早期解决方案","children":[]},{"level":3,"title":"私有属性的正式写法","slug":"私有属性的正式写法","link":"#私有属性的正式写法","children":[]},{"level":3,"title":"in 运算符","slug":"in-运算符","link":"#in-运算符","children":[]}]},{"level":2,"title":"静态块","slug":"静态块","link":"#静态块","children":[]},{"level":2,"title":"类的注意点","slug":"类的注意点","link":"#类的注意点","children":[{"level":3,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]},{"level":3,"title":"不存在提升","slug":"不存在提升","link":"#不存在提升","children":[]},{"level":3,"title":"name 属性","slug":"name-属性","link":"#name-属性","children":[]},{"level":3,"title":"Generator 方法","slug":"generator-方法","link":"#generator-方法","children":[]},{"level":3,"title":"this 的指向","slug":"this-的指向","link":"#this-的指向","children":[]}]},{"level":2,"title":"new.target 属性","slug":"new-target-属性","link":"#new-target-属性","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":21.38,"words":6413},"filePathRelative":"technology/es6/class.md","localizedDate":"2023年1月11日","excerpt":"<h2> 类的由来</h2>\\n<p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Point</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">x<span class=\\"token punctuation\\">,</span> y</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>x <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>y <span class=\\"token operator\\">=</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token class-name\\">Point</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">toString</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">'('</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>x <span class=\\"token operator\\">+</span> <span class=\\"token string\\">', '</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>y <span class=\\"token operator\\">+</span> <span class=\\"token string\\">')'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">var</span> p <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Point</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
