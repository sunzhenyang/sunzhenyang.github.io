import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as r,a as c,b as e,d as n,e as t,f as a}from"./app-BybQgHW9.js";const i={},u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set",target:"_blank",rel:"noopener noreferrer"},d=a(`<br><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li>是值的集合，允许存储<strong>任何类型</strong>的<strong>唯一值</strong>，无论是<strong>原始值</strong>或者是<strong>对象引用</strong></li><li><code>NaN</code> 和 <code>undefined</code> 都可以被存储在 Set 中， <code>NaN </code>之间被视为相同的值（NaN被认为是相同的，尽管 NaN !== NaN）</li><li>语法：<code>new Set([iterable])</code></li><li>参数 <ul><li>iterable：如果传递了一个iterable对象，它的所有元素都将被添加到新的集合中。如果不指定此参数，或其值为 null，则新集合为空</li></ul></li></ul><br><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 求并集</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 求交集</span>
<span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 求差集</span>
<span class="token keyword">let</span> arr5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> arr6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>set1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr5<span class="token punctuation">,</span> <span class="token operator">...</span>arr6<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,7),k={id:"set-prototype-size",tabindex:"-1"},h={class:"header-anchor",href:"#set-prototype-size"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/size",target:"_blank",rel:"noopener noreferrer"},_=a('<blockquote><p>对象中元素的个数，访问函数是 <code>undefined</code>， 不能改变这个属性</p></blockquote><br><h2 id="set-prototype-add" tabindex="-1"><a class="header-anchor" href="#set-prototype-add"><span><a href="%5B%5D(https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/add)">Set.prototype.add()</a></span></a></h2><ul><li><p>描述：向一个 Set 对象的末尾添加一个指定的值</p></li><li><p>语法：<code>mySet.add(value)</code></p></li><li><p>参数</p><ul><li>value：需要添加到 Set 对象的元素的值</li></ul></li><li><p>返回值：Set 对象本身</p></li><li><p>注意：可链式调用，不能添加重复的值</p></li></ul><br>',5),m={id:"set-prototype-delete",tabindex:"-1"},v={class:"header-anchor",href:"#set-prototype-delete"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/delete",target:"_blank",rel:"noopener noreferrer"},f=e("ul",null,[e("li",null,"描述：从一个 Set 对象中删除指定的元素"),e("li",null,[n("语法："),e("code",null,"mySet.delete(value)")]),e("li",null,[n("参数 "),e("ul",null,[e("li",null,"value：将要删除的元素")])]),e("li",null,"返回值：成功删除返回 true，否则返回 false")],-1),S=e("br",null,null,-1),g={id:"set-prototype-has",tabindex:"-1"},N={class:"header-anchor",href:"#set-prototype-has"},z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has",target:"_blank",rel:"noopener noreferrer"},w=e("ul",null,[e("li",null,"描述：返回一个布尔值来指示对应的值 value 是否存在 Set 对象中"),e("li",null,[n("语法："),e("code",null,"mySet.has(value)")]),e("li",null,[n("参数 "),e("ul",null,[e("li",null,"value：用以测试该值是否存在于 Set 对象中")])]),e("li",null,"返回值：如果指定的值存在于Set对象当中，返回true，否则返回 false")],-1),j=e("br",null,null,-1),x={id:"set-prototype-clear",tabindex:"-1"},C={class:"header-anchor",href:"#set-prototype-clear"},J={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/clear",target:"_blank",rel:"noopener noreferrer"},O=e("ul",null,[e("li",null,"描述：清空一个 Set 对象中的所有元素"),e("li",null,[n("语法："),e("code",null,"mySet.clear()")]),e("li",null,"返回值：undefined")],-1),R=e("br",null,null,-1),W={id:"set-prototype-entries",tabindex:"-1"},G={class:"header-anchor",href:"#set-prototype-entries"},E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/entries",target:"_blank",rel:"noopener noreferrer"},T=e("ul",null,[e("li",null,"描述：返回一个新的迭代器对象 ，这个对象的元素是类似 [value, value] 形式的数组"),e("li",null,[n("语法："),e("code",null,"mySet.entries")]),e("li",null,"返回值：一个新的包含 [value, value] 形式的数组迭代器对象，value 是给定集合中的每个元素，迭代器 对象元素的顺序即集合对象中元素插入的顺序")],-1),V=e("br",null,null,-1),A={id:"set-prototype-values",tabindex:"-1"},B={class:"header-anchor",href:"#set-prototype-values"},q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values",target:"_blank",rel:"noopener noreferrer"},D=e("ul",null,[e("li",null,[e("p",null,"描述：方法返回一个 Iterator 对象，该对象按照原Set 对象元素的插入顺序返回其所有元素")]),e("li",null,[e("p",null,[n("语法："),e("code",null,"mySet.values()")])]),e("li",null,[e("p",null,"返回值：返回一个新生成的可迭代对象，以插入 Set 对象的顺序返回其包含的每个元素的值")])],-1),I=e("br",null,null,-1),L={id:"set-prototype-keys",tabindex:"-1"},P={class:"header-anchor",href:"#set-prototype-keys"},Y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/keys",target:"_blank",rel:"noopener noreferrer"},Z=e("ul",null,[e("li",null,[n("描述：是 "),e("code",null," Set.prototype.values()"),n(" 的别名")])],-1),K=e("br",null,null,-1),F={id:"set-prototype-foreach",tabindex:"-1"},H={class:"header-anchor",href:"#set-prototype-foreach"},M={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",target:"_blank",rel:"noopener noreferrer"},Q=a("<ul><li>描述：根据集合中元素的插入顺序，依次执行提供的回调函数</li><li>语法：<code>mySet.forEach(callback[, thisArg])</code></li><li>参数 <ul><li>callback：集合中每个元素执行的回调函数，该函数接收三个参数 <ul><li>currentValue：正在被操作的元素</li><li>currentKey：正在被操作的元素（因为集合没有索引）</li><li>set：调用当前 forEach 方法的集合对象</li></ul></li><li>thisArg：回调函数执行过程中的 this 值</li></ul></li></ul>",1);function U(X,$){const s=l("ExternalLinkIcon");return p(),r("div",null,[c(" more "),e("p",null,[e("a",u,[n("Set"),t(s)])]),d,e("h2",k,[e("a",h,[e("span",null,[e("a",b,[n("Set.prototype.size"),t(s)])])])]),_,e("h2",m,[e("a",v,[e("span",null,[e("a",y,[n("Set.prototype.delete()"),t(s)])])])]),f,S,e("h2",g,[e("a",N,[e("span",null,[e("a",z,[n("Set.prototype.has()"),t(s)])])])]),w,j,e("h2",x,[e("a",C,[e("span",null,[e("a",J,[n("Set.prototype.clear()"),t(s)])])])]),O,R,e("h2",W,[e("a",G,[e("span",null,[e("a",E,[n("Set.prototype.entries()"),t(s)])])])]),T,V,e("h2",A,[e("a",B,[e("span",null,[e("a",q,[n("Set.prototype.values()"),t(s)])])])]),D,I,e("h2",L,[e("a",P,[e("span",null,[e("a",Y,[n("Set.prototype.keys()"),t(s)])])])]),Z,K,e("h2",F,[e("a",H,[e("span",null,[e("a",M,[n("Set.prototype.forEach()"),t(s)])])])]),Q])}const se=o(i,[["render",U],["__file","11.Set.html.vue"]]),te=JSON.parse(`{"path":"/notes/javascript/built-in-objects/11.Set.html","title":"Set","lang":"zh-CN","frontmatter":{"title":"Set","icon":"article","article":false,"sticky":20,"breadcrumb":false,"description":"Set 概述 是值的集合，允许存储任何类型的唯一值，无论是原始值或者是对象引用 NaN 和 undefined 都可以被存储在 Set 中， NaN 之间被视为相同的值（NaN被认为是相同的，尽管 NaN !== NaN） 语法：new Set([iterable]) 参数 iterable：如果传递了一个iterable对象，它的所有元素都将被添加到...","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/javascript/built-in-objects/11.Set.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Set"}],["meta",{"property":"og:description","content":"Set 概述 是值的集合，允许存储任何类型的唯一值，无论是原始值或者是对象引用 NaN 和 undefined 都可以被存储在 Set 中， NaN 之间被视为相同的值（NaN被认为是相同的，尽管 NaN !== NaN） 语法：new Set([iterable]) 参数 iterable：如果传递了一个iterable对象，它的所有元素都将被添加到..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Set\\",\\"description\\":\\"Set 概述 是值的集合，允许存储任何类型的唯一值，无论是原始值或者是对象引用 NaN 和 undefined 都可以被存储在 Set 中， NaN 之间被视为相同的值（NaN被认为是相同的，尽管 NaN !== NaN） 语法：new Set([iterable]) 参数 iterable：如果传递了一个iterable对象，它的所有元素都将被添加到...\\"}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":2,"title":"Set.prototype.size","slug":"set-prototype-size","link":"#set-prototype-size","children":[]},{"level":2,"title":"Set.prototype.add()","slug":"set-prototype-add","link":"#set-prototype-add","children":[]},{"level":2,"title":"Set.prototype.delete()","slug":"set-prototype-delete","link":"#set-prototype-delete","children":[]},{"level":2,"title":"Set.prototype.has()","slug":"set-prototype-has","link":"#set-prototype-has","children":[]},{"level":2,"title":"Set.prototype.clear()","slug":"set-prototype-clear","link":"#set-prototype-clear","children":[]},{"level":2,"title":"Set.prototype.entries()","slug":"set-prototype-entries","link":"#set-prototype-entries","children":[]},{"level":2,"title":"Set.prototype.values()","slug":"set-prototype-values","link":"#set-prototype-values","children":[]},{"level":2,"title":"Set.prototype.keys()","slug":"set-prototype-keys","link":"#set-prototype-keys","children":[]},{"level":2,"title":"Set.prototype.forEach()","slug":"set-prototype-foreach","link":"#set-prototype-foreach","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":2.55,"words":765},"filePathRelative":"notes/javascript/built-in-objects/11.Set.md","localizedDate":"2023年1月11日","excerpt":"","autoDesc":true}`);export{se as comp,te as data};
