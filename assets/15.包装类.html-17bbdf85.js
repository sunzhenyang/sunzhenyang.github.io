import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e,f as t}from"./app-e1714ab0.js";const l={},o=t(`<ul><li>类型特点 <ul><li>不允许被继承，没有子类</li><li>包装类是引用类型，拥有方法和属性</li><li>基本数据类型只包含数值信息</li></ul></li><li>存储方式 <ul><li>包装类型对象实例化，借由 <code>new</code> 在堆空间进行空间分配，对应栈空间中存储地址引用</li><li>基本数据类型变量对应栈空间中存储的是具体数据值</li></ul></li><li>初始值 <ul><li>包装类的对象为初始化时，初始值均为 <code>null</code></li><li>基本数据类型有各自的默认初始值</li></ul></li></ul><table><thead><tr><th>基本类型</th><th>默认值</th><th>对应的包装类</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>0</td><td>Byte</td><td>null</td></tr><tr><td>short</td><td>0</td><td>Short</td><td>null</td></tr><tr><td>int</td><td>0</td><td>Integer</td><td>null</td></tr><tr><td>long</td><td>0L</td><td>Long</td><td>null</td></tr><tr><td>float</td><td>0.0f</td><td>Float</td><td>null</td></tr><tr><td>double</td><td>0.0d</td><td>Double</td><td>null</td></tr><tr><td>char</td><td>&#39; &#39;（<code>\\u0000</code>）（空格）</td><td>Character</td><td>null</td></tr><tr><td>boolean</td><td>false</td><td>Boolean</td><td>null</td></tr></tbody></table><h2 id="装箱" tabindex="-1"><a class="header-anchor" href="#装箱" aria-hidden="true">#</a> 装箱</h2><blockquote><p>基本数据类型转换为包装类的过程</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> t1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 自动装箱：把一个基本类型变量直接赋给对应包装类型变量</span>
<span class="token class-name">Integer</span> t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>

<span class="token comment">// 2. 手动装箱：可以结合类型的构造方法或 valueOf() 方法实现</span>
<span class="token class-name">Integer</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拆箱" tabindex="-1"><a class="header-anchor" href="#拆箱" aria-hidden="true">#</a> 拆箱</h2><blockquote><p>包装类转换为基本数据类型的过程</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> t1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 自动拆箱：包装类对象直接赋给对应的基本数据类型变量</span>
<span class="token keyword">int</span> t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>

<span class="token comment">// 2. 手动拆箱：通过 xxxValue() 方法实现</span>
<span class="token keyword">int</span> t3 <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><ul><li>当进行赋值操作时，会触发拆箱操作</li><li>当方法调用，传入参数时，也会触发相关操作</li><li>当结合操作符进行运算操作的时候，也会触发相关操作</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 通过包装类的 toString() 方法，将基本数据类型转换为字符串</span>
<span class="token keyword">int</span> t1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> t2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过包装类的 parse 方法，将字符串转换为基本数据类型</span>
<span class="token keyword">int</span> t3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 先通过 valueOf() 方法将字符串转换为包装类，在通过自动拆箱转换为基本数据类型</span>
<span class="token keyword">int</span> t4 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="支持缓存的包装类" tabindex="-1"><a class="header-anchor" href="#支持缓存的包装类" aria-hidden="true">#</a> 支持缓存的包装类</h2><blockquote><p>Java 在集中包装类中提供了缓存设计，会对一定范围内的数据做缓存</p><p>如果数据在范围内，会优先从缓存中取数据，超出范围才会创建新对象</p></blockquote><ul><li><code>Byte 、Short、Integer、Long</code>：缓存 <code>[-128, 127]</code> 区间的数据</li><li><code>Character</code>：缓存 <code>[0, 127]</code> 区间的数据</li><li><code>Boolean</code>：缓存 <code>true、false</code></li><li><code>Double、Float</code>：不支持</li></ul><h2 id="包装类的比较" tabindex="-1"><a class="header-anchor" href="#包装类的比较" aria-hidden="true">#</a> 包装类的比较</h2><ul><li><p>拆箱后的数据是基础数据类型，用 <code>==</code> 判断相等性，比较的都是数值，如果是字符，比较的是 ASCLL 值</p></li><li><p>装箱后如果用 <code>==</code> 比较对象的内存地址，除 <code>Double</code>、<code>Float</code> 外，如数据值在 <code>-128 ~ 127</code> ，则相同；反之会重新生成对象，为不同</p></li><li><p>调用 <code>equals</code> 方法时</p><ul><li>当类型相同，且数值相同时，返回 <code>true</code>，反之，返回 <code>false</code></li><li>当比对方为基本数据类型时，会先进行自动装箱操作，后进行比较</li></ul></li></ul><blockquote><p>装、拆箱操作对比强制类型转换的不同</p></blockquote><ul><li>装箱&amp;拆箱多用于同类型基本数据类型和其对应包装类之间；强制转换多用于可兼容类型之间</li><li>强制类型转换时不产生新的对象的，只有类型兼容性检查和安全性检查等性能消耗</li></ul>`,18);function d(c,i){return a(),s("div",null,[e(" more "),o])}const u=n(l,[["render",d],["__file","15.包装类.html.vue"]]);export{u as default};
