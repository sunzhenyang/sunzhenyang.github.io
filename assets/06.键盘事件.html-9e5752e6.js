import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t,f as e}from"./app-a7325d6d.js";const p={},o=e(`<h2 id="keydown-keyup" tabindex="-1"><a class="header-anchor" href="#keydown-keyup" aria-hidden="true">#</a> keydown/keyup</h2><blockquote><p>当按键被按下时，触发 <code>keydown</code> 事件</p><p>当按键被释放时，触发 <code>keyup</code> 事件</p></blockquote><h2 id="event-code-event-key" tabindex="-1"><a class="header-anchor" href="#event-code-event-key" aria-hidden="true">#</a> event.code/event.key</h2><blockquote><p>事件对象的 <code>key</code> 属性允许获取字符，而事件对象的 <code>code</code> 属性则允许获取物理按键代码</p></blockquote><table><thead><tr><th style="text-align:left;">Key</th><th style="text-align:left;"><code>event.key</code>（随位置改变）</th><th style="text-align:left;"><code>event.code</code>(保持不变)</th></tr></thead><tbody><tr><td style="text-align:left;">Z</td><td style="text-align:left;"><code>z</code>（小写）</td><td style="text-align:left;"><code>KeyZ</code></td></tr><tr><td style="text-align:left;">Shift+Z</td><td style="text-align:left;"><code>Z</code>（大写）</td><td style="text-align:left;"><code>KeyZ</code></td></tr></tbody></table><h2 id="自动重复" tabindex="-1"><a class="header-anchor" href="#自动重复" aria-hidden="true">#</a> 自动重复</h2><blockquote><p>如果按下一个键足够长的时间，它就会开始“自动重复”：<code>keydown</code> 会被一次又一次地触发</p><p>当按键被释放时，最终会得到 <code>keyup</code>。因此，有很多 <code>keydown</code> 却只有一个 <code>keyup</code> 是很正常的</p><p>对于由自动重复触发的事件，<code>event</code> 对象的 <code>event.repeat</code> 属性被设置为 <code>true</code></p></blockquote><h2 id="默认行为" tabindex="-1"><a class="header-anchor" href="#默认行为" aria-hidden="true">#</a> 默认行为</h2><blockquote><p>阻止对 <code>keydown</code> 的默认行为可以取消大多数的行为，但基于系统的特殊按键除外，例如系统快捷键等</p></blockquote><ul><li><p>出现在屏幕上的一个字符</p></li><li><p>一个字符被删除（Delete 键）。</p></li><li><p>滚动页面（PageDown 键）。</p></li><li><p>浏览器打开“保存页面”对话框（Ctrl+S）</p></li><li><p>...等</p></li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ul><li>过去有一个 <code>keypress</code> 事件，还有事件对象的 <code>keyCode</code>、<code>charCode</code> 和 <code>which</code> 属性，大多数浏览器对它们都存在兼容性问题，以致使该规范的开发者不得不弃用它们并创建新的现代的事件</li><li>键盘逻辑并不能保证适用于移动端设备</li></ul><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><h3 id="输入控制" tabindex="-1"><a class="header-anchor" href="#输入控制" aria-hidden="true">#</a> 输入控制</h3><blockquote><p>允许数字、某些特殊字符、左右方向键、删除</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">function</span> <span class="token function">checkPhoneKey</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ArrowLeft&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ArrowRight&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Delete&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Backspace&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">onkeydown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">checkPhoneKey</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key<span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Phone, please<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同时按下q和w按键时触发" tabindex="-1"><a class="header-anchor" href="#同时按下q和w按键时触发" aria-hidden="true">#</a> 同时按下Q和W按键时触发</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">runOnKeys</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>codes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> pressed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pressed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> code <span class="token keyword">of</span> codes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 所有的按键都在集合中？</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 在 alert 期间，如果访客松开了按键，</span>
        <span class="token comment">// JavaScript 就不会获得 &quot;keyup&quot; 事件</span>
        <span class="token comment">// 那么集合 pressed 会保持假设这些按键是被按下的状态</span>
        <span class="token comment">// 为避免“粘滞”键，对状态进行了重置</span>
        <span class="token comment">// 如果用户想再次运行热键 —— 他们需要再次按下所有键</span>
        pressed<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pressed<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">runOnKeys</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&quot;KeyQ&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;KeyW&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function c(l,i){return s(),a("div",null,[t(" more "),o])}const k=n(p,[["render",c],["__file","06.键盘事件.html.vue"]]);export{k as default};
