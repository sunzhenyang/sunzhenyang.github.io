import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as i,a as p,b as n,d as e,e as a,f as t}from"./app-BybQgHW9.js";const r={},u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),h=n("blockquote",null,[n("p",null,"全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者")],-1),_={id:"eval",tabindex:"-1"},k={class:"header-anchor",href:"#eval"},m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,"描述：函数会将传入的字符串当做 JavaScript 代码进行执行"),n("li",null,[e("语法："),n("code",null,"eval(string)")]),n("li",null,[e("参数 "),n("ul",null,[n("li",null,"string：一个表示 JavaScript 表达式、语句或一系列语句的字符串，表达式可以包含变量与已存在对象的属性")])]),n("li",null,[e("返回值：返回字符串中代码的返回值，如果返回值为空，则返回 "),n("code",null,"undefined")])],-1),b=n("br",null,null,-1),f={id:"isfinite",tabindex:"-1"},g={class:"header-anchor",href:"#isfinite"},R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite",target:"_blank",rel:"noopener noreferrer"},I=n("ul",null,[n("li",null,"描述：判断被传入的参数值是否为一个有限数值，在必要情况下，参数会首先转为一个数值"),n("li",null,[e("语法："),n("code",null,"isFinite(testValue)")]),n("li",null,[e("参数 "),n("ul",null,[n("li",null,"testValue：用于检测有限性的值")])]),n("li",null,"返回值：判定一个数字是否是有限数字。如果参数是 NaN，正无穷大或者负无穷大，会返回false，其他返回 true")],-1),U=n("br",null,null,-1),N={id:"isnan",tabindex:"-1"},C={class:"header-anchor",href:"#isnan"},z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN",target:"_blank",rel:"noopener noreferrer"},x=n("ul",null,[n("li",null,"描述：确定一个值是否为NaN"),n("li",null,[e("语法："),n("code",null,"isNaN(value)")]),n("li",null,[e("参数 "),n("ul",null,[n("li",null,"value：要被检测的值")])]),n("li",null,"返回值：给定值为 NaN则返回值为true，否则为false")],-1),S=n("br",null,null,-1),j={id:"parsefloat",tabindex:"-1"},J={class:"header-anchor",href:"#parsefloat"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",target:"_blank",rel:"noopener noreferrer"},B=n("ul",null,[n("li",null,"描述：解析一个参数（必要时先转换为字符串）并返回一个浮点数"),n("li",null,[e("语法："),n("code",null,"parseFloat(string)")]),n("li",null,[e("参数 "),n("ul",null,[n("li",null,"string：需要被解析成为浮点数的值")])]),n("li",null,[e("返回值：给定值被解析成浮点数。如果给定值不能被转换成数值，则会返回 "),n("code",null,"NaN")])],-1),E=n("br",null,null,-1),q={id:"parseint",tabindex:"-1"},F={class:"header-anchor",href:"#parseint"},O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt",target:"_blank",rel:"noopener noreferrer"},W=t("<ul><li>描述：将一个字符串 string 转换为 radix 进制的整数， radix 为介于2-36之间的数</li><li>语法：<code>parseInt(string, radix)</code></li><li>参数 <ul><li>string：要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</li><li>radix：从 2 到 36，代表该进位系统的数字，基数将会根据字符串的值进行推算。注意，推算的结果不会永远是默认值 <code>10</code>！</li></ul></li><li>从给定的字符串中解析出的一个整数或者 <code>NaN</code></li></ul><br>",2),G={id:"encodeuri",tabindex:"-1"},T={class:"header-anchor",href:"#encodeuri"},A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",target:"_blank",rel:"noopener noreferrer"},V=t("<ul><li><p>描述：通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码</p></li><li><p>语法：<code>encodeURI(URI)</code></p></li><li><p>参数</p><ul><li>URI：一个完整的URI</li></ul></li><li><p>不转义的字符：<code>; , / ? : @ &amp; = + $ 字母 数字 - _ . ! ~ * &#39; ( ) # </code></p></li><li><p>返回值：一个新字符串，表示提供的字符串编码为统一资源标识符 (URI)</p></li></ul><br>",2),w={id:"decodeuri",tabindex:"-1"},D={class:"header-anchor",href:"#decodeuri"},Z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",target:"_blank",rel:"noopener noreferrer"},$=n("ul",null,[n("li",null,[e("描述：解码由 "),n("code",null,"encodeURI"),e(" 创建或其它流程得到的统一资源标识符（URI）")]),n("li",null,[e("语法："),n("code",null,"decodeURI(encodedURI)")]),n("li",null,[e("参数 "),n("ul",null,[n("li",null,"encodedURI：一个完整的编码过的 URI")])]),n("li",null,"返回值：返回一个给定编码统一资源标识符(URI)的未编码版本的新字符串")],-1),L=n("br",null,null,-1),P={id:"encodeuricomponent",tabindex:"-1"},Y={class:"header-anchor",href:"#encodeuricomponent"},H={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",target:"_blank",rel:"noopener noreferrer"},K=t(`<ul><li>描述：函数通过将一个，两个，三个或四个表示字符的UTF-8编码的转义序列替换某些字符的每个实例来编码 URI （对于由两个“代理”字符组成的字符而言，将仅是四个转义序列）</li><li>语法：<code>encodeURIComponent(str)</code></li><li>参数 <ul><li>str：String. URI 的组成部分</li></ul></li><li>不转义的字符：<code>A-Z a-z 0-9 - _ . ! ~ * &#39; ( )</code></li><li>返回值：原字串作为URI组成部分被被编码后的新字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// encodeURIComponent() 和 encodeURI 有以下几个不同点</span>
<span class="token keyword">var</span> set1 <span class="token operator">=</span> <span class="token string">&quot;;,/?:@&amp;=+$&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 保留字符</span>
<span class="token keyword">var</span> set2 <span class="token operator">=</span> <span class="token string">&quot;-_.!~*&#39;()&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// 不转义字符</span>
<span class="token keyword">var</span> set3 <span class="token operator">=</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">;</span>           <span class="token comment">// 数字标志</span>
<span class="token keyword">var</span> set4 <span class="token operator">=</span> <span class="token string">&quot;ABC abc 123&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 字母数字字符和空格</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ;,/?:@&amp;=+$</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -_.!~*&#39;()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// #</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span>set4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ABC%20abc%20123 (the space gets encoded as %20)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %3B%2C%2F%3F%3A%40%26%3D%2B%24</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -_.!~*&#39;()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %23</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>set4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ABC%20abc%20123 (the space gets encoded as %20)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),M={id:"decodeuricomponent",tabindex:"-1"},Q={class:"header-anchor",href:"#decodeuricomponent"},X={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",target:"_blank",rel:"noopener noreferrer"},nn=n("ul",null,[n("li",null,"描述：解码由 encodeURIComponent 方法或者其它类似方法编码的部分统一资源标识符（URI）"),n("li",null,[e("语法："),n("code",null,"decodeURIComponent(encodedURI)")]),n("li",null,[e("参数 "),n("ul",null,[n("li",null,"encodedURI：编码后的部分 URI")])]),n("li",null,"返回值：一个解码后的统一资源标识符（URI）字符串，处理前的URI经过了给定格式的编码")],-1);function en(sn,an){const s=l("ExternalLinkIcon");return c(),i("div",null,[p(" more "),n("p",null,[n("a",u,[e("函数属性"),a(s)])]),d,h,n("h2",_,[n("a",k,[n("span",null,[n("a",m,[e("eval()"),a(s)])])])]),v,b,n("h2",f,[n("a",g,[n("span",null,[n("a",R,[e("isFinite()"),a(s)])])])]),I,U,n("h2",N,[n("a",C,[n("span",null,[n("a",z,[e("isNaN()"),a(s)])])])]),x,S,n("h2",j,[n("a",J,[n("span",null,[n("a",y,[e("parseFloat()"),a(s)])])])]),B,E,n("h2",q,[n("a",F,[n("span",null,[n("a",O,[e("parseInt()"),a(s)])])])]),W,n("h2",G,[n("a",T,[n("span",null,[n("a",A,[e("encodeURI()"),a(s)])])])]),V,n("h2",w,[n("a",D,[n("span",null,[n("a",Z,[e("decodeURI()"),a(s)])])])]),$,L,n("h2",P,[n("a",Y,[n("span",null,[n("a",H,[e("encodeURIComponent()"),a(s)])])])]),K,n("h2",M,[n("a",Q,[n("span",null,[n("a",X,[e("decodeURIComponent()"),a(s)])])])]),nn])}const ln=o(r,[["render",en],["__file","02.函数属性.html.vue"]]),cn=JSON.parse(`{"path":"/notes/javascript/built-in-objects/02.%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7.html","title":"函数属性","lang":"zh-CN","frontmatter":{"title":"函数属性","icon":"article","article":false,"sticky":20,"breadcrumb":false,"description":"函数属性 全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者 eval() 描述：函数会将传入的字符串当做 JavaScript 代码进行执行 语法：eval(string) 参数 string：一个表示 JavaScript 表达式、语句或一系列语句的字符串，表达式可以包含变量与已存在对象的属性 返回值：返回字符串中...","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/javascript/built-in-objects/02.%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"函数属性"}],["meta",{"property":"og:description","content":"函数属性 全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者 eval() 描述：函数会将传入的字符串当做 JavaScript 代码进行执行 语法：eval(string) 参数 string：一个表示 JavaScript 表达式、语句或一系列语句的字符串，表达式可以包含变量与已存在对象的属性 返回值：返回字符串中..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"函数属性\\",\\"description\\":\\"函数属性 全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者 eval() 描述：函数会将传入的字符串当做 JavaScript 代码进行执行 语法：eval(string) 参数 string：一个表示 JavaScript 表达式、语句或一系列语句的字符串，表达式可以包含变量与已存在对象的属性 返回值：返回字符串中...\\"}"]]},"headers":[{"level":2,"title":"eval()","slug":"eval","link":"#eval","children":[]},{"level":2,"title":"isFinite()","slug":"isfinite","link":"#isfinite","children":[]},{"level":2,"title":"isNaN()","slug":"isnan","link":"#isnan","children":[]},{"level":2,"title":"parseFloat()","slug":"parsefloat","link":"#parsefloat","children":[]},{"level":2,"title":"parseInt()","slug":"parseint","link":"#parseint","children":[]},{"level":2,"title":"encodeURI()","slug":"encodeuri","link":"#encodeuri","children":[]},{"level":2,"title":"decodeURI()","slug":"decodeuri","link":"#decodeuri","children":[]},{"level":2,"title":"encodeURIComponent()","slug":"encodeuricomponent","link":"#encodeuricomponent","children":[]},{"level":2,"title":"decodeURIComponent()","slug":"decodeuricomponent","link":"#decodeuricomponent","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":3.48,"words":1044},"filePathRelative":"notes/javascript/built-in-objects/02.函数属性.md","localizedDate":"2023年1月11日","excerpt":"","autoDesc":true}`);export{ln as comp,cn as data};
