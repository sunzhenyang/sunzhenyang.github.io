const n=JSON.parse(`{"key":"v-244004d0","path":"/technology/ts_axios/chapter11/mergeConfig.html","title":"mergeConfig 模块单元测试","lang":"zh-CN","frontmatter":{"title":"mergeConfig 模块单元测试","icon":"article","category":["typescript"],"article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"合并配置是 ts-axios 核心流程中非常重要的一个环节，我们需要为它的各种情况去编写测试。 测试代码编写 test/mergeConfig.spec.ts： import axios from '../src/index' import mergeConfig from '../src/core/mergeConfig' describe('mergeConfig', () =&gt; { const defaults = axios.defaults test('should accept undefined for second argument', () =&gt; { expect(mergeConfig(defaults, undefined)).toEqual(defaults) }) test('should accept an object for second argument', () =&gt; { expect(mergeConfig(defaults, {})).toEqual(defaults) }) test('should not leave references', () =&gt; { const merged = mergeConfig(defaults, {}) expect(merged).not.toBe(defaults) expect(merged.headers).not.toBe(defaults.headers) }) test('should allow setting request options', () =&gt; { const config = { url: '__sample url__', params: '__sample params__', data: { foo: true } } const merged = mergeConfig(defaults, config) expect(merged.url).toBe(config.url) expect(merged.params).toBe(config.params) expect(merged.data).toEqual(config.data) }) test('should not inherit request options', () =&gt; { const localDefaults = { url: '__sample url__', params: '__sample params__', data: { foo: true } } const merged = mergeConfig(localDefaults, {}) expect(merged.url).toBeUndefined() expect(merged.params).toBeUndefined() expect(merged.data).toBeUndefined() }) test('should return default headers if pass config2 with undefined', () =&gt; { expect( mergeConfig( { headers: 'x-mock-header' }, undefined ) ).toEqual({ headers: 'x-mock-header' }) }) test('should merge auth, headers with defaults', () =&gt; { expect( mergeConfig( { auth: undefined }, { auth: { username: 'foo', password: 'test' } } ) ).toEqual({ auth: { username: 'foo', password: 'test' } }) expect( mergeConfig( { auth: { username: 'foo', password: 'test' } }, { auth: { username: 'baz', password: 'foobar' } } ) ).toEqual({ auth: { username: 'baz', password: 'foobar' } }) }) test('should overwrite auth, headers with a non-object value', () =&gt; { expect( mergeConfig( { headers: { common: { Accept: 'application/json, text/plain, */*' } } }, { headers: null } ) ).toEqual({ headers: null }) }) test('should allow setting other options', () =&gt; { const merged = mergeConfig(defaults, { timeout: 123 }) expect(merged.timeout).toBe(123) }) })","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter11/mergeConfig.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"mergeConfig 模块单元测试"}],["meta",{"property":"og:description","content":"合并配置是 ts-axios 核心流程中非常重要的一个环节，我们需要为它的各种情况去编写测试。 测试代码编写 test/mergeConfig.spec.ts： import axios from '../src/index' import mergeConfig from '../src/core/mergeConfig' describe('mergeConfig', () =&gt; { const defaults = axios.defaults test('should accept undefined for second argument', () =&gt; { expect(mergeConfig(defaults, undefined)).toEqual(defaults) }) test('should accept an object for second argument', () =&gt; { expect(mergeConfig(defaults, {})).toEqual(defaults) }) test('should not leave references', () =&gt; { const merged = mergeConfig(defaults, {}) expect(merged).not.toBe(defaults) expect(merged.headers).not.toBe(defaults.headers) }) test('should allow setting request options', () =&gt; { const config = { url: '__sample url__', params: '__sample params__', data: { foo: true } } const merged = mergeConfig(defaults, config) expect(merged.url).toBe(config.url) expect(merged.params).toBe(config.params) expect(merged.data).toEqual(config.data) }) test('should not inherit request options', () =&gt; { const localDefaults = { url: '__sample url__', params: '__sample params__', data: { foo: true } } const merged = mergeConfig(localDefaults, {}) expect(merged.url).toBeUndefined() expect(merged.params).toBeUndefined() expect(merged.data).toBeUndefined() }) test('should return default headers if pass config2 with undefined', () =&gt; { expect( mergeConfig( { headers: 'x-mock-header' }, undefined ) ).toEqual({ headers: 'x-mock-header' }) }) test('should merge auth, headers with defaults', () =&gt; { expect( mergeConfig( { auth: undefined }, { auth: { username: 'foo', password: 'test' } } ) ).toEqual({ auth: { username: 'foo', password: 'test' } }) expect( mergeConfig( { auth: { username: 'foo', password: 'test' } }, { auth: { username: 'baz', password: 'foobar' } } ) ).toEqual({ auth: { username: 'baz', password: 'foobar' } }) }) test('should overwrite auth, headers with a non-object value', () =&gt; { expect( mergeConfig( { headers: { common: { Accept: 'application/json, text/plain, */*' } } }, { headers: null } ) ).toEqual({ headers: null }) }) test('should allow setting other options', () =&gt; { const merged = mergeConfig(defaults, { timeout: 123 }) expect(merged.timeout).toBe(123) }) })"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"mergeConfig 模块单元测试\\",\\"description\\":\\"合并配置是 ts-axios 核心流程中非常重要的一个环节，我们需要为它的各种情况去编写测试。 测试代码编写 test/mergeConfig.spec.ts： import axios from '../src/index' import mergeConfig from '../src/core/mergeConfig' describe('mergeConfig', () =&gt; { const defaults = axios.defaults test('should accept undefined for second argument', () =&gt; { expect(mergeConfig(defaults, undefined)).toEqual(defaults) }) test('should accept an object for second argument', () =&gt; { expect(mergeConfig(defaults, {})).toEqual(defaults) }) test('should not leave references', () =&gt; { const merged = mergeConfig(defaults, {}) expect(merged).not.toBe(defaults) expect(merged.headers).not.toBe(defaults.headers) }) test('should allow setting request options', () =&gt; { const config = { url: '__sample url__', params: '__sample params__', data: { foo: true } } const merged = mergeConfig(defaults, config) expect(merged.url).toBe(config.url) expect(merged.params).toBe(config.params) expect(merged.data).toEqual(config.data) }) test('should not inherit request options', () =&gt; { const localDefaults = { url: '__sample url__', params: '__sample params__', data: { foo: true } } const merged = mergeConfig(localDefaults, {}) expect(merged.url).toBeUndefined() expect(merged.params).toBeUndefined() expect(merged.data).toBeUndefined() }) test('should return default headers if pass config2 with undefined', () =&gt; { expect( mergeConfig( { headers: 'x-mock-header' }, undefined ) ).toEqual({ headers: 'x-mock-header' }) }) test('should merge auth, headers with defaults', () =&gt; { expect( mergeConfig( { auth: undefined }, { auth: { username: 'foo', password: 'test' } } ) ).toEqual({ auth: { username: 'foo', password: 'test' } }) expect( mergeConfig( { auth: { username: 'foo', password: 'test' } }, { auth: { username: 'baz', password: 'foobar' } } ) ).toEqual({ auth: { username: 'baz', password: 'foobar' } }) }) test('should overwrite auth, headers with a non-object value', () =&gt; { expect( mergeConfig( { headers: { common: { Accept: 'application/json, text/plain, */*' } } }, { headers: null } ) ).toEqual({ headers: null }) }) test('should allow setting other options', () =&gt; { const merged = mergeConfig(defaults, { timeout: 123 }) expect(merged.timeout).toBe(123) }) })\\"}"]]},"headers":[{"level":2,"title":"测试代码编写","slug":"测试代码编写","link":"#测试代码编写","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":1.69,"words":506},"filePathRelative":"technology/ts_axios/chapter11/mergeConfig.md","localizedDate":"2023年1月11日","excerpt":"<p>合并配置是 <code>ts-axios</code> 核心流程中非常重要的一个环节，我们需要为它的各种情况去编写测试。</p>\\n<h2> 测试代码编写</h2>\\n<p><code>test/mergeConfig.spec.ts</code>：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> axios <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'../src/index'</span>\\n<span class=\\"token keyword\\">import</span> mergeConfig <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'../src/core/mergeConfig'</span>\\n\\n<span class=\\"token function\\">describe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'mergeConfig'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> defaults <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span>defaults\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should accept undefined for second argument'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">undefined</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should accept an object for second argument'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should not leave references'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> merged <span class=\\"token operator\\">=</span> <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>not<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>not<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should allow setting request options'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> config <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n      url<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'__sample url__'</span><span class=\\"token punctuation\\">,</span>\\n      params<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'__sample params__'</span><span class=\\"token punctuation\\">,</span>\\n      data<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> foo<span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> merged <span class=\\"token operator\\">=</span> <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">,</span> config<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>params<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token punctuation\\">.</span>params<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should not inherit request options'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> localDefaults <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n      url<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'__sample url__'</span><span class=\\"token punctuation\\">,</span>\\n      params<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'__sample params__'</span><span class=\\"token punctuation\\">,</span>\\n      data<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> foo<span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> merged <span class=\\"token operator\\">=</span> <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>localDefaults<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBeUndefined</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>params<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBeUndefined</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBeUndefined</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should return default headers if pass config2 with undefined'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          headers<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'x-mock-header'</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token keyword\\">undefined</span>\\n      <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      headers<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'x-mock-header'</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should merge auth, headers with defaults'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          auth<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">undefined</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          auth<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            username<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>\\n            password<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'test'</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      auth<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        username<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>\\n        password<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'test'</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          auth<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            username<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>\\n            password<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'test'</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          auth<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            username<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'baz'</span><span class=\\"token punctuation\\">,</span>\\n            password<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foobar'</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      auth<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        username<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'baz'</span><span class=\\"token punctuation\\">,</span>\\n        password<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foobar'</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should overwrite auth, headers with a non-object value'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          headers<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            common<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n              Accept<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'application/json, text/plain, */*'</span>\\n            <span class=\\"token punctuation\\">}</span>\\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">{</span>\\n          headers<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      headers<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should allow setting other options'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> merged <span class=\\"token operator\\">=</span> <span class=\\"token function\\">mergeConfig</span><span class=\\"token punctuation\\">(</span>defaults<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n      timeout<span class=\\"token operator\\">:</span> <span class=\\"token number\\">123</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>merged<span class=\\"token punctuation\\">.</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
