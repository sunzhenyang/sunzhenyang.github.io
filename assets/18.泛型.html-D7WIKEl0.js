import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,a as e,f as s}from"./app-BybQgHW9.js";const o={},p=s(`<ul><li><p>在 Java 中增加泛型之前，泛型程序设计使用继承来实现</p><ul><li>坏处 <ul><li>需要强制类型转换</li><li>可向集合中添加任意类型的对象，存在风险</li></ul></li></ul></li><li><p>使用</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Java SE7 及以后的版本中，构造方法中可以省略泛型类型</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多态与泛型" tabindex="-1"><a class="header-anchor" href="#多态与泛型"><span>多态与泛型</span></a></h2><ul><li>变量声明的类型必须匹配传递给实际对象的类型（前后尖括号类型必须一致）</li></ul>`,4);function c(l,i){return n(),t("div",null,[e(" more "),p])}const m=a(o,[["render",c],["__file","18.泛型.html.vue"]]),d=JSON.parse(`{"path":"/notes/java/Java%E8%BF%9B%E9%98%B6/18.%E6%B3%9B%E5%9E%8B.html","title":"泛型","lang":"zh-CN","frontmatter":{"title":"泛型","icon":"java","article":true,"breadcrumb":false,"date":"2023-02-22T00:00:00.000Z","category":["Java"],"tag":["Java基础"],"description":"在 Java 中增加泛型之前，泛型程序设计使用继承来实现 坏处 需要强制类型转换 可向集合中添加任意类型的对象，存在风险 使用 多态与泛型 变量声明的类型必须匹配传递给实际对象的类型（前后尖括号类型必须一致）","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/18.%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"在 Java 中增加泛型之前，泛型程序设计使用继承来实现 坏处 需要强制类型转换 可向集合中添加任意类型的对象，存在风险 使用 多态与泛型 变量声明的类型必须匹配传递给实际对象的类型（前后尖括号类型必须一致）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-01T04:40:50.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2023-02-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-01T04:40:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-01T04:40:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yang\\",\\"url\\":\\"https://codemake.fun/\\",\\"email\\":\\"874530670@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"多态与泛型","slug":"多态与泛型","link":"#多态与泛型","children":[]}],"git":{"createdTime":1680324050000,"updatedTime":1680324050000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":0.48,"words":144},"filePathRelative":"notes/java/Java进阶/18.泛型.md","localizedDate":"2023年2月22日","excerpt":"","autoDesc":true}`);export{m as comp,d as data};
