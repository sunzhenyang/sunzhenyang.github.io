import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,a as e,f as t}from"./app-DdwQwFQ1.js";const l={},p=t(`<blockquote><p>设计模式指的是一套被反复使用的、多数人知晓的、经过分类编目的代码设计经验总结</p></blockquote><h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式"><span>创建型模式</span></a></h2><blockquote><p>关注对象创建过程的模式</p></blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h3><blockquote><p>目的：使得类的一个对象成为该类系统中的唯一实例</p><p>定义：一个类有且仅有一个实例，并且自行实例化向整个系统提供</p></blockquote><h4 id="要点" tabindex="-1"><a class="header-anchor" href="#要点"><span>要点</span></a></h4><ul><li>某个类只能有一个实例</li><li>必须自行创建实例</li><li>必须自行向整个系统提供这个实例</li></ul><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h4><ul><li>只提供私有的构造方法</li><li>含有一个该类的静态私有对象</li><li>提供一个静态的公有方法用于创建和获取静态私有对象</li></ul><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ul><li>在内存中只有一个对象，节省内存空间</li><li>避免频繁的创建销毁对象，提高性能</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ul><li>扩展比较困难</li><li>实例化后对象长期不用，系统将默认为垃圾进行回收，造成状态丢失</li></ul><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h4><ul><li>创建对象时占用资源过多，但同时又需要用到该类对象</li><li>对系统内资源要求统一读写，如读写配置信息</li><li>当多个实例存在可能引起程序逻辑错误，如号码生成器</li></ul><h4 id="饿汉式" tabindex="-1"><a class="header-anchor" href="#饿汉式"><span>饿汉式</span></a></h4><blockquote><p>在对象创建过程中立即完成实例化，空间换时间，线程安全</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonOne</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="懒汉式" tabindex="-1"><a class="header-anchor" href="#懒汉式"><span>懒汉式</span></a></h4><blockquote><p>在对象创建过程中不实例化，在静态共有方法中再实例化，时间换空间，存在线程风险</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonOne</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonOne</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工厂方法模式<br> 建造者模式<br> 抽象工厂模式<br> 原型模式</p><h2 id="组合型模式" tabindex="-1"><a class="header-anchor" href="#组合型模式"><span>组合型模式</span></a></h2><blockquote><p>关注类和对象组合的模式</p></blockquote><p>桥接模式<br> 装饰器模式<br> 代理模式<br> 组合模式<br> 享元模式<br> 外观模式<br> 适配器模式</p><h2 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式"><span>行为型模式</span></a></h2><blockquote><p>关注对象之间的通信过程</p></blockquote><p>备忘录模式<br> 状态模式<br> 解释器模式<br> 命令模式<br> 模板方法模式<br> 访问者模式<br> 中介者模式<br> 迭代子模式<br> 观察者模式<br> 策略模式<br> 责任链模式</p>`,29);function o(c,i){return n(),s("div",null,[e(" more "),p])}const u=a(l,[["render",o],["__file","设计模式.html.vue"]]),k=JSON.parse(`{"path":"/notes/java/Java%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","icon":"java","article":true,"breadcrumb":false,"date":"2023-02-22T00:00:00.000Z","category":["Java"],"tag":["Java基础"],"head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/java/Java%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-01T04:40:50.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2023-02-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-01T04:40:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-01T04:40:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yang\\",\\"url\\":\\"https://codemake.fun/\\",\\"email\\":\\"874530670@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]}]},{"level":2,"title":"组合型模式","slug":"组合型模式","link":"#组合型模式","children":[]},{"level":2,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}],"git":{"createdTime":1680324050000,"updatedTime":1680324050000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"notes/java/Java进阶/设计模式.md","localizedDate":"2023年2月22日","excerpt":""}`);export{u as comp,k as data};
