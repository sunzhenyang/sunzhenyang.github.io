import{_ as n,Q as s,S as a,$ as e,a3 as t}from"./framework-9339b303.js";const p={},o=t(`<h2 id="事件构造器" tabindex="-1"><a class="header-anchor" href="#事件构造器" aria-hidden="true">#</a> 事件构造器</h2><blockquote><p>内建事件类形成一个层次结构，类似于 DOM 元素类。根是内建的 Event 类</p><p>内建事件（<code>click</code>）和自定义事件的冒泡机制相同，自定义事件也有捕获阶段和冒泡阶段</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span>type<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><strong>type</strong>：事件类型，可以是像这样 <code>click</code> 的字符串，或者我们自己的像这样 <code>my-event</code> 的参数</p></li><li><p><strong>options</strong>：具有两个可选属性的对象</p><ul><li><code>bubbles</code>：如果为 <code>true</code>，那么事件会冒泡</li><li><code>cancelable</code>：如果为 <code>true</code>，那么默认行为就会被阻止</li></ul></li></ul><h2 id="dispatchevent" tabindex="-1"><a class="header-anchor" href="#dispatchevent" aria-hidden="true">#</a> dispatchEvent</h2><blockquote><p>在元素上调用自定义事件</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elem<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-istrusted" tabindex="-1"><a class="header-anchor" href="#event-istrusted" aria-hidden="true">#</a> event.isTrusted</h2><blockquote><p>区分“真实”用户事件和通过脚本生成的事件</p><p>来自真实用户操作的事件，<code>event.isTrusted</code> 属性为 <code>true</code></p><p>脚本生成的事件，<code>event.isTrusted</code> 属性为 <code>false</code></p></blockquote><h2 id="标准构造器" tabindex="-1"><a class="header-anchor" href="#标准构造器" aria-hidden="true">#</a> 标准构造器</h2><blockquote><p>正确的构造器允许为该类型的事件指定标准属性，通用的 <code>Event</code> 构造器不允许这样做</p></blockquote><ul><li><code>UIEvent</code></li><li><code>FocusEvent</code></li><li><code>MouseEvent</code></li><li><code>WheelEvent</code></li><li><code>KeyboardEvent</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 标准构造器</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bubbles</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cancelable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">clientX</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token literal-property property">clientY</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>

<span class="token comment">// 通用 Event</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bubbles</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 构造器 Event 中只有 bubbles 和 cancelable 可以工作</span>
  <span class="token literal-property property">cancelable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">clientX</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token literal-property property">clientY</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined，未知的属性被忽略了！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h2><blockquote><p>和 <code>Event</code> 一样。除了一点不同，在第二个参数（对象）中，可以为想要与事件一起传递的任何自定义信息添加一个附加的属性 <code>detail</code></p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elem<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello for John!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 事件附带给处理程序的其他详细信息</span>
  elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  elem<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function c(l,i){return s(),a("div",null,[e(" more "),o])}const r=n(p,[["render",c],["__file","04.自定义事件.html.vue"]]);export{r as default};
