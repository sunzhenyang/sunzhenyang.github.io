import{_ as e,Q as i,S as l,$ as c,a3 as o}from"./framework-2ed98ecf.js";const d={},a=o('<h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><blockquote><p>异常本质上是程序上的错误，在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常</p></blockquote><ul><li>分类 <ul><li>编译时异常 <ul><li>括号配对</li><li>语句分号</li><li>关键字错误</li><li>等等</li></ul></li><li>运行时异常 <ul><li>使用空的对象引用调用方法</li><li>数组访问时下标越界</li><li>算术运算时除数为 0</li><li>类型转换时无法正常转型</li></ul></li></ul></li></ul><h3 id="throwable" tabindex="-1"><a class="header-anchor" href="#throwable" aria-hidden="true">#</a> Throwable</h3><blockquote><p>异常根类</p></blockquote><h4 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> Error</h4><blockquote><p>程序无法处理的错误，表示运行应用程序中较严重的问题，他们在应用程序的控制和处理能力之外，而且大多数是程序运行是不允许出现的状况，通常不需要关心此类错误</p></blockquote><ul><li><code>VirtualMachineError</code>：虚拟机错误</li><li><code>OutOfMemoryError</code>：内存溢出</li><li><code>ThreadDeath</code>：线程死锁</li></ul><h4 id="exception" tabindex="-1"><a class="header-anchor" href="#exception" aria-hidden="true">#</a> Exception</h4><blockquote><p>程序本身可以处理的异常</p></blockquote><ul><li><p><code>Checked Exception</code>：检查型异常，编译器要求必须处理的异常</p><ul><li><code>IOException</code>：IO 异常</li><li><code>SQLException</code>：SQL 异常</li></ul></li><li><p><code>Unchecked Exception</code>：非检查型异常，编译器不要求强制处理的异常</p><ul><li><code>RuntimeException</code><ul><li><code>NullPointerException</code>：空指针异常（使用了未经初始化的对象或者是不存在的对象时）</li><li><code>ArrayIndexOutOfBoundsException</code>：数组下标越界异常</li><li><code>ArrayStoreException</code>：数组中包含不兼容的值的异常（数组中实际传入的数据与预定不符，例如子类数组经过向上转型后，传入父类对象）</li><li><code>ArithmeticException</code>：数学运算异常</li><li><code>NumberFormatException</code>：数字格式化异常</li><li><code>ClassCastException</code>：类型转换异常（向下转型时，转换对象无法完成正常转换）</li><li><code>InputMismatchException</code>：输入格式错误异常（接受数据与预期格式不符时）</li><li><code>FileNotFoundException</code>：文件未找到异常（操作文件内容时发现文件不存在 ）</li></ul></li></ul></li></ul><h5 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h5><ul><li>异常对象 <ul><li>异常类型</li><li>异常出现时的程序状态</li><li><code>...</code></li></ul></li></ul><h5 id="捕获异常" tabindex="-1"><a class="header-anchor" href="#捕获异常" aria-hidden="true">#</a> 捕获异常</h5><ul><li>对运行时异常、错误或可查异常，Java 技术所要求的的异常处理方式不同 <ul><li>对于可查异常必须捕捉或者声明抛出</li><li>允许忽略不可查的 <code>RuntimeException</code>（含子类）和 <code>Error</code>（含子类）</li></ul></li></ul><h5 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h5><ul><li><code>try</code> 块后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块</li><li><code>try...catch</code> 代码块中定义的是局部变量，只能在其代码块中使用</li><li><code>finally</code> 代码块是强制执行的，不建议在其中书写 <code>return</code> 语句，一旦书写会屏蔽掉 <code>try</code> 和 <code>catch</code> 代码块中的 <code>return</code> 语句</li><li>子类重写父类排除的异常方法时，声明的异常必须是父类方法所声明异常的同类或子类</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210201174818429.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="异常方法" tabindex="-1"><a class="header-anchor" href="#异常方法" aria-hidden="true">#</a> 异常方法</h3><ul><li><p><code>e.toString()</code>：获取异常类型和描述信息，当直接输出对象 <code>e</code> 时，调用的就是该方法</p></li><li><p><code>e.getMessage()</code>：获取异常描述信息</p></li><li><p><code>e.printStackTrace()</code>：打印异常的堆栈信息，包括种类、描述信息、出错位置等</p></li></ul><h3 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常" aria-hidden="true">#</a> 自定义异常</h3><ul><li>描述特定业务产生的异常类型</li><li>定义一个类，继承 <code>Throwable</code> 类或它的子类</li><li>自定义异常需先经过 <code>throw</code> 抛出，才能被 <code>catch</code> 捕获，无法自动被程序捕获并处理</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210316190417847.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="异常链" tabindex="-1"><a class="header-anchor" href="#异常链" aria-hidden="true">#</a> 异常链</h3><ul><li>捕获一个异常后再抛出另一个异常</li><li>将异常发生的原因一个传一个串起来，即把底层的异常信息传递给上层，逐层抛出</li></ul>',25);function r(t,n){return i(),l("div",null,[c(" more "),a])}const u=e(d,[["render",r],["__file","异常.html.vue"]]);export{u as default};
