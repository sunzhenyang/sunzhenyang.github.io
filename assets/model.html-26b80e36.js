const t=JSON.parse(`{"key":"v-74ec8a24","path":"/technology/javascript/events/model.html","title":"事件模型","lang":"zh-CN","frontmatter":{"title":"事件模型","icon":"article","category":"javascript","article":false,"tag":["javascript"],"copyright":"Copyright by 阮一峰","description":"监听函数 浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。 JavaScript 有三种方法，可以为事件绑定监听函数。 HTML 的 on- 属性 HTML 语言允许在元素的属性中，直接定义某些事件的监听代码。 &lt;body onload=\\"doSomething()\\"&gt; &lt;div onclick=\\"console.log('触发事件')\\"&gt;","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/javascript/events/model.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"事件模型"}],["meta",{"property":"og:description","content":"监听函数 浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。 JavaScript 有三种方法，可以为事件绑定监听函数。 HTML 的 on- 属性 HTML 语言允许在元素的属性中，直接定义某些事件的监听代码。 &lt;body onload=\\"doSomething()\\"&gt; &lt;div onclick=\\"console.log('触发事件')\\"&gt;"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"事件模型\\",\\"description\\":\\"监听函数 浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。 JavaScript 有三种方法，可以为事件绑定监听函数。 HTML 的 on- 属性 HTML 语言允许在元素的属性中，直接定义某些事件的监听代码。 &lt;body onload=\\\\\\"doSomething()\\\\\\"&gt; &lt;div onclick=\\\\\\"console.log('触发事件')\\\\\\"&gt;\\"}"]]},"headers":[{"level":2,"title":"监听函数","slug":"监听函数","link":"#监听函数","children":[{"level":3,"title":"HTML 的 on- 属性","slug":"html-的-on-属性","link":"#html-的-on-属性","children":[]},{"level":3,"title":"元素节点的事件属性","slug":"元素节点的事件属性","link":"#元素节点的事件属性","children":[]},{"level":3,"title":"EventTarget.addEventListener()","slug":"eventtarget-addeventlistener","link":"#eventtarget-addeventlistener","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"this 的指向","slug":"this-的指向","link":"#this-的指向","children":[]},{"level":2,"title":"事件的传播","slug":"事件的传播","link":"#事件的传播","children":[]},{"level":2,"title":"事件的代理","slug":"事件的代理","link":"#事件的代理","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":6.96,"words":2087},"filePathRelative":"technology/javascript/events/model.md","localizedDate":"2023年1月11日","excerpt":"<h2> 监听函数</h2>\\n<p>浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。</p>\\n<p>JavaScript 有三种方法，可以为事件绑定监听函数。</p>\\n<h3> HTML 的 on- 属性</h3>\\n<p>HTML 语言允许在元素的属性中，直接定义某些事件的监听代码。</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>body</span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onload</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">doSomething</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onclick</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\">console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'触发事件'</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{t as data};
