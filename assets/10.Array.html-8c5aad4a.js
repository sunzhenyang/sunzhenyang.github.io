import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as s,a as c,b as e,d as l,e as r,f as n}from"./app-e1714ab0.js";const p={},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},u=e("br",null,null,-1),h=e("h2",{id:"array-length",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#array-length","aria-hidden":"true"},"#"),l(" Array.length")],-1),_=e("blockquote",null,[e("p",null,"返回或设置一个数组中的元素个数")],-1),y=e("br",null,null,-1),b={id:"array-from",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#array-from","aria-hidden":"true"},"#",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"},m=n("<ul><li>描述：从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例 <ul><li>伪数组对象（拥有一个 length 属性和若干索引属性的任意对象）</li><li>可迭代对象（可以获取对象中的元素,如 Map和 Set 等）</li></ul></li><li>语法：<code>Array.from(arrayLike[, mapFn[, thisArg]])</code></li><li>参数 <ul><li>arrayLike：想要转换成数组的伪数组对象或可迭代对象</li><li>mapFn（可选）：如果指定了该参数，新数组中的每个元素会执行该回调函数</li><li>thisArg（可选）：执行回调函数 mapFn 时 this 对象</li></ul></li><li>返回值：一个新的数组实例</li></ul><br>",2),v={id:"array-isarray",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#array-isarray","aria-hidden":"true"},"#",-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},x=e("ul",null,[e("li",null,"描述：于确定传递的值是否是一个 Array"),e("li",null,[l("语法："),e("code",null,"Array.isArray(obj)")]),e("li",null,[l("参数 "),e("ul",null,[e("li",null,"obj：需要检测的值")])]),e("li",null,"返回值：如果值是 Array，则为 true，否则为 false")],-1),z=e("br",null,null,-1),j={id:"array-of",tabindex:"-1"},N=e("a",{class:"header-anchor",href:"#array-of","aria-hidden":"true"},"#",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of",target:"_blank",rel:"noopener noreferrer"},O=n(`<ul><li>描述：创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</li><li>语法：<code>Array.of(element0[, element1[, ...[, elementN]]])</code></li><li>参数 <ul><li>elementN：任意个参数，将按顺序成为返回数组中的元素</li></ul></li><li>返回值：新的 Array 实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 旧版本兼容</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>of<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Array<span class="token punctuation">.</span><span class="token function-variable function">of</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),W={id:"array-prototype-concat",tabindex:"-1"},S=e("a",{class:"header-anchor",href:"#array-prototype-concat","aria-hidden":"true"},"#",-1),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",target:"_blank",rel:"noopener noreferrer"},G=n("<ul><li>描述：用于合并两个或多个数组，此方法不会更改现有数组</li><li>语法：<code>var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])</code></li><li>参数 <ul><li>valueN：数组和/或值，将被合并到一个新的数组中 <ul><li>如果省略了所有 valueN 参数，则 concat 会返回调用此方法的现存数组的一个<strong>浅拷贝</strong></li></ul></li></ul></li><li>返回值：新的 Array 实例</li></ul><br>",2),J={id:"array-prototype-copywithin",tabindex:"-1"},E=e("a",{class:"header-anchor",href:"#array-prototype-copywithin","aria-hidden":"true"},"#",-1),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",target:"_blank",rel:"noopener noreferrer"},V=n("<ul><li>描述：<strong>浅拷贝</strong>数组的一部分到同一数组中的另一个位置（按顺序依次覆盖）</li><li>语法：<code>arr.copyWithin(target[, start[, end]])</code></li><li>参数 <ul><li>target：0 为基底的索引，复制序列到该位置 <ul><li>如果是负数，target 将从末尾开始计算</li><li>如果 target 大于等于 arr.length，将会不发生拷贝</li><li>如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。</li></ul></li><li>start：0 为基底的索引，开始复制元素的起始位置 <ul><li>如果是负数，start 将从末尾开始计算</li><li>如果 start 被忽略，copyWithin 将会从0开始复制</li></ul></li><li>end：0 为基底的索引，开始复制元素的结束位置 <ul><li>copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素</li><li>如果是负数， end 将从末尾开始计算</li><li>如果 end 被忽略，copyWithin 方法将会一直复制至数组结尾（默认为 arr.length）</li></ul></li></ul></li><li>返回值：改变后的数组</li></ul><br>",2),w={id:"array-prototype-every",tabindex:"-1"},F=e("a",{class:"header-anchor",href:"#array-prototype-every","aria-hidden":"true"},"#",-1),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every",target:"_blank",rel:"noopener noreferrer"},L=n("<ul><li>描述：测试一个数组内的所有元素是否都能通过某个指定函数的测试</li><li>语法：<code>arr.every(callback(element[, index[, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：用来测试每个元素的函数，它可以接收三个参数 <ul><li>element：用于测试的当前值</li><li>index：用于测试的当前值的索引</li><li>array：调用 every 的当前数组</li></ul></li><li>thisArg：执行 callback 时使用的 this 值</li></ul></li><li>返回值：如果回调函数的每一次返回都为 truthy 值，返回 true ，否则返回 false</li></ul><br>",2),T={id:"array-prototype-fill",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#array-prototype-fill","aria-hidden":"true"},"#",-1),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",target:"_blank",rel:"noopener noreferrer"},U=e("ul",null,[e("li",null,"描述：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引"),e("li",null,[l("语法："),e("code",null,"arr.fill(value[, start[, end]])")]),e("li",null,[l("参数 "),e("ul",null,[e("li",null,"value：用来填充数组元素的值"),e("li",null,"start：起始索引，默认值为 0"),e("li",null,"end：终止索引，默认值为 this.length")])]),e("li",null,"返回值：修改后的数组**（改变原数组）**")],-1),D=e("br",null,null,-1),H={id:"array-prototype-filter",tabindex:"-1"},K=e("a",{class:"header-anchor",href:"#array-prototype-filter","aria-hidden":"true"},"#",-1),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank",rel:"noopener noreferrer"},Q=n("<ul><li>描述：创建一个新数组, 其包含通过所提供函数实现的测试的所有元素（<strong>浅拷贝</strong>）</li><li>语法：<code>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。它接受以下三个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：调用了 filter 的数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li>返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组</li></ul><br>",2),X={id:"array-prototype-find",tabindex:"-1"},Y=e("a",{class:"header-anchor",href:"#array-prototype-find","aria-hidden":"true"},"#",-1),Z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find",target:"_blank",rel:"noopener noreferrer"},$=n("<ul><li>描述：返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined</li><li>语法：<code>arr.find(callback[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li></ul><br>",2),ee={id:"array-prototype-findindex",tabindex:"-1"},le=e("a",{class:"header-anchor",href:"#array-prototype-findindex","aria-hidden":"true"},"#",-1),ae={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",target:"_blank",rel:"noopener noreferrer"},re=n("<ul><li>描述：返回数组中满足提供的测试函数的第一个元素的索引，若没有找到对应元素则返回 -1</li><li>语法：<code>arr.findIndex(callback[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li></ul><br>",2),ne={id:"array-prototype-some",tabindex:"-1"},te=e("a",{class:"header-anchor",href:"#array-prototype-some","aria-hidden":"true"},"#",-1),oe={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some",target:"_blank",rel:"noopener noreferrer"},ie=n("<ul><li>描述：测试数组中是不是至少有1个元素通过了被提供的函数测试</li><li>语法：<code>arr.some(callback(element[, index[, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li>返回值：数组中有至少一个元素通过回调函数的测试就会返回 true，所有元素都没有通过回调函数的测试返回值才会为false</li></ul><br>",2),se={id:"array-prototype-flat",tabindex:"-1"},ce=e("a",{class:"header-anchor",href:"#array-prototype-flat","aria-hidden":"true"},"#",-1),pe={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat",target:"_blank",rel:"noopener noreferrer"},de=e("ul",null,[e("li",null,"描述：按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回"),e("li",null,[l("语法："),e("code",null,"var newArray = arr.flat([depth])")]),e("li",null,[l("参数 "),e("ul",null,[e("li",null,"depth ：指定要提取嵌套数组的结构深度，默认值为 1")])]),e("li",null,"返回值：一个包含将数组与子数组中所有元素的新数组")],-1),ue=e("br",null,null,-1),he={id:"array-prototype-flatmap",tabindex:"-1"},_e=e("a",{class:"header-anchor",href:"#array-prototype-flatmap","aria-hidden":"true"},"#",-1),ye={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap",target:"_blank",rel:"noopener noreferrer"},be=n(`<ul><li><p>描述：首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 连着深度值为1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些</p></li><li><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// return element for new_array</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数</p><ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>currentValue：当前正在数组中处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：被调用的 map 数组</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li><p>返回值： 一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 depth 值为 1</p></li></ul><br>`,2),fe={id:"array-prototype-foreach",tabindex:"-1"},ke=e("a",{class:"header-anchor",href:"#array-prototype-foreach","aria-hidden":"true"},"#",-1),me={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"},ve=n("<ul><li>描述：对数组的每个元素执行一次给定的函数</li><li>语法：<code>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li>返回值：undefined</li><li>注意 <ul><li>不对未初始化的值进行任何操作 <code>[1,,2,,3]</code></li></ul></li></ul><br>",2),ge={id:"array-prototype-includes",tabindex:"-1"},Ae=e("a",{class:"header-anchor",href:"#array-prototype-includes","aria-hidden":"true"},"#",-1),xe={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",target:"_blank",rel:"noopener noreferrer"},ze=n("<ul><li>描述：判断一个数组是否包含一个指定的值</li><li>语法：<code>arr.includes(valueToFind[, fromIndex])</code></li><li>参数 <ul><li>valueToFind：需要查找的元素值</li><li>fromIndex：从fromIndex 索引处开始查找 valueToFind <ul><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始搜，默认为 0。</li></ul></li></ul></li><li>返回值：如果包含则返回 true，否则返回false</li><li>注意 <ul><li>可以检测 NaN</li><li>严格检测 <code>===</code><br></li></ul></li></ul>",1),je={id:"array-prototype-indexof",tabindex:"-1"},Ne=e("a",{class:"header-anchor",href:"#array-prototype-indexof","aria-hidden":"true"},"#",-1),Ce={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",target:"_blank",rel:"noopener noreferrer"},Oe=n("<ul><li>描述：返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1</li><li>语法：<code>arr.indexOf(searchElement[, fromIndex])</code></li><li>参数 <ul><li>searchElement：要查找的元素</li><li>fromIndex：开始查找的位置 <ul><li>如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回 -1</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索，默认为 0</li></ul></li></ul></li><li>注意 <ul><li>不可以检测 NaN</li><li>严格检测 <code>===</code><br></li></ul></li></ul>",1),We={id:"array-prototype-lastindexof",tabindex:"-1"},Se=e("a",{class:"header-anchor",href:"#array-prototype-lastindexof","aria-hidden":"true"},"#",-1),Re={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",target:"_blank",rel:"noopener noreferrer"},Ge=n("<ul><li>描述：返回指定元素在数组中最后一次出现的索引，如果不存在，则返回 -1</li><li>语法：<code>arr.lastIndexOf(searchElement[, fromIndex])</code></li><li>参数 <ul><li>searchElement：要查找的元素</li><li>fromIndex：从此位置开始逆向查找，默认为数组的长度减 1(arr.length - 1)，即整个数组都被查找 <ul><li>如果该索引值大于或等于数组长度，则整个数组会被查找</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始向左搜索</li></ul></li></ul></li></ul><br>",2),Je={id:"array-prototype-join",tabindex:"-1"},Ee=e("a",{class:"header-anchor",href:"#array-prototype-join","aria-hidden":"true"},"#",-1),Ie={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"},Ve=n("<ul><li>描述：方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串</li><li>语法：<code>arr.join([separator])</code></li><li>参数 <ul><li>separator ：指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。 <ul><li>如果缺省该值，数组元素用逗号（,）分隔</li><li>如果separator是空字符串(&quot;&quot;)，则所有元素之间都没有任何字符。</li></ul></li></ul></li><li>返回值：个所有数组元素连接的字符串。如果 arr.length 为 0，则返回空字符串</li></ul><br>",2),we={id:"array-prototype-entries",tabindex:"-1"},Fe=e("a",{class:"header-anchor",href:"#array-prototype-entries","aria-hidden":"true"},"#",-1),Me={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"},Le=e("ul",null,[e("li",null,"描述：返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对"),e("li",null,[l("语法："),e("code",null,"arr.entries()")]),e("li",null,[l("返回值：一个新的 Array 迭代器对象。Array Iterator是对象，它的原型（"),e("code",null,"__proto__"),l(":Array Iterator）上有一个next方法，可用用于遍历迭代器取得原数组的[key,value]")])],-1),Te=e("br",null,null,-1),qe={id:"array-prototype-keys",tabindex:"-1"},Be=e("a",{class:"header-anchor",href:"#array-prototype-keys","aria-hidden":"true"},"#",-1),Ue={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",target:"_blank",rel:"noopener noreferrer"},De=e("ul",null,[e("li",null,"描述：返回一个包含数组中每个索引键的 Array Iterator 对象"),e("li",null,[l("语法："),e("code",null,"arr.keys()")])],-1),He=e("br",null,null,-1),Ke={id:"array-prototype-values",tabindex:"-1"},Pe=e("a",{class:"header-anchor",href:"#array-prototype-values","aria-hidden":"true"},"#",-1),Qe={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values",target:"_blank",rel:"noopener noreferrer"},Xe=e("ul",null,[e("li",null,"描述： 返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值"),e("li",null,[l("语法："),e("code",null,"arr.values()")])],-1),Ye=e("br",null,null,-1),Ze={id:"array-prototype-map",tabindex:"-1"},$e=e("a",{class:"header-anchor",href:"#array-prototype-map","aria-hidden":"true"},"#",-1),el={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"},ll=n(`<ul><li><p>描述：创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回</p></li><li><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// Return element for new_array </span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数</p><ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li><p>返回值：一个由原数组每个元素执行回调函数的结果组成的新数组</p></li></ul><br>`,2),al={id:"array-prototype-reduce",tabindex:"-1"},rl=e("a",{class:"header-anchor",href:"#array-prototype-reduce","aria-hidden":"true"},"#",-1),nl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",target:"_blank",rel:"noopener noreferrer"},tl=n(`<ul><li><p>描述：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值</p></li><li><p>语法：<code>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</code></p></li><li><p>参数</p><ul><li>callback：执行数组中每个值 (如果没有提供 initialValue 则第一个值除外)的函数，包含四个参数 <ul><li>accumulator：累计器累计回调的返回值 <ul><li>它是上一次调用回调时返回的累积值，或initialValue</li></ul></li><li>currentValue：数组中正在处理的元素</li><li>index：数组中正在处理的当前元素的索引 <ul><li>如果提供了initialValue，则起始索引号为 0，否则从索引 1 起始</li></ul></li><li>array：调用 reduce() 的数组</li></ul></li><li>initialValue：作为第一次调用 callback 函数时的第一个参数的值 <ul><li>如果没有提供初始值，则将使用数组中的第一个元素，并跳过该元素</li><li>在没有初始值的空数组上调用 reduce 将报错</li></ul></li></ul></li><li><p>返回值：函数累计处理的结果</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),ol={id:"array-prototype-reduceright",tabindex:"-1"},il=e("a",{class:"header-anchor",href:"#array-prototype-reduceright","aria-hidden":"true"},"#",-1),sl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",target:"_blank",rel:"noopener noreferrer"},cl=n("<ul><li><p>描述：接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p></li><li><p>语法：<code>arr.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue])</code></p></li><li><p>参数</p><ul><li>callback：执行数组中每个值，包含四个参数 <ul><li>accumulator：累计器累计回调的返回值 <ul><li>它是上一次调用回调时返回的累积值，或 initialValue</li></ul></li><li>currentValue：数组中正在处理的元素</li><li>index：数组中正在处理的当前元素的索引</li><li>array：调用 reduce() 的数组</li></ul></li><li>initialValue：作为第一次调用 callback 函数时的第一个参数的值 <ul><li>如果没有提供初始值，则将使用数组中的最后一个元素，并跳过该元素</li><li>在没有初始值的空数组上调用 reduce 将报错</li></ul></li></ul></li><li><p>返回值：函数累计处理的结果</p></li></ul><br>",2),pl={id:"array-prototype-unshift",tabindex:"-1"},dl=e("a",{class:"header-anchor",href:"#array-prototype-unshift","aria-hidden":"true"},"#",-1),ul={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",target:"_blank",rel:"noopener noreferrer"},hl=e("ul",null,[e("li",null,[e("p",null,"描述：将一个或多个元素添加到数组的开头，并返回该数组的新长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.unshift(element1, ..., elementN)")])]),e("li",null,[e("p",null,"参数"),e("ul",null,[e("li",null,"elementN：被添加到数组开头的元素")])]),e("li",null,[e("p",null,"返回值：当调用该方法时，新的 length 属性值将被返回")])],-1),_l=e("br",null,null,-1),yl={id:"array-prototype-shift",tabindex:"-1"},bl=e("a",{class:"header-anchor",href:"#array-prototype-shift","aria-hidden":"true"},"#",-1),fl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",target:"_blank",rel:"noopener noreferrer"},kl=e("ul",null,[e("li",null,[e("p",null,"描述：从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.shift()")])]),e("li",null,[e("p",null,"返回值：从数组中删除的元素（ 当数组为空时返回 undefined ）")])],-1),ml=e("br",null,null,-1),vl={id:"array-prototype-push",tabindex:"-1"},gl=e("a",{class:"header-anchor",href:"#array-prototype-push","aria-hidden":"true"},"#",-1),Al={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"},xl=e("ul",null,[e("li",null,[e("p",null,"描述：将一个或多个元素添加到数组的末尾，并返回该数组的新长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.push(element1, ..., elementN)")])]),e("li",null,[e("p",null,"参数"),e("ul",null,[e("li",null,"elementN：被添加到数组末尾的元素")])]),e("li",null,[e("p",null,"返回值：当调用该方法时，新的 length 属性值将被返回")])],-1),zl=e("br",null,null,-1),jl={id:"array-prototype-pop",tabindex:"-1"},Nl=e("a",{class:"header-anchor",href:"#array-prototype-pop","aria-hidden":"true"},"#",-1),Cl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",target:"_blank",rel:"noopener noreferrer"},Ol=e("ul",null,[e("li",null,[e("p",null,"描述：从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.pop()")])]),e("li",null,[e("p",null,"返回值：从数组中删除的元素（ 当数组为空时返回 undefined ）")])],-1),Wl=e("br",null,null,-1),Sl={id:"array-prototype-slice",tabindex:"-1"},Rl=e("a",{class:"header-anchor",href:"#array-prototype-slice","aria-hidden":"true"},"#",-1),Gl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",target:"_blank",rel:"noopener noreferrer"},Jl=n("<ul><li><p>描述：返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end），原始数组不会被改变</p></li><li><p>语法：<code>arr.slice([begin[, end]])</code></p></li><li><p>参数</p><ul><li>begin：从该索引开始提取原数组元素 <ul><li>如果省略 begin，则 slice 从索引 0 开始</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始</li><li>如果 begin 大于原数组的长度，则会返回空数组</li></ul></li><li>end：在该索引处结束提取原数组元素 <ul><li>如果省略 end 或者 end 大于数组的长度，则 slice 会一直提取到原数组末尾</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引结束</li></ul></li></ul></li><li><p>返回值：一个含有被提取元素的新数组</p></li></ul><br>",2),El={id:"array-prototype-splice",tabindex:"-1"},Il=e("a",{class:"header-anchor",href:"#array-prototype-splice","aria-hidden":"true"},"#",-1),Vl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",target:"_blank",rel:"noopener noreferrer"},wl=n("<ul><li><p>描述：通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组</p></li><li><p>语法：<code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code></p></li><li><p>参数</p><ul><li>start：指定修改的开始位置（从0计数） <ul><li>如果超出了数组的长度，则从数组末尾开始添加内容</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始添加内容</li><li>负数的绝对值大于数组的长度，则表示开始位置为第 0 位</li></ul></li><li>deleteCount：整数，表示要移除的数组元素的个数 <ul><li>如果 deleteCount 被省略了 或者 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）</li><li>deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素（否则没有意义）</li></ul></li><li>item1, item2, ...：要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素</li></ul></li><li><p>返回值：由被删除的元素组成的一个数组</p><ul><li>如果只删除了一个元素，则返回只包含一个元素的数组</li><li>如果没有删除元素，则返回空数组</li></ul></li></ul><br>",2),Fl={id:"array-prototype-sort",tabindex:"-1"},Ml=e("a",{class:"header-anchor",href:"#array-prototype-sort","aria-hidden":"true"},"#",-1),Ll={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",target:"_blank",rel:"noopener noreferrer"},Tl=n("<ul><li><p>描述：元素按照转换为的字符串的各个字符的 Unicode 位点进行排序</p></li><li><p>语法：<code>arr.sort([compareFunction])</code></p></li><li><p>参数</p><ul><li>compareFunction：用来指定按某种顺序进行排列的函数 <ul><li>firstEl：第一个用于比较的元素</li><li>secondEl：第二个用于比较的元素</li><li>compareFunction(firstEl, secondEl) 小于 0 ，那么 firstEl 会被排列到 secondEl 之前</li><li>compareFunction(firstEl, secondEl) 大于 0 ， secondEl 会被排列到 firstEl 之前</li></ul></li></ul></li><li><p>返回值：排序后的数组。请注意，数组已原地排序，并且不进行复制</p></li></ul><br>",2),ql={id:"array-prototype-reverse",tabindex:"-1"},Bl=e("a",{class:"header-anchor",href:"#array-prototype-reverse","aria-hidden":"true"},"#",-1),Ul={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",target:"_blank",rel:"noopener noreferrer"},Dl=n("<ul><li><p>描述：将数组中元素的位置颠倒，并返回该数组，该方法会改变原数组</p></li><li><p>语法：<code>arr.reverse()</code></p></li><li><p>参数</p><ul><li>compareFunction：用来指定按某种顺序进行排列的函数 <ul><li>firstEl：第一个用于比较的元素</li><li>secondEl：第二个用于比较的元素</li><li>compareFunction(firstEl, secondEl) 小于 0 ，那么 firstEl 会被排列到 secondEl 之前</li><li>compareFunction(firstEl, secondEl) 大于 0 ， secondEl 会被排列到 firstEl 之前</li></ul></li></ul></li><li><p>返回值：颠倒后的数组</p></li></ul><br>",2),Hl={id:"array-prototype-tostring",tabindex:"-1"},Kl=e("a",{class:"header-anchor",href:"#array-prototype-tostring","aria-hidden":"true"},"#",-1),Pl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",target:"_blank",rel:"noopener noreferrer"},Ql=e("ul",null,[e("li",null,"描述： 返回一个字符串，表示指定的数组及其元素"),e("li",null,[l("语法："),e("code",null,"arr.toString()")]),e("li",null,"返回值：一个表示指定的数组及其元素的字符串")],-1);function Xl(Yl,Zl){const a=o("ExternalLinkIcon");return i(),s("div",null,[c(" more "),e("p",null,[e("a",d,[l("Array"),r(a)])]),u,h,_,y,e("h2",b,[f,l(),e("a",k,[l("Array.from()"),r(a)])]),m,e("h2",v,[g,l(),e("a",A,[l("Array.isArray()"),r(a)])]),x,z,e("h2",j,[N,l(),e("a",C,[l("Array.of()"),r(a)])]),O,e("h2",W,[S,l(),e("a",R,[l("Array.prototype.concat()"),r(a)])]),G,e("h2",J,[E,l(),e("a",I,[l("Array.prototype.copyWithin()"),r(a)])]),V,e("h2",w,[F,l(),e("a",M,[l("Array.prototype.every()"),r(a)])]),L,e("h2",T,[q,l(),e("a",B,[l("Array.prototype.fill()"),r(a)])]),U,D,e("h2",H,[K,l(),e("a",P,[l("Array.prototype.filter()"),r(a)])]),Q,e("h2",X,[Y,l(),e("a",Z,[l("Array.prototype.find()"),r(a)])]),$,e("h2",ee,[le,l(),e("a",ae,[l("Array.prototype.findIndex()"),r(a)])]),re,e("h2",ne,[te,l(),e("a",oe,[l("Array.prototype.some()"),r(a)])]),ie,e("h2",se,[ce,l(),e("a",pe,[l("Array.prototype.flat()"),r(a)])]),de,ue,e("h2",he,[_e,l(),e("a",ye,[l("Array.prototype.flatMap()"),r(a)])]),be,e("h2",fe,[ke,l(),e("a",me,[l("Array.prototype.forEach()"),r(a)])]),ve,e("h2",ge,[Ae,l(),e("a",xe,[l("Array.prototype.includes()"),r(a)])]),ze,e("h2",je,[Ne,l(),e("a",Ce,[l("Array.prototype.indexOf()"),r(a)])]),Oe,e("h2",We,[Se,l(),e("a",Re,[l("Array.prototype.lastIndexOf()"),r(a)])]),Ge,e("h2",Je,[Ee,l(),e("a",Ie,[l("Array.prototype.join()"),r(a)])]),Ve,e("h2",we,[Fe,l(),e("a",Me,[l("Array.prototype.entries()"),r(a)])]),Le,Te,e("h2",qe,[Be,l(),e("a",Ue,[l("Array.prototype.keys()"),r(a)])]),De,He,e("h2",Ke,[Pe,l(),e("a",Qe,[l("Array.prototype.values()"),r(a)])]),Xe,Ye,e("h2",Ze,[$e,l(),e("a",el,[l("Array.prototype.map()"),r(a)])]),ll,e("h2",al,[rl,l(),e("a",nl,[l("Array.prototype.reduce()"),r(a)])]),tl,e("h2",ol,[il,l(),e("a",sl,[l("Array.prototype.reduceRight()"),r(a)])]),cl,e("h2",pl,[dl,l(),e("a",ul,[l("Array.prototype.unshift()"),r(a)])]),hl,_l,e("h2",yl,[bl,l(),e("a",fl,[l("Array.prototype.shift()"),r(a)])]),kl,ml,e("h2",vl,[gl,l(),e("a",Al,[l("Array.prototype.push()"),r(a)])]),xl,zl,e("h2",jl,[Nl,l(),e("a",Cl,[l("Array.prototype.pop()"),r(a)])]),Ol,Wl,e("h2",Sl,[Rl,l(),e("a",Gl,[l("Array.prototype.slice()"),r(a)])]),Jl,e("h2",El,[Il,l(),e("a",Vl,[l("Array.prototype.splice()"),r(a)])]),wl,e("h2",Fl,[Ml,l(),e("a",Ll,[l("Array.prototype.sort()"),r(a)])]),Tl,e("h2",ql,[Bl,l(),e("a",Ul,[l("Array.prototype.reverse()"),r(a)])]),Dl,e("h2",Hl,[Kl,l(),e("a",Pl,[l("Array.prototype.toString()"),r(a)])]),Ql])}const la=t(p,[["render",Xl],["__file","10.Array.html.vue"]]);export{la as default};
