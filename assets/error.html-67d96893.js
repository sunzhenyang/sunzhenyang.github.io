const n=JSON.parse(`{"key":"v-48e82a2e","path":"/technology/ts_axios/chapter5/error.html","title":"错误处理","lang":"zh-CN","frontmatter":{"title":"错误处理","icon":"article","category":"typescript","article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"需求分析 在上一章节，我们实现了 ts-axios 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程序的健壮性而言是远不够的，因此我们这一章需要对 AJAX 各种错误情况做处理。 并且我们希望程序也能捕获到这些错误，做进一步的处理。 axios({ method: 'get', url: '/error/get' }).then((res) =&gt; { console.log(res) }).catch((e) =&gt; { console.log(e) })","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter5/error.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"错误处理"}],["meta",{"property":"og:description","content":"需求分析 在上一章节，我们实现了 ts-axios 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程序的健壮性而言是远不够的，因此我们这一章需要对 AJAX 各种错误情况做处理。 并且我们希望程序也能捕获到这些错误，做进一步的处理。 axios({ method: 'get', url: '/error/get' }).then((res) =&gt; { console.log(res) }).catch((e) =&gt; { console.log(e) })"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"错误处理\\",\\"description\\":\\"需求分析 在上一章节，我们实现了 ts-axios 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程序的健壮性而言是远不够的，因此我们这一章需要对 AJAX 各种错误情况做处理。 并且我们希望程序也能捕获到这些错误，做进一步的处理。 axios({ method: 'get', url: '/error/get' }).then((res) =&gt; { console.log(res) }).catch((e) =&gt; { console.log(e) })\\"}"]]},"headers":[{"level":2,"title":"需求分析","slug":"需求分析","link":"#需求分析","children":[]},{"level":2,"title":"处理网络异常错误","slug":"处理网络异常错误","link":"#处理网络异常错误","children":[]},{"level":2,"title":"处理超时错误","slug":"处理超时错误","link":"#处理超时错误","children":[]},{"level":2,"title":"处理非 200 状态码","slug":"处理非-200-状态码","link":"#处理非-200-状态码","children":[]},{"level":2,"title":"demo 编写","slug":"demo-编写","link":"#demo-编写","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":3.34,"words":1001},"filePathRelative":"technology/ts_axios/chapter5/error.md","localizedDate":"2023年1月11日","excerpt":"<h2> 需求分析</h2>\\n<p>在上一章节，我们实现了 <code>ts-axios</code> 的基础功能，但目前为止我们都是处理了正常接收请求的逻辑，并没有考虑到任何错误情况的处理，这对于一个程序的健壮性而言是远不够的，因此我们这一章需要对 AJAX 各种错误情况做处理。</p>\\n<p>并且我们希望程序也能捕获到这些错误，做进一步的处理。</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token function\\">axios</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  method<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'get'</span><span class=\\"token punctuation\\">,</span>\\n  url<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'/error/get'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
