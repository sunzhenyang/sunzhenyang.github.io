import{_ as n,Q as s,S as a,$ as t,a3 as p}from"./framework-3ab2aaf6.js";const e={},c=p(`<h4 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h4><blockquote><p>允许不同类的对象对同一消息做出不同的响应</p></blockquote><ul><li>可以借由向上转型和动态绑定机制完成</li><li>向上转型实现了将子类对象向上转型为父类类型</li><li>动态绑定机制能识别出对象转型前的类型，从而自动调用该类的方法</li></ul><h5 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h5><ul><li>编译时多态 <ul><li>又称设计时多态，方法重载</li></ul></li><li>运行时多态 <ul><li>程序运行时动态决定调用哪个方法</li></ul></li></ul><h5 id="向上转型" tabindex="-1"><a class="header-anchor" href="#向上转型" aria-hidden="true">#</a> 向上转型</h5><ul><li><p>语法：<code>父类类型 父类引用 = new 子类类型(参数)</code></p></li><li><p>又称隐式转型、自动转型</p></li><li><p>父类引用指向子类实例，也表示子类对象可以赋值给父类的对象</p></li><li><p>只能调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法</p></li><li><p>是安全的，因为任何子类都继承并接受了父类的非私有成员方法</p></li><li><p>应用场景：多适用于有多个同父子类共同应用的场景，此时，可以借由父类引用，根据实际需要，转型为特定的子类对象实现多态</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Person</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是人就要吃饭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Chinese</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;中国人爱吃饺子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// French</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">French</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;法国人爱喝香槟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Russian</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Russian</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;俄国人爱吃列巴&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">French</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		test<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Russian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="向下转型" tabindex="-1"><a class="header-anchor" href="#向下转型" aria-hidden="true">#</a> 向下转型</h5><ul><li>在某些资料中也被叫做 强制类型转换</li><li>必须转换为原始类型，不允许转换成非原始类型</li><li>将子类的引用指向父类对象，此处必须进行强制类型转换</li><li>可以调用子类独有的方法</li><li>使用场景：一般用来重新获得因为向上转型而丢失的子类特性而存在，因此通常向下转型前需要先进行向上转型，向下转型通常也会结合 <code>instanceof</code> 一起应用，在灵活运用多态的基础上，同时兼顾子类的独有性，相较于直接创建子类实例，提高了代码的灵活性</li></ul><h5 id="绑定机制" tabindex="-1"><a class="header-anchor" href="#绑定机制" aria-hidden="true">#</a> 绑定机制</h5><ul><li>将一个方法调用同一个方法所在的类连接到一起，Java 中存在静态绑定和动态绑定。</li><li>静态绑定：指在程序运行之前进行绑定（由编译器和链接程序完成的）,也叫前期绑定</li><li>动态绑定：指在程序运行期间由 JVM 根据对象的类型自动的判断应该调用哪个方法，也叫后期绑定</li></ul><h5 id="instanceof-操作符" tabindex="-1"><a class="header-anchor" href="#instanceof-操作符" aria-hidden="true">#</a> instanceof 操作符</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>one <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14);function o(l,i){return s(),a("div",null,[t(" more "),c])}const k=n(e,[["render",o],["__file","11.多态.html.vue"]]);export{k as default};
