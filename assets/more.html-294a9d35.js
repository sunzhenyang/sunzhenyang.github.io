const n=JSON.parse(`{"key":"v-6aca431a","path":"/technology/ts_axios/chapter11/more.html","title":"剩余模块单元测试","lang":"zh-CN","frontmatter":{"title":"剩余模块单元测试","icon":"article","category":"typescript","article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"defaults 模块单元测试 defaults 模块为请求配置提供了一些默认的属性和方法，我们需要为其编写单元测试。 test/defaults.spec.ts： import axios, { AxiosTransformer } from '../src/index' import { getAjaxRequest } from './helper' import { deepMerge } from '../src/helpers/util' describe('defaults', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should transform request json', () =&gt; { expect((axios.defaults.transformRequest as AxiosTransformer[])[0]({ foo: 'bar' })).toBe('{\\"foo\\":\\"bar\\"}') }) test('should do nothing to request string', () =&gt; { expect((axios.defaults.transformRequest as AxiosTransformer[])[0]('foo=bar')).toBe('foo=bar') }) test('should transform response json', () =&gt; { const data = (axios.defaults.transformResponse as AxiosTransformer[])[0]('{\\"foo\\":\\"bar\\"}') expect(typeof data).toBe('object') expect(data.foo).toBe('bar') }) test('should do nothing to response string', () =&gt; { expect((axios.defaults.transformResponse as AxiosTransformer[])[0]('foo=bar')).toBe('foo=bar') }) test('should use global defaults config', () =&gt; { axios('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) test('should use modified defaults config', () =&gt; { axios.defaults.baseURL = 'http://example.com/' axios('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://example.com/foo') delete axios.defaults.baseURL }) }) test('should use request config', () =&gt; { axios('/foo', { baseURL: 'http://www.example.com' }) return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://www.example.com/foo') }) }) test('should use default config for custom instance', () =&gt; { const instance = axios.create({ xsrfCookieName: 'CUSTOM-XSRF-TOKEN', xsrfHeaderName: 'X-CUSTOM-XSRF-TOKEN' }) document.cookie = instance.defaults.xsrfCookieName + '=foobarbaz' instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders[instance.defaults.xsrfHeaderName!]).toBe('foobarbaz') document.cookie = instance.defaults.xsrfCookieName + '=;expires=' + new Date(Date.now() - 86400000).toUTCString() }) }) test('should use GET headers', () =&gt; { axios.defaults.headers.get['X-CUSTOM-HEADER'] = 'foo' axios.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo') delete axios.defaults.headers.get['X-CUSTOM-HEADER'] }) }) test('should use POST headers', () =&gt; { axios.defaults.headers.post['X-CUSTOM-HEADER'] = 'foo' axios.post('/foo', {}) return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo') delete axios.defaults.headers.post['X-CUSTOM-HEADER'] }) }) test('should use header config', () =&gt; { const instance = axios.create({ headers: { common: { 'X-COMMON-HEADER': 'commonHeaderValue' }, get: { 'X-GET-HEADER': 'getHeaderValue' }, post: { 'X-POST-HEADER': 'postHeaderValue' } } }) instance.get('/foo', { headers: { 'X-FOO-HEADER': 'fooHeaderValue', 'X-BAR-HEADER': 'barHeaderValue' } }) return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders).toEqual( deepMerge(axios.defaults.headers.common, axios.defaults.headers.get, { 'X-COMMON-HEADER': 'commonHeaderValue', 'X-GET-HEADER': 'getHeaderValue', 'X-FOO-HEADER': 'fooHeaderValue', 'X-BAR-HEADER': 'barHeaderValue' }) ) }) }) test('should be used by custom instance if set before instance created', () =&gt; { axios.defaults.baseURL = 'http://example.org/' const instance = axios.create() instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://example.org/foo') delete axios.defaults.baseURL }) }) test('should not be used by custom instance if set after instance created', () =&gt; { const instance = axios.create() axios.defaults.baseURL = 'http://example.org/' instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) })","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter11/more.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"剩余模块单元测试"}],["meta",{"property":"og:description","content":"defaults 模块单元测试 defaults 模块为请求配置提供了一些默认的属性和方法，我们需要为其编写单元测试。 test/defaults.spec.ts： import axios, { AxiosTransformer } from '../src/index' import { getAjaxRequest } from './helper' import { deepMerge } from '../src/helpers/util' describe('defaults', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should transform request json', () =&gt; { expect((axios.defaults.transformRequest as AxiosTransformer[])[0]({ foo: 'bar' })).toBe('{\\"foo\\":\\"bar\\"}') }) test('should do nothing to request string', () =&gt; { expect((axios.defaults.transformRequest as AxiosTransformer[])[0]('foo=bar')).toBe('foo=bar') }) test('should transform response json', () =&gt; { const data = (axios.defaults.transformResponse as AxiosTransformer[])[0]('{\\"foo\\":\\"bar\\"}') expect(typeof data).toBe('object') expect(data.foo).toBe('bar') }) test('should do nothing to response string', () =&gt; { expect((axios.defaults.transformResponse as AxiosTransformer[])[0]('foo=bar')).toBe('foo=bar') }) test('should use global defaults config', () =&gt; { axios('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) test('should use modified defaults config', () =&gt; { axios.defaults.baseURL = 'http://example.com/' axios('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://example.com/foo') delete axios.defaults.baseURL }) }) test('should use request config', () =&gt; { axios('/foo', { baseURL: 'http://www.example.com' }) return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://www.example.com/foo') }) }) test('should use default config for custom instance', () =&gt; { const instance = axios.create({ xsrfCookieName: 'CUSTOM-XSRF-TOKEN', xsrfHeaderName: 'X-CUSTOM-XSRF-TOKEN' }) document.cookie = instance.defaults.xsrfCookieName + '=foobarbaz' instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders[instance.defaults.xsrfHeaderName!]).toBe('foobarbaz') document.cookie = instance.defaults.xsrfCookieName + '=;expires=' + new Date(Date.now() - 86400000).toUTCString() }) }) test('should use GET headers', () =&gt; { axios.defaults.headers.get['X-CUSTOM-HEADER'] = 'foo' axios.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo') delete axios.defaults.headers.get['X-CUSTOM-HEADER'] }) }) test('should use POST headers', () =&gt; { axios.defaults.headers.post['X-CUSTOM-HEADER'] = 'foo' axios.post('/foo', {}) return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo') delete axios.defaults.headers.post['X-CUSTOM-HEADER'] }) }) test('should use header config', () =&gt; { const instance = axios.create({ headers: { common: { 'X-COMMON-HEADER': 'commonHeaderValue' }, get: { 'X-GET-HEADER': 'getHeaderValue' }, post: { 'X-POST-HEADER': 'postHeaderValue' } } }) instance.get('/foo', { headers: { 'X-FOO-HEADER': 'fooHeaderValue', 'X-BAR-HEADER': 'barHeaderValue' } }) return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders).toEqual( deepMerge(axios.defaults.headers.common, axios.defaults.headers.get, { 'X-COMMON-HEADER': 'commonHeaderValue', 'X-GET-HEADER': 'getHeaderValue', 'X-FOO-HEADER': 'fooHeaderValue', 'X-BAR-HEADER': 'barHeaderValue' }) ) }) }) test('should be used by custom instance if set before instance created', () =&gt; { axios.defaults.baseURL = 'http://example.org/' const instance = axios.create() instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://example.org/foo') delete axios.defaults.baseURL }) }) test('should not be used by custom instance if set after instance created', () =&gt; { const instance = axios.create() axios.defaults.baseURL = 'http://example.org/' instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) })"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"剩余模块单元测试\\",\\"description\\":\\"defaults 模块单元测试 defaults 模块为请求配置提供了一些默认的属性和方法，我们需要为其编写单元测试。 test/defaults.spec.ts： import axios, { AxiosTransformer } from '../src/index' import { getAjaxRequest } from './helper' import { deepMerge } from '../src/helpers/util' describe('defaults', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should transform request json', () =&gt; { expect((axios.defaults.transformRequest as AxiosTransformer[])[0]({ foo: 'bar' })).toBe('{\\\\\\"foo\\\\\\":\\\\\\"bar\\\\\\"}') }) test('should do nothing to request string', () =&gt; { expect((axios.defaults.transformRequest as AxiosTransformer[])[0]('foo=bar')).toBe('foo=bar') }) test('should transform response json', () =&gt; { const data = (axios.defaults.transformResponse as AxiosTransformer[])[0]('{\\\\\\"foo\\\\\\":\\\\\\"bar\\\\\\"}') expect(typeof data).toBe('object') expect(data.foo).toBe('bar') }) test('should do nothing to response string', () =&gt; { expect((axios.defaults.transformResponse as AxiosTransformer[])[0]('foo=bar')).toBe('foo=bar') }) test('should use global defaults config', () =&gt; { axios('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) test('should use modified defaults config', () =&gt; { axios.defaults.baseURL = 'http://example.com/' axios('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://example.com/foo') delete axios.defaults.baseURL }) }) test('should use request config', () =&gt; { axios('/foo', { baseURL: 'http://www.example.com' }) return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://www.example.com/foo') }) }) test('should use default config for custom instance', () =&gt; { const instance = axios.create({ xsrfCookieName: 'CUSTOM-XSRF-TOKEN', xsrfHeaderName: 'X-CUSTOM-XSRF-TOKEN' }) document.cookie = instance.defaults.xsrfCookieName + '=foobarbaz' instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders[instance.defaults.xsrfHeaderName!]).toBe('foobarbaz') document.cookie = instance.defaults.xsrfCookieName + '=;expires=' + new Date(Date.now() - 86400000).toUTCString() }) }) test('should use GET headers', () =&gt; { axios.defaults.headers.get['X-CUSTOM-HEADER'] = 'foo' axios.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo') delete axios.defaults.headers.get['X-CUSTOM-HEADER'] }) }) test('should use POST headers', () =&gt; { axios.defaults.headers.post['X-CUSTOM-HEADER'] = 'foo' axios.post('/foo', {}) return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders['X-CUSTOM-HEADER']).toBe('foo') delete axios.defaults.headers.post['X-CUSTOM-HEADER'] }) }) test('should use header config', () =&gt; { const instance = axios.create({ headers: { common: { 'X-COMMON-HEADER': 'commonHeaderValue' }, get: { 'X-GET-HEADER': 'getHeaderValue' }, post: { 'X-POST-HEADER': 'postHeaderValue' } } }) instance.get('/foo', { headers: { 'X-FOO-HEADER': 'fooHeaderValue', 'X-BAR-HEADER': 'barHeaderValue' } }) return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders).toEqual( deepMerge(axios.defaults.headers.common, axios.defaults.headers.get, { 'X-COMMON-HEADER': 'commonHeaderValue', 'X-GET-HEADER': 'getHeaderValue', 'X-FOO-HEADER': 'fooHeaderValue', 'X-BAR-HEADER': 'barHeaderValue' }) ) }) }) test('should be used by custom instance if set before instance created', () =&gt; { axios.defaults.baseURL = 'http://example.org/' const instance = axios.create() instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('http://example.org/foo') delete axios.defaults.baseURL }) }) test('should not be used by custom instance if set after instance created', () =&gt; { const instance = axios.create() axios.defaults.baseURL = 'http://example.org/' instance.get('/foo') return getAjaxRequest().then(request =&gt; { expect(request.url).toBe('/foo') }) }) })\\"}"]]},"headers":[{"level":2,"title":"defaults 模块单元测试","slug":"defaults-模块单元测试","link":"#defaults-模块单元测试","children":[]},{"level":2,"title":"transform 模块单元测试","slug":"transform-模块单元测试","link":"#transform-模块单元测试","children":[]},{"level":2,"title":"xsrf 模块单元测试","slug":"xsrf-模块单元测试","link":"#xsrf-模块单元测试","children":[]},{"level":2,"title":"上传下载模块单元测试","slug":"上传下载模块单元测试","link":"#上传下载模块单元测试","children":[]},{"level":2,"title":"HTTP 授权模块单元测试","slug":"http-授权模块单元测试","link":"#http-授权模块单元测试","children":[]},{"level":2,"title":"静态方法模块单元测试","slug":"静态方法模块单元测试","link":"#静态方法模块单元测试","children":[]},{"level":2,"title":"补充未覆盖的代码测试","slug":"补充未覆盖的代码测试","link":"#补充未覆盖的代码测试","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":6.05,"words":1814},"filePathRelative":"technology/ts_axios/chapter11/more.md","localizedDate":"2023年1月11日","excerpt":"<h2> defaults 模块单元测试</h2>\\n<p><code>defaults</code> 模块为请求配置提供了一些默认的属性和方法，我们需要为其编写单元测试。</p>\\n<p><code>test/defaults.spec.ts</code>：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> axios<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> AxiosTransformer <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'../src/index'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> getAjaxRequest <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./helper'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> deepMerge <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'../src/helpers/util'</span>\\n\\n<span class=\\"token function\\">describe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'defaults'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">beforeEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">install</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">afterEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">uninstall</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should transform request json'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>transformRequest <span class=\\"token keyword\\">as</span> AxiosTransformer<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> foo<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'bar'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'{\\"foo\\":\\"bar\\"}'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should do nothing to request string'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>transformRequest <span class=\\"token keyword\\">as</span> AxiosTransformer<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo=bar'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo=bar'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should transform response json'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>transformResponse <span class=\\"token keyword\\">as</span> AxiosTransformer<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'{\\"foo\\":\\"bar\\"}'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'object'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">.</span>foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'bar'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should do nothing to response string'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>transformResponse <span class=\\"token keyword\\">as</span> AxiosTransformer<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo=bar'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo=bar'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use global defaults config'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">axios</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use modified defaults config'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>baseURL <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'http://example.com/'</span>\\n\\n    <span class=\\"token function\\">axios</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'http://example.com/foo'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">delete</span> axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>baseURL\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use request config'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">axios</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n      baseURL<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'http://www.example.com'</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'http://www.example.com/foo'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use default config for custom instance'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      xsrfCookieName<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'CUSTOM-XSRF-TOKEN'</span><span class=\\"token punctuation\\">,</span>\\n      xsrfHeaderName<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'X-CUSTOM-XSRF-TOKEN'</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    document<span class=\\"token punctuation\\">.</span>cookie <span class=\\"token operator\\">=</span> instance<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>xsrfCookieName <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'=foobarbaz'</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">[</span>instance<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>xsrfHeaderName<span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foobarbaz'</span><span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span>cookie <span class=\\"token operator\\">=</span>\\n        instance<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>xsrfCookieName <span class=\\"token operator\\">+</span>\\n        <span class=\\"token string\\">'=;expires='</span> <span class=\\"token operator\\">+</span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span>Date<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">now</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">86400000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toUTCString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use GET headers'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'X-CUSTOM-HEADER'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'foo'</span>\\n    axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'X-CUSTOM-HEADER'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">delete</span> axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'X-CUSTOM-HEADER'</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use POST headers'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>post<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'X-CUSTOM-HEADER'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'foo'</span>\\n    axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">post</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'X-CUSTOM-HEADER'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">delete</span> axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>post<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'X-CUSTOM-HEADER'</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should use header config'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      headers<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        common<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token string-property property\\">'X-COMMON-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'commonHeaderValue'</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        get<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token string-property property\\">'X-GET-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'getHeaderValue'</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        post<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token string-property property\\">'X-POST-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'postHeaderValue'</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n      headers<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token string-property property\\">'X-FOO-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'fooHeaderValue'</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token string-property property\\">'X-BAR-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'barHeaderValue'</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token function\\">deepMerge</span><span class=\\"token punctuation\\">(</span>axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>common<span class=\\"token punctuation\\">,</span> axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token string-property property\\">'X-COMMON-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'commonHeaderValue'</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token string-property property\\">'X-GET-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'getHeaderValue'</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token string-property property\\">'X-FOO-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'fooHeaderValue'</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token string-property property\\">'X-BAR-HEADER'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'barHeaderValue'</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should be used by custom instance if set before instance created'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>baseURL <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'http://example.org/'</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'http://example.org/foo'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token keyword\\">delete</span> axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>baseURL\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should not be used by custom instance if set after instance created'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>baseURL <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'http://example.org/'</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
