import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,a as s,f as t}from"./app-DdwQwFQ1.js";const o={},c=t(`<h2 id="网页生命周期" tabindex="-1"><a class="header-anchor" href="#网页生命周期"><span>网页生命周期</span></a></h2><h3 id="domcontentloaded" tabindex="-1"><a class="header-anchor" href="#domcontentloaded"><span>DOMContentLoaded</span></a></h3><blockquote><p>浏览器已完全加载 HTML，并构建了 DOM 树，但像 <code>&lt;img&gt;</code> 和样式表之类的外部资源可能尚未加载完成</p></blockquote><ul><li><p>DOM 已经就绪，因此处理程序可以查找 DOM 节点，并初始化接口</p></li><li><p><code>&lt;script&gt;...&lt;script&gt;</code> 或 <code>&lt;script src=&quot;...&quot;&gt;&lt;script&gt;</code> 之类的脚本会阻塞 <code>DOMContentLoaded</code>，浏览器将等待它们执行结束</p></li><li><p>不会阻塞 <code>DOMContentLoaded</code> 的脚本</p><ul><li>具有 <code>async</code> 特性（attribute）的脚本不会阻塞 <code>DOMContentLoaded</code></li><li>使用 <code>document.createElement(&#39;script&#39;)</code> 动态生成并添加到网页的脚本也不会阻塞 <code>DOMContentLoade</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="load" tabindex="-1"><a class="header-anchor" href="#load"><span>load</span></a></h3><blockquote><p>浏览器不仅加载完成了 HTML，还加载完成了所有外部资源：图片，样式等</p></blockquote><ul><li>外部资源已加载完成，样式已被应用，图片大小也已知</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;loaded&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beforeunload" tabindex="-1"><a class="header-anchor" href="#beforeunload"><span>beforeunload</span></a></h3><blockquote><p>触发了离开页面的导航（navigation）或试图关闭窗口，<code>beforeunload</code> 处理程序将要求进行更多确认</p></blockquote><ul><li>可以检查用户是否保存了更改，并询问他是否真的要离开</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onbeforeunload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;beforeunload&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 起作用，与在 window.onbeforeunload 中 return 值的效果是一样的</span>
  event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token string">&quot;有未保存的值。确认要离开吗？&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unload" tabindex="-1"><a class="header-anchor" href="#unload"><span>unload</span></a></h3><blockquote><p>用户几乎已经离开</p></blockquote><ul><li>以启动一些操作，例如发送统计数据（可以使用 <code>navigator.sendBeacon</code> 来发送网络请求）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> analyticsData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/* 带有收集的数据的对象 */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unload&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  navigator<span class="token punctuation">.</span><span class="token function">sendBeacon</span><span class="token punctuation">(</span><span class="token string">&quot;/analytics&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>analyticsData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="加载状态" tabindex="-1"><a class="header-anchor" href="#加载状态"><span>加载状态</span></a></h2><h3 id="readystate" tabindex="-1"><a class="header-anchor" href="#readystate"><span>readyState</span></a></h3><blockquote><p><code>document.readyState</code>：当前加载状态信息，值情况如下：</p></blockquote><ul><li><code>loading</code>：文档正在被加载</li><li><code>interactive</code>：文档已被解析完成，与 <code>DOMContentLoaded</code> 几乎同时发生，但是在 <code>DOMContentLoaded</code> 之前发生</li><li><code>complete</code>：文档和资源均已加载完成，与 <code>window.onload</code> 几乎同时发生，但是在 <code>window.onload</code> 之前发生</li></ul><h3 id="readystatechange" tabindex="-1"><a class="header-anchor" href="#readystatechange"><span>readystatechange</span></a></h3><blockquote><p>在加载状态发生改变时触发</p></blockquote><ul><li>在 <code>DOMContentLoaded</code> 之前，<code>document.readyState</code> 会立即变成 <code>interactive</code>，所以在加载状态改变监听中打印不出 <code>loading</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;readystatechange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;readyState:&#39;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本"><span>脚本</span></a></h2><ul><li>当浏览器加载 HTML 时遇到 <code>&lt;script&gt;...&lt;/script&gt;</code> 标签，浏览器就不能继续构建 DOM。它必须立刻执行此脚本。对于外部脚本 <code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 也是一样的：浏览器必须等脚本下载完，并执行结束，之后才能继续处理剩余的页面 <ul><li>脚本不能访问到位于它们下面的 DOM 元素，因此，脚本无法给它们添加处理程序等</li><li>如果页面顶部有一个笨重的脚本，它会“阻塞页面”。在该脚本下载并执行结束前，用户都不能看到页面内容，可以把脚本放在页面底部。此时，它可以访问到它上面的元素，并且不会阻塞页面显示内容</li></ul></li></ul><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer"><span>defer</span></a></h3><blockquote><p>告诉浏览器不要等待脚本</p><p>浏览器将继续处理 HTML，构建 DOM</p><p>脚本会“在后台”下载，然后等 DOM 构建完成后，脚本才会执行、</p></blockquote><ul><li><p>仅适用于外部脚本，如果 <code>&lt;script&gt;</code> 脚本没有 <code>src</code> 属性，则会忽略 <code>defer</code> 属性</p></li><li><p>页面内容不受阻塞，会立即显示</p></li><li><p><code>DOMContentLoaded</code> 事件处理程序在具有 <code>defer</code> 特性的脚本下载且执行结束后才会被触发</p></li><li><p>具有 <code>defer</code> 特性的脚本保持其相对顺序，就像常规脚本一样</p><ul><li>多个 <code>defer</code> 脚本时，同时下载，但是按照相对顺序执行</li></ul></li></ul><h3 id="async" tabindex="-1"><a class="header-anchor" href="#async"><span>async</span></a></h3><blockquote><p>与 <code>defer</code> 有些类似。它也能够让脚本不阻塞页面。但是，在行为上二者有着重要的区别</p><p><code>async</code> 特性意味着脚本是 <strong>完全独立</strong> 的</p></blockquote><ul><li><p>仅适用于外部脚本，如果 <code>&lt;script&gt;</code> 脚本没有 <code>src</code> 属性，则会忽略 <code>defer</code> 属性</p></li><li><p>浏览器不会因 <code>async</code> 脚本而阻塞（与 <code>defer</code> 类似）</p></li><li><p>其他脚本不会等待 <code>async</code> 脚本加载完成，同样，<code>async</code> 脚本也不会等待其他脚本</p></li><li><p><code>DOMContentLoaded</code> 和异步脚本不会彼此等待</p></li></ul><h3 id="动态脚本" tabindex="-1"><a class="header-anchor" href="#动态脚本"><span>动态脚本</span></a></h3><blockquote><p>使用 JavaScript 动态地创建一个脚本，并将其附加到文档中</p></blockquote><ul><li>当脚本被附加到文档时，脚本就会立即开始加载</li><li>默认情况下，动态脚本的行为是 <strong>异步</strong> 的 <ul><li>不会等待任何东西，也没有什么东西会等它们</li><li>先加载完成的脚本先执行</li><li>如果显式地设置了 <code>script.async = false</code>，脚本将按照脚本在文档中的顺序执行，就像 <code>defer</code> 那样</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;test.js&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资源加载" tabindex="-1"><a class="header-anchor" href="#资源加载"><span>资源加载</span></a></h2><blockquote><p>浏览器允许我们跟踪外部资源的加载，如脚本、iframe、图片等，基本上适用于具有外部 <code>src</code> 的任何资源</p></blockquote><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h3><ul><li><code>onload</code>：资源加载成功</li><li><code>onerror</code>：资源加载出现错误 <ul><li>无法获取更多 HTTP error 的详细信息，不知道 error 原因，只知道是加载失败了</li><li>在脚本处理和执行期间可能发生的 error 超出了这些事件跟踪的范围 <ul><li>也就是说：如果脚本成功加载，则即使脚本中有编程 <code>error</code>，也会触发 <code>onload</code> 事件</li><li>如果要跟踪脚本 <code>error</code>，可以使用 <code>window.onerror</code> 全局处理程序</li></ul></li></ul></li></ul><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><ul><li><p>大多数资源在被添加到文档中后便开始加载，但是 <code>&lt;img&gt;</code> 要等到获得 <code>src</code> 后才开始加载</p></li><li><p><code>&lt;iframe&gt;</code> 加载完成时会触发 <code>iframe.onload</code> 事件，无论是成功加载还是出现错误</p></li></ul>`,43);function l(p,i){return a(),e("div",null,[s(" more "),c])}const r=n(o,[["render",l],["__file","10.文档、资源加载.html.vue"]]),k=JSON.parse(`{"path":"/notes/javascript/web-api/event/10.%E6%96%87%E6%A1%A3%E3%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD.html","title":"文档、资源加载","lang":"zh-CN","frontmatter":{"title":"文档、资源加载","icon":"article","article":false,"sticky":20,"breadcrumb":false,"head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/javascript/web-api/event/10.%E6%96%87%E6%A1%A3%E3%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"文档、资源加载"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"文档、资源加载\\"}"]]},"headers":[{"level":2,"title":"网页生命周期","slug":"网页生命周期","link":"#网页生命周期","children":[{"level":3,"title":"DOMContentLoaded","slug":"domcontentloaded","link":"#domcontentloaded","children":[]},{"level":3,"title":"load","slug":"load","link":"#load","children":[]},{"level":3,"title":"beforeunload","slug":"beforeunload","link":"#beforeunload","children":[]},{"level":3,"title":"unload","slug":"unload","link":"#unload","children":[]}]},{"level":2,"title":"加载状态","slug":"加载状态","link":"#加载状态","children":[{"level":3,"title":"readyState","slug":"readystate","link":"#readystate","children":[]},{"level":3,"title":"readystatechange","slug":"readystatechange","link":"#readystatechange","children":[]}]},{"level":2,"title":"脚本","slug":"脚本","link":"#脚本","children":[{"level":3,"title":"defer","slug":"defer","link":"#defer","children":[]},{"level":3,"title":"async","slug":"async","link":"#async","children":[]},{"level":3,"title":"动态脚本","slug":"动态脚本","link":"#动态脚本","children":[]}]},{"level":2,"title":"资源加载","slug":"资源加载","link":"#资源加载","children":[{"level":3,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":4.47,"words":1340},"filePathRelative":"notes/javascript/web-api/event/10.文档、资源加载.md","localizedDate":"2023年1月11日","excerpt":""}`);export{r as comp,k as data};
