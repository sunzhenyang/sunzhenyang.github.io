const e=JSON.parse(`{"key":"v-6747d345","path":"/technology/ts_axios/chapter11/helpers.html","title":"辅助模块单元测试","lang":"zh-CN","frontmatter":{"title":"辅助模块单元测试","icon":"article","category":["typescript"],"article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"准备工作 通常我们会优先为一个库的辅助方法编写测试，我们会优先为 ts-axios 库的 helpers 目录下的模块编写测试。我们在 test 目录下创建一个 helpers 目录，创建一个 boot.ts 空文件，这个是因为我们上节课给 Jest 配置了 setupFilesAfterEnv 指向了这个文件，后面的章节我们会编写这个文件。 然后我们可以在控制台运行 npm test，它实际上是执行了 jest --coverage 来跑单元测试，我们会发现它会报错，没有匹配的测试文件，那是因为我们还没有在 test 目录下编写任何一个 .spec.ts 结尾的测试文件。接下来我们就来为这些辅助模块编写相应的测试。","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter11/helpers.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"辅助模块单元测试"}],["meta",{"property":"og:description","content":"准备工作 通常我们会优先为一个库的辅助方法编写测试，我们会优先为 ts-axios 库的 helpers 目录下的模块编写测试。我们在 test 目录下创建一个 helpers 目录，创建一个 boot.ts 空文件，这个是因为我们上节课给 Jest 配置了 setupFilesAfterEnv 指向了这个文件，后面的章节我们会编写这个文件。 然后我们可以在控制台运行 npm test，它实际上是执行了 jest --coverage 来跑单元测试，我们会发现它会报错，没有匹配的测试文件，那是因为我们还没有在 test 目录下编写任何一个 .spec.ts 结尾的测试文件。接下来我们就来为这些辅助模块编写相应的测试。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"辅助模块单元测试\\",\\"description\\":\\"准备工作 通常我们会优先为一个库的辅助方法编写测试，我们会优先为 ts-axios 库的 helpers 目录下的模块编写测试。我们在 test 目录下创建一个 helpers 目录，创建一个 boot.ts 空文件，这个是因为我们上节课给 Jest 配置了 setupFilesAfterEnv 指向了这个文件，后面的章节我们会编写这个文件。 然后我们可以在控制台运行 npm test，它实际上是执行了 jest --coverage 来跑单元测试，我们会发现它会报错，没有匹配的测试文件，那是因为我们还没有在 test 目录下编写任何一个 .spec.ts 结尾的测试文件。接下来我们就来为这些辅助模块编写相应的测试。\\"}"]]},"headers":[{"level":2,"title":"准备工作","slug":"准备工作","link":"#准备工作","children":[]},{"level":2,"title":"util 模块测试","slug":"util-模块测试","link":"#util-模块测试","children":[]},{"level":2,"title":"cookie 模块测试","slug":"cookie-模块测试","link":"#cookie-模块测试","children":[]},{"level":2,"title":"data 模块测试","slug":"data-模块测试","link":"#data-模块测试","children":[]},{"level":2,"title":"error 模块测试","slug":"error-模块测试","link":"#error-模块测试","children":[]},{"level":2,"title":"headers 模块测试","slug":"headers-模块测试","link":"#headers-模块测试","children":[]},{"level":2,"title":"url 模块测试","slug":"url-模块测试","link":"#url-模块测试","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":7.46,"words":2237},"filePathRelative":"technology/ts_axios/chapter11/helpers.md","localizedDate":"2023年1月11日","excerpt":"<h2> 准备工作</h2>\\n<p>通常我们会优先为一个库的辅助方法编写测试，我们会优先为 <code>ts-axios</code> 库的 <code>helpers</code> 目录下的模块编写测试。我们在 <code>test</code> 目录下创建一个 <code>helpers</code> 目录，创建一个 <code>boot.ts</code> 空文件，这个是因为我们上节课给 Jest 配置了 <code>setupFilesAfterEnv</code> 指向了这个文件，后面的章节我们会编写这个文件。</p>\\n<p>然后我们可以在控制台运行 <code>npm test</code>，它实际上是执行了 <code>jest --coverage</code> 来跑单元测试，我们会发现它会报错，没有匹配的测试文件，那是因为我们还没有在 <code>test</code> 目录下编写任何一个 .spec.ts 结尾的测试文件。接下来我们就来为这些辅助模块编写相应的测试。</p>","autoDesc":true}`);export{e as data};
