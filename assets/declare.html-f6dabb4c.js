const e=JSON.parse(`{"key":"v-071afc2c","path":"/technology/ts_axios/chapter2/declare.html","title":"变量声明","lang":"zh-CN","frontmatter":{"title":"变量声明","icon":"article","category":["typescript"],"article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"let 和 const 是 JavaScript 里相对较新的变量声明方式。let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。const 是对 let 的一个增强，它能阻止对一个变量再次赋值。 因为 TypeScript 是 JavaScript 的超集，所以它本身就支持 let 和 const。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 var。","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter2/declare.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"变量声明"}],["meta",{"property":"og:description","content":"let 和 const 是 JavaScript 里相对较新的变量声明方式。let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。const 是对 let 的一个增强，它能阻止对一个变量再次赋值。 因为 TypeScript 是 JavaScript 的超集，所以它本身就支持 let 和 const。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 var。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"变量声明\\",\\"description\\":\\"let 和 const 是 JavaScript 里相对较新的变量声明方式。let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。const 是对 let 的一个增强，它能阻止对一个变量再次赋值。 因为 TypeScript 是 JavaScript 的超集，所以它本身就支持 let 和 const。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 var。\\"}"]]},"headers":[{"level":2,"title":"var 声明","slug":"var-声明","link":"#var-声明","children":[{"level":3,"title":"作用域规则","slug":"作用域规则","link":"#作用域规则","children":[]},{"level":3,"title":"捕获变量怪异之处","slug":"捕获变量怪异之处","link":"#捕获变量怪异之处","children":[]}]},{"level":2,"title":"let 声明","slug":"let-声明","link":"#let-声明","children":[{"level":3,"title":"块作用域","slug":"块作用域","link":"#块作用域","children":[]},{"level":3,"title":"重定义及屏蔽","slug":"重定义及屏蔽","link":"#重定义及屏蔽","children":[]},{"level":3,"title":"块级作用域变量的获取","slug":"块级作用域变量的获取","link":"#块级作用域变量的获取","children":[]}]},{"level":2,"title":"const 声明","slug":"const-声明","link":"#const-声明","children":[]},{"level":2,"title":"let vs. const","slug":"let-vs-const","link":"#let-vs-const","children":[]},{"level":2,"title":"解构","slug":"解构","link":"#解构","children":[{"level":3,"title":"解构数组","slug":"解构数组","link":"#解构数组","children":[]},{"level":3,"title":"对象解构","slug":"对象解构","link":"#对象解构","children":[]},{"level":3,"title":"属性重命名","slug":"属性重命名","link":"#属性重命名","children":[]},{"level":3,"title":"默认值","slug":"默认值","link":"#默认值","children":[]},{"level":3,"title":"函数声明","slug":"函数声明","link":"#函数声明","children":[]}]},{"level":2,"title":"展开","slug":"展开","link":"#展开","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":11.74,"words":3522},"filePathRelative":"technology/ts_axios/chapter2/declare.md","localizedDate":"2023年1月11日","excerpt":"<p><code>let</code> 和 <code>const</code> 是 JavaScript 里相对较新的变量声明方式。<code>let</code> 在很多方面与 <code>var</code> 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。<code>const</code> 是对 <code>let</code> 的一个增强，它能阻止对一个变量再次赋值。</p>\\n<p>因为 TypeScript 是 JavaScript 的超集，所以它本身就支持 <code>let</code> 和 <code>const</code>。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 <code>var</code>。</p>","autoDesc":true}`);export{e as data};
