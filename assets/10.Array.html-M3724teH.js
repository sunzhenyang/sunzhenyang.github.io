import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as s,a as p,b as e,d as l,e as a,f as t}from"./app-DdwQwFQ1.js";const c={},u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},d=e("br",null,null,-1),h=e("h2",{id:"array-length",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#array-length"},[e("span",null,"Array.length")])],-1),y=e("blockquote",null,[e("p",null,"返回或设置一个数组中的元素个数")],-1),_=e("br",null,null,-1),f={id:"array-from",tabindex:"-1"},b={class:"header-anchor",href:"#array-from"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"},m=t("<ul><li>描述：从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例 <ul><li>伪数组对象（拥有一个 length 属性和若干索引属性的任意对象）</li><li>可迭代对象（可以获取对象中的元素,如 Map和 Set 等）</li></ul></li><li>语法：<code>Array.from(arrayLike[, mapFn[, thisArg]])</code></li><li>参数 <ul><li>arrayLike：想要转换成数组的伪数组对象或可迭代对象</li><li>mapFn（可选）：如果指定了该参数，新数组中的每个元素会执行该回调函数</li><li>thisArg（可选）：执行回调函数 mapFn 时 this 对象</li></ul></li><li>返回值：一个新的数组实例</li></ul><br>",2),v={id:"array-isarray",tabindex:"-1"},g={class:"header-anchor",href:"#array-isarray"},A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},x=e("ul",null,[e("li",null,"描述：于确定传递的值是否是一个 Array"),e("li",null,[l("语法："),e("code",null,"Array.isArray(obj)")]),e("li",null,[l("参数 "),e("ul",null,[e("li",null,"obj：需要检测的值")])]),e("li",null,"返回值：如果值是 Array，则为 true，否则为 false")],-1),z=e("br",null,null,-1),j={id:"array-of",tabindex:"-1"},N={class:"header-anchor",href:"#array-of"},C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of",target:"_blank",rel:"noopener noreferrer"},O=t(`<ul><li>描述：创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</li><li>语法：<code>Array.of(element0[, element1[, ...[, elementN]]])</code></li><li>参数 <ul><li>elementN：任意个参数，将按顺序成为返回数组中的元素</li></ul></li><li>返回值：新的 Array 实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 旧版本兼容</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>of<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Array<span class="token punctuation">.</span><span class="token function-variable function">of</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),W={id:"array-prototype-concat",tabindex:"-1"},S={class:"header-anchor",href:"#array-prototype-concat"},R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",target:"_blank",rel:"noopener noreferrer"},J=t("<ul><li>描述：用于合并两个或多个数组，此方法不会更改现有数组</li><li>语法：<code>var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])</code></li><li>参数 <ul><li>valueN：数组和/或值，将被合并到一个新的数组中 <ul><li>如果省略了所有 valueN 参数，则 concat 会返回调用此方法的现存数组的一个<strong>浅拷贝</strong></li></ul></li></ul></li><li>返回值：新的 Array 实例</li></ul><br>",2),G={id:"array-prototype-copywithin",tabindex:"-1"},E={class:"header-anchor",href:"#array-prototype-copywithin"},I={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",target:"_blank",rel:"noopener noreferrer"},w=t("<ul><li>描述：<strong>浅拷贝</strong>数组的一部分到同一数组中的另一个位置（按顺序依次覆盖）</li><li>语法：<code>arr.copyWithin(target[, start[, end]])</code></li><li>参数 <ul><li>target：0 为基底的索引，复制序列到该位置 <ul><li>如果是负数，target 将从末尾开始计算</li><li>如果 target 大于等于 arr.length，将会不发生拷贝</li><li>如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。</li></ul></li><li>start：0 为基底的索引，开始复制元素的起始位置 <ul><li>如果是负数，start 将从末尾开始计算</li><li>如果 start 被忽略，copyWithin 将会从0开始复制</li></ul></li><li>end：0 为基底的索引，开始复制元素的结束位置 <ul><li>copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素</li><li>如果是负数， end 将从末尾开始计算</li><li>如果 end 被忽略，copyWithin 方法将会一直复制至数组结尾（默认为 arr.length）</li></ul></li></ul></li><li>返回值：改变后的数组</li></ul><br>",2),V={id:"array-prototype-every",tabindex:"-1"},F={class:"header-anchor",href:"#array-prototype-every"},T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every",target:"_blank",rel:"noopener noreferrer"},M=t("<ul><li>描述：测试一个数组内的所有元素是否都能通过某个指定函数的测试</li><li>语法：<code>arr.every(callback(element[, index[, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：用来测试每个元素的函数，它可以接收三个参数 <ul><li>element：用于测试的当前值</li><li>index：用于测试的当前值的索引</li><li>array：调用 every 的当前数组</li></ul></li><li>thisArg：执行 callback 时使用的 this 值</li></ul></li><li>返回值：如果回调函数的每一次返回都为 truthy 值，返回 true ，否则返回 false</li></ul><br>",2),q={id:"array-prototype-fill",tabindex:"-1"},B={class:"header-anchor",href:"#array-prototype-fill"},L={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",target:"_blank",rel:"noopener noreferrer"},P=e("ul",null,[e("li",null,"描述：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引"),e("li",null,[l("语法："),e("code",null,"arr.fill(value[, start[, end]])")]),e("li",null,[l("参数 "),e("ul",null,[e("li",null,"value：用来填充数组元素的值"),e("li",null,"start：起始索引，默认值为 0"),e("li",null,"end：终止索引，默认值为 this.length")])]),e("li",null,"返回值：修改后的数组**（改变原数组）**")],-1),Y=e("br",null,null,-1),Z={id:"array-prototype-filter",tabindex:"-1"},D={class:"header-anchor",href:"#array-prototype-filter"},U={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank",rel:"noopener noreferrer"},H=t("<ul><li>描述：创建一个新数组, 其包含通过所提供函数实现的测试的所有元素（<strong>浅拷贝</strong>）</li><li>语法：<code>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。它接受以下三个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：调用了 filter 的数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li>返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组</li></ul><br>",2),K={id:"array-prototype-find",tabindex:"-1"},Q={class:"header-anchor",href:"#array-prototype-find"},X={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find",target:"_blank",rel:"noopener noreferrer"},$=t("<ul><li>描述：返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined</li><li>语法：<code>arr.find(callback[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li></ul><br>",2),ee={id:"array-prototype-findindex",tabindex:"-1"},le={class:"header-anchor",href:"#array-prototype-findindex"},re={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",target:"_blank",rel:"noopener noreferrer"},ae=t("<ul><li>描述：返回数组中满足提供的测试函数的第一个元素的索引，若没有找到对应元素则返回 -1</li><li>语法：<code>arr.findIndex(callback[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li></ul><br>",2),te={id:"array-prototype-some",tabindex:"-1"},ne={class:"header-anchor",href:"#array-prototype-some"},oe={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some",target:"_blank",rel:"noopener noreferrer"},ie=t("<ul><li>描述：测试数组中是不是至少有1个元素通过了被提供的函数测试</li><li>语法：<code>arr.some(callback(element[, index[, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li>返回值：数组中有至少一个元素通过回调函数的测试就会返回 true，所有元素都没有通过回调函数的测试返回值才会为false</li></ul><br>",2),se={id:"array-prototype-flat",tabindex:"-1"},pe={class:"header-anchor",href:"#array-prototype-flat"},ce={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat",target:"_blank",rel:"noopener noreferrer"},ue=e("ul",null,[e("li",null,"描述：按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回"),e("li",null,[l("语法："),e("code",null,"var newArray = arr.flat([depth])")]),e("li",null,[l("参数 "),e("ul",null,[e("li",null,"depth ：指定要提取嵌套数组的结构深度，默认值为 1")])]),e("li",null,"返回值：一个包含将数组与子数组中所有元素的新数组")],-1),de=e("br",null,null,-1),he={id:"array-prototype-flatmap",tabindex:"-1"},ye={class:"header-anchor",href:"#array-prototype-flatmap"},_e={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap",target:"_blank",rel:"noopener noreferrer"},fe=t(`<ul><li><p>描述：首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 连着深度值为1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些</p></li><li><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// return element for new_array</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数</p><ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>currentValue：当前正在数组中处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：被调用的 map 数组</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li><p>返回值： 一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 depth 值为 1</p></li></ul><br>`,2),be={id:"array-prototype-foreach",tabindex:"-1"},ke={class:"header-anchor",href:"#array-prototype-foreach"},me={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"},ve=t("<ul><li>描述：对数组的每个元素执行一次给定的函数</li><li>语法：<code>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</code></li><li>参数 <ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li>返回值：undefined</li><li>注意 <ul><li>不对未初始化的值进行任何操作 <code>[1,,2,,3]</code></li></ul></li></ul><br>",2),ge={id:"array-prototype-includes",tabindex:"-1"},Ae={class:"header-anchor",href:"#array-prototype-includes"},xe={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",target:"_blank",rel:"noopener noreferrer"},ze=t("<ul><li>描述：判断一个数组是否包含一个指定的值</li><li>语法：<code>arr.includes(valueToFind[, fromIndex])</code></li><li>参数 <ul><li>valueToFind：需要查找的元素值</li><li>fromIndex：从fromIndex 索引处开始查找 valueToFind <ul><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始搜，默认为 0。</li></ul></li></ul></li><li>返回值：如果包含则返回 true，否则返回false</li><li>注意 <ul><li>可以检测 NaN</li><li>严格检测 <code>===</code><br><br></li></ul></li></ul>",1),je={id:"array-prototype-indexof",tabindex:"-1"},Ne={class:"header-anchor",href:"#array-prototype-indexof"},Ce={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",target:"_blank",rel:"noopener noreferrer"},Oe=t("<ul><li>描述：返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1</li><li>语法：<code>arr.indexOf(searchElement[, fromIndex])</code></li><li>参数 <ul><li>searchElement：要查找的元素</li><li>fromIndex：开始查找的位置 <ul><li>如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回 -1</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索，默认为 0</li></ul></li></ul></li><li>注意 <ul><li>不可以检测 NaN</li><li>严格检测 <code>===</code><br><br></li></ul></li></ul>",1),We={id:"array-prototype-lastindexof",tabindex:"-1"},Se={class:"header-anchor",href:"#array-prototype-lastindexof"},Re={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",target:"_blank",rel:"noopener noreferrer"},Je=t("<ul><li>描述：返回指定元素在数组中最后一次出现的索引，如果不存在，则返回 -1</li><li>语法：<code>arr.lastIndexOf(searchElement[, fromIndex])</code></li><li>参数 <ul><li>searchElement：要查找的元素</li><li>fromIndex：从此位置开始逆向查找，默认为数组的长度减 1(arr.length - 1)，即整个数组都被查找 <ul><li>如果该索引值大于或等于数组长度，则整个数组会被查找</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始向左搜索</li></ul></li></ul></li></ul><br>",2),Ge={id:"array-prototype-join",tabindex:"-1"},Ee={class:"header-anchor",href:"#array-prototype-join"},Ie={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"},we=t("<ul><li>描述：方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串</li><li>语法：<code>arr.join([separator])</code></li><li>参数 <ul><li>separator ：指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。 <ul><li>如果缺省该值，数组元素用逗号（,）分隔</li><li>如果separator是空字符串(&quot;&quot;)，则所有元素之间都没有任何字符。</li></ul></li></ul></li><li>返回值：个所有数组元素连接的字符串。如果 arr.length 为 0，则返回空字符串</li></ul><br>",2),Ve={id:"array-prototype-entries",tabindex:"-1"},Fe={class:"header-anchor",href:"#array-prototype-entries"},Te={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"},Me=e("ul",null,[e("li",null,"描述：返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对"),e("li",null,[l("语法："),e("code",null,"arr.entries()")]),e("li",null,[l("返回值：一个新的 Array 迭代器对象。Array Iterator是对象，它的原型（"),e("code",null,"__proto__"),l(":Array Iterator）上有一个next方法，可用用于遍历迭代器取得原数组的[key,value]")])],-1),qe=e("br",null,null,-1),Be={id:"array-prototype-keys",tabindex:"-1"},Le={class:"header-anchor",href:"#array-prototype-keys"},Pe={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",target:"_blank",rel:"noopener noreferrer"},Ye=e("ul",null,[e("li",null,"描述：返回一个包含数组中每个索引键的 Array Iterator 对象"),e("li",null,[l("语法："),e("code",null,"arr.keys()")])],-1),Ze=e("br",null,null,-1),De={id:"array-prototype-values",tabindex:"-1"},Ue={class:"header-anchor",href:"#array-prototype-values"},He={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values",target:"_blank",rel:"noopener noreferrer"},Ke=e("ul",null,[e("li",null,"描述： 返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值"),e("li",null,[l("语法："),e("code",null,"arr.values()")])],-1),Qe=e("br",null,null,-1),Xe={id:"array-prototype-map",tabindex:"-1"},$e={class:"header-anchor",href:"#array-prototype-map"},el={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"},ll=t(`<ul><li><p>描述：创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回</p></li><li><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> new_array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// Return element for new_array </span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数</p><ul><li>callback：在数组每一项上执行的函数，接收 3 个参数 <ul><li>element：数组中当前正在处理的元素</li><li>index：正在处理的元素在数组中的索引</li><li>array：数组本身</li></ul></li><li>thisArg：执行 callback 时，用于 this 的值</li></ul></li><li><p>返回值：一个由原数组每个元素执行回调函数的结果组成的新数组</p></li></ul><br>`,2),rl={id:"array-prototype-reduce",tabindex:"-1"},al={class:"header-anchor",href:"#array-prototype-reduce"},tl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",target:"_blank",rel:"noopener noreferrer"},nl=t(`<ul><li><p>描述：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值</p></li><li><p>语法：<code>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</code></p></li><li><p>参数</p><ul><li>callback：执行数组中每个值 (如果没有提供 initialValue 则第一个值除外)的函数，包含四个参数 <ul><li>accumulator：累计器累计回调的返回值 <ul><li>它是上一次调用回调时返回的累积值，或initialValue</li></ul></li><li>currentValue：数组中正在处理的元素</li><li>index：数组中正在处理的当前元素的索引 <ul><li>如果提供了initialValue，则起始索引号为 0，否则从索引 1 起始</li></ul></li><li>array：调用 reduce() 的数组</li></ul></li><li>initialValue：作为第一次调用 callback 函数时的第一个参数的值 <ul><li>如果没有提供初始值，则将使用数组中的第一个元素，并跳过该元素</li><li>在没有初始值的空数组上调用 reduce 将报错</li></ul></li></ul></li><li><p>返回值：函数累计处理的结果</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),ol={id:"array-prototype-reduceright",tabindex:"-1"},il={class:"header-anchor",href:"#array-prototype-reduceright"},sl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",target:"_blank",rel:"noopener noreferrer"},pl=t("<ul><li><p>描述：接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p></li><li><p>语法：<code>arr.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue])</code></p></li><li><p>参数</p><ul><li>callback：执行数组中每个值，包含四个参数 <ul><li>accumulator：累计器累计回调的返回值 <ul><li>它是上一次调用回调时返回的累积值，或 initialValue</li></ul></li><li>currentValue：数组中正在处理的元素</li><li>index：数组中正在处理的当前元素的索引</li><li>array：调用 reduce() 的数组</li></ul></li><li>initialValue：作为第一次调用 callback 函数时的第一个参数的值 <ul><li>如果没有提供初始值，则将使用数组中的最后一个元素，并跳过该元素</li><li>在没有初始值的空数组上调用 reduce 将报错</li></ul></li></ul></li><li><p>返回值：函数累计处理的结果</p></li></ul><br>",2),cl={id:"array-prototype-unshift",tabindex:"-1"},ul={class:"header-anchor",href:"#array-prototype-unshift"},dl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",target:"_blank",rel:"noopener noreferrer"},hl=e("ul",null,[e("li",null,[e("p",null,"描述：将一个或多个元素添加到数组的开头，并返回该数组的新长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.unshift(element1, ..., elementN)")])]),e("li",null,[e("p",null,"参数"),e("ul",null,[e("li",null,"elementN：被添加到数组开头的元素")])]),e("li",null,[e("p",null,"返回值：当调用该方法时，新的 length 属性值将被返回")])],-1),yl=e("br",null,null,-1),_l={id:"array-prototype-shift",tabindex:"-1"},fl={class:"header-anchor",href:"#array-prototype-shift"},bl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",target:"_blank",rel:"noopener noreferrer"},kl=e("ul",null,[e("li",null,[e("p",null,"描述：从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.shift()")])]),e("li",null,[e("p",null,"返回值：从数组中删除的元素（ 当数组为空时返回 undefined ）")])],-1),ml=e("br",null,null,-1),vl={id:"array-prototype-push",tabindex:"-1"},gl={class:"header-anchor",href:"#array-prototype-push"},Al={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"},xl=e("ul",null,[e("li",null,[e("p",null,"描述：将一个或多个元素添加到数组的末尾，并返回该数组的新长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.push(element1, ..., elementN)")])]),e("li",null,[e("p",null,"参数"),e("ul",null,[e("li",null,"elementN：被添加到数组末尾的元素")])]),e("li",null,[e("p",null,"返回值：当调用该方法时，新的 length 属性值将被返回")])],-1),zl=e("br",null,null,-1),jl={id:"array-prototype-pop",tabindex:"-1"},Nl={class:"header-anchor",href:"#array-prototype-pop"},Cl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",target:"_blank",rel:"noopener noreferrer"},Ol=e("ul",null,[e("li",null,[e("p",null,"描述：从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度")]),e("li",null,[e("p",null,[l("语法："),e("code",null,"arr.pop()")])]),e("li",null,[e("p",null,"返回值：从数组中删除的元素（ 当数组为空时返回 undefined ）")])],-1),Wl=e("br",null,null,-1),Sl={id:"array-prototype-slice",tabindex:"-1"},Rl={class:"header-anchor",href:"#array-prototype-slice"},Jl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",target:"_blank",rel:"noopener noreferrer"},Gl=t("<ul><li><p>描述：返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end），原始数组不会被改变</p></li><li><p>语法：<code>arr.slice([begin[, end]])</code></p></li><li><p>参数</p><ul><li>begin：从该索引开始提取原数组元素 <ul><li>如果省略 begin，则 slice 从索引 0 开始</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始</li><li>如果 begin 大于原数组的长度，则会返回空数组</li></ul></li><li>end：在该索引处结束提取原数组元素 <ul><li>如果省略 end 或者 end 大于数组的长度，则 slice 会一直提取到原数组末尾</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引结束</li></ul></li></ul></li><li><p>返回值：一个含有被提取元素的新数组</p></li></ul><br>",2),El={id:"array-prototype-splice",tabindex:"-1"},Il={class:"header-anchor",href:"#array-prototype-splice"},wl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",target:"_blank",rel:"noopener noreferrer"},Vl=t("<ul><li><p>描述：通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组</p></li><li><p>语法：<code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code></p></li><li><p>参数</p><ul><li>start：指定修改的开始位置（从0计数） <ul><li>如果超出了数组的长度，则从数组末尾开始添加内容</li><li>如果为负值，则按升序从 array.length + fromIndex 的索引开始添加内容</li><li>负数的绝对值大于数组的长度，则表示开始位置为第 0 位</li></ul></li><li>deleteCount：整数，表示要移除的数组元素的个数 <ul><li>如果 deleteCount 被省略了 或者 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）</li><li>deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素（否则没有意义）</li></ul></li><li>item1, item2, ...：要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素</li></ul></li><li><p>返回值：由被删除的元素组成的一个数组</p><ul><li>如果只删除了一个元素，则返回只包含一个元素的数组</li><li>如果没有删除元素，则返回空数组</li></ul></li></ul><br>",2),Fl={id:"array-prototype-sort",tabindex:"-1"},Tl={class:"header-anchor",href:"#array-prototype-sort"},Ml={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",target:"_blank",rel:"noopener noreferrer"},ql=t("<ul><li><p>描述：元素按照转换为的字符串的各个字符的 Unicode 位点进行排序</p></li><li><p>语法：<code>arr.sort([compareFunction])</code></p></li><li><p>参数</p><ul><li>compareFunction：用来指定按某种顺序进行排列的函数 <ul><li>firstEl：第一个用于比较的元素</li><li>secondEl：第二个用于比较的元素</li><li>compareFunction(firstEl, secondEl) 小于 0 ，那么 firstEl 会被排列到 secondEl 之前</li><li>compareFunction(firstEl, secondEl) 大于 0 ， secondEl 会被排列到 firstEl 之前</li></ul></li></ul></li><li><p>返回值：排序后的数组。请注意，数组已原地排序，并且不进行复制</p></li></ul><br>",2),Bl={id:"array-prototype-reverse",tabindex:"-1"},Ll={class:"header-anchor",href:"#array-prototype-reverse"},Pl={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",target:"_blank",rel:"noopener noreferrer"},Yl=t("<ul><li><p>描述：将数组中元素的位置颠倒，并返回该数组，该方法会改变原数组</p></li><li><p>语法：<code>arr.reverse()</code></p></li><li><p>参数</p><ul><li>compareFunction：用来指定按某种顺序进行排列的函数 <ul><li>firstEl：第一个用于比较的元素</li><li>secondEl：第二个用于比较的元素</li><li>compareFunction(firstEl, secondEl) 小于 0 ，那么 firstEl 会被排列到 secondEl 之前</li><li>compareFunction(firstEl, secondEl) 大于 0 ， secondEl 会被排列到 firstEl 之前</li></ul></li></ul></li><li><p>返回值：颠倒后的数组</p></li></ul><br>",2),Zl={id:"array-prototype-tostring",tabindex:"-1"},Dl={class:"header-anchor",href:"#array-prototype-tostring"},Ul={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",target:"_blank",rel:"noopener noreferrer"},Hl=e("ul",null,[e("li",null,"描述： 返回一个字符串，表示指定的数组及其元素"),e("li",null,[l("语法："),e("code",null,"arr.toString()")]),e("li",null,"返回值：一个表示指定的数组及其元素的字符串")],-1);function Kl(Ql,Xl){const r=o("ExternalLinkIcon");return i(),s("div",null,[p(" more "),e("p",null,[e("a",u,[l("Array"),a(r)])]),d,h,y,_,e("h2",f,[e("a",b,[e("span",null,[e("a",k,[l("Array.from()"),a(r)])])])]),m,e("h2",v,[e("a",g,[e("span",null,[e("a",A,[l("Array.isArray()"),a(r)])])])]),x,z,e("h2",j,[e("a",N,[e("span",null,[e("a",C,[l("Array.of()"),a(r)])])])]),O,e("h2",W,[e("a",S,[e("span",null,[e("a",R,[l("Array.prototype.concat()"),a(r)])])])]),J,e("h2",G,[e("a",E,[e("span",null,[e("a",I,[l("Array.prototype.copyWithin()"),a(r)])])])]),w,e("h2",V,[e("a",F,[e("span",null,[e("a",T,[l("Array.prototype.every()"),a(r)])])])]),M,e("h2",q,[e("a",B,[e("span",null,[e("a",L,[l("Array.prototype.fill()"),a(r)])])])]),P,Y,e("h2",Z,[e("a",D,[e("span",null,[e("a",U,[l("Array.prototype.filter()"),a(r)])])])]),H,e("h2",K,[e("a",Q,[e("span",null,[e("a",X,[l("Array.prototype.find()"),a(r)])])])]),$,e("h2",ee,[e("a",le,[e("span",null,[e("a",re,[l("Array.prototype.findIndex()"),a(r)])])])]),ae,e("h2",te,[e("a",ne,[e("span",null,[e("a",oe,[l("Array.prototype.some()"),a(r)])])])]),ie,e("h2",se,[e("a",pe,[e("span",null,[e("a",ce,[l("Array.prototype.flat()"),a(r)])])])]),ue,de,e("h2",he,[e("a",ye,[e("span",null,[e("a",_e,[l("Array.prototype.flatMap()"),a(r)])])])]),fe,e("h2",be,[e("a",ke,[e("span",null,[e("a",me,[l("Array.prototype.forEach()"),a(r)])])])]),ve,e("h2",ge,[e("a",Ae,[e("span",null,[e("a",xe,[l("Array.prototype.includes()"),a(r)])])])]),ze,e("h2",je,[e("a",Ne,[e("span",null,[e("a",Ce,[l("Array.prototype.indexOf()"),a(r)])])])]),Oe,e("h2",We,[e("a",Se,[e("span",null,[e("a",Re,[l("Array.prototype.lastIndexOf()"),a(r)])])])]),Je,e("h2",Ge,[e("a",Ee,[e("span",null,[e("a",Ie,[l("Array.prototype.join()"),a(r)])])])]),we,e("h2",Ve,[e("a",Fe,[e("span",null,[e("a",Te,[l("Array.prototype.entries()"),a(r)])])])]),Me,qe,e("h2",Be,[e("a",Le,[e("span",null,[e("a",Pe,[l("Array.prototype.keys()"),a(r)])])])]),Ye,Ze,e("h2",De,[e("a",Ue,[e("span",null,[e("a",He,[l("Array.prototype.values()"),a(r)])])])]),Ke,Qe,e("h2",Xe,[e("a",$e,[e("span",null,[e("a",el,[l("Array.prototype.map()"),a(r)])])])]),ll,e("h2",rl,[e("a",al,[e("span",null,[e("a",tl,[l("Array.prototype.reduce()"),a(r)])])])]),nl,e("h2",ol,[e("a",il,[e("span",null,[e("a",sl,[l("Array.prototype.reduceRight()"),a(r)])])])]),pl,e("h2",cl,[e("a",ul,[e("span",null,[e("a",dl,[l("Array.prototype.unshift()"),a(r)])])])]),hl,yl,e("h2",_l,[e("a",fl,[e("span",null,[e("a",bl,[l("Array.prototype.shift()"),a(r)])])])]),kl,ml,e("h2",vl,[e("a",gl,[e("span",null,[e("a",Al,[l("Array.prototype.push()"),a(r)])])])]),xl,zl,e("h2",jl,[e("a",Nl,[e("span",null,[e("a",Cl,[l("Array.prototype.pop()"),a(r)])])])]),Ol,Wl,e("h2",Sl,[e("a",Rl,[e("span",null,[e("a",Jl,[l("Array.prototype.slice()"),a(r)])])])]),Gl,e("h2",El,[e("a",Il,[e("span",null,[e("a",wl,[l("Array.prototype.splice()"),a(r)])])])]),Vl,e("h2",Fl,[e("a",Tl,[e("span",null,[e("a",Ml,[l("Array.prototype.sort()"),a(r)])])])]),ql,e("h2",Bl,[e("a",Ll,[e("span",null,[e("a",Pl,[l("Array.prototype.reverse()"),a(r)])])])]),Yl,e("h2",Zl,[e("a",Dl,[e("span",null,[e("a",Ul,[l("Array.prototype.toString()"),a(r)])])])]),Hl])}const lr=n(c,[["render",Kl],["__file","10.Array.html.vue"]]),rr=JSON.parse(`{"path":"/notes/javascript/built-in-objects/10.Array.html","title":"Array","lang":"zh-CN","frontmatter":{"title":"Array","icon":"article","article":false,"sticky":20,"breadcrumb":false,"head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/javascript/built-in-objects/10.Array.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Array"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Array\\"}"]]},"headers":[{"level":2,"title":"Array.length","slug":"array-length","link":"#array-length","children":[]},{"level":2,"title":"Array.from()","slug":"array-from","link":"#array-from","children":[]},{"level":2,"title":"Array.isArray()","slug":"array-isarray","link":"#array-isarray","children":[]},{"level":2,"title":"Array.of()","slug":"array-of","link":"#array-of","children":[]},{"level":2,"title":"Array.prototype.concat()","slug":"array-prototype-concat","link":"#array-prototype-concat","children":[]},{"level":2,"title":"Array.prototype.copyWithin()","slug":"array-prototype-copywithin","link":"#array-prototype-copywithin","children":[]},{"level":2,"title":"Array.prototype.every()","slug":"array-prototype-every","link":"#array-prototype-every","children":[]},{"level":2,"title":"Array.prototype.fill()","slug":"array-prototype-fill","link":"#array-prototype-fill","children":[]},{"level":2,"title":"Array.prototype.filter()","slug":"array-prototype-filter","link":"#array-prototype-filter","children":[]},{"level":2,"title":"Array.prototype.find()","slug":"array-prototype-find","link":"#array-prototype-find","children":[]},{"level":2,"title":"Array.prototype.findIndex()","slug":"array-prototype-findindex","link":"#array-prototype-findindex","children":[]},{"level":2,"title":"Array.prototype.some()","slug":"array-prototype-some","link":"#array-prototype-some","children":[]},{"level":2,"title":"Array.prototype.flat()","slug":"array-prototype-flat","link":"#array-prototype-flat","children":[]},{"level":2,"title":"Array.prototype.flatMap()","slug":"array-prototype-flatmap","link":"#array-prototype-flatmap","children":[]},{"level":2,"title":"Array.prototype.forEach()","slug":"array-prototype-foreach","link":"#array-prototype-foreach","children":[]},{"level":2,"title":"Array.prototype.includes()","slug":"array-prototype-includes","link":"#array-prototype-includes","children":[]},{"level":2,"title":"Array.prototype.indexOf()","slug":"array-prototype-indexof","link":"#array-prototype-indexof","children":[]},{"level":2,"title":"Array.prototype.lastIndexOf()","slug":"array-prototype-lastindexof","link":"#array-prototype-lastindexof","children":[]},{"level":2,"title":"Array.prototype.join()","slug":"array-prototype-join","link":"#array-prototype-join","children":[]},{"level":2,"title":"Array.prototype.entries()","slug":"array-prototype-entries","link":"#array-prototype-entries","children":[]},{"level":2,"title":"Array.prototype.keys()","slug":"array-prototype-keys","link":"#array-prototype-keys","children":[]},{"level":2,"title":"Array.prototype.values()","slug":"array-prototype-values","link":"#array-prototype-values","children":[]},{"level":2,"title":"Array.prototype.map()","slug":"array-prototype-map","link":"#array-prototype-map","children":[]},{"level":2,"title":"Array.prototype.reduce()","slug":"array-prototype-reduce","link":"#array-prototype-reduce","children":[]},{"level":2,"title":"Array.prototype.reduceRight()","slug":"array-prototype-reduceright","link":"#array-prototype-reduceright","children":[]},{"level":2,"title":"Array.prototype.unshift()","slug":"array-prototype-unshift","link":"#array-prototype-unshift","children":[]},{"level":2,"title":"Array.prototype.shift()","slug":"array-prototype-shift","link":"#array-prototype-shift","children":[]},{"level":2,"title":"Array.prototype.push()","slug":"array-prototype-push","link":"#array-prototype-push","children":[]},{"level":2,"title":"Array.prototype.pop()","slug":"array-prototype-pop","link":"#array-prototype-pop","children":[]},{"level":2,"title":"Array.prototype.slice()","slug":"array-prototype-slice","link":"#array-prototype-slice","children":[]},{"level":2,"title":"Array.prototype.splice()","slug":"array-prototype-splice","link":"#array-prototype-splice","children":[]},{"level":2,"title":"Array.prototype.sort()","slug":"array-prototype-sort","link":"#array-prototype-sort","children":[]},{"level":2,"title":"Array.prototype.reverse()","slug":"array-prototype-reverse","link":"#array-prototype-reverse","children":[]},{"level":2,"title":"Array.prototype.toString()","slug":"array-prototype-tostring","link":"#array-prototype-tostring","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":14.03,"words":4209},"filePathRelative":"notes/javascript/built-in-objects/10.Array.md","localizedDate":"2023年1月11日","excerpt":""}`);export{lr as comp,rr as data};
