const t=JSON.parse(`{"key":"v-2cad06e3","path":"/technology/javascript/oop/object.html","title":"Object 对象的相关方法","lang":"zh-CN","frontmatter":{"title":"Object 对象的相关方法","icon":"article","category":"javascript","article":false,"tag":["javascript"],"copyright":"Copyright by 阮一峰","description":"JavaScript 在Object对象上面，提供了很多相关方法，处理面向对象编程的相关操作。本章介绍这些方法。 Object.getPrototypeOf() Object.getPrototypeOf方法返回参数对象的原型。这是获取原型对象的标准方法。 var F = function () {}; var f = new F(); Object.getPrototypeOf(f) === F.prototype // true","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/javascript/oop/object.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Object 对象的相关方法"}],["meta",{"property":"og:description","content":"JavaScript 在Object对象上面，提供了很多相关方法，处理面向对象编程的相关操作。本章介绍这些方法。 Object.getPrototypeOf() Object.getPrototypeOf方法返回参数对象的原型。这是获取原型对象的标准方法。 var F = function () {}; var f = new F(); Object.getPrototypeOf(f) === F.prototype // true"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Object 对象的相关方法\\",\\"description\\":\\"JavaScript 在Object对象上面，提供了很多相关方法，处理面向对象编程的相关操作。本章介绍这些方法。 Object.getPrototypeOf() Object.getPrototypeOf方法返回参数对象的原型。这是获取原型对象的标准方法。 var F = function () {}; var f = new F(); Object.getPrototypeOf(f) === F.prototype // true\\"}"]]},"headers":[{"level":2,"title":"Object.getPrototypeOf()","slug":"object-getprototypeof","link":"#object-getprototypeof","children":[]},{"level":2,"title":"Object.setPrototypeOf()","slug":"object-setprototypeof","link":"#object-setprototypeof","children":[]},{"level":2,"title":"Object.create()","slug":"object-create","link":"#object-create","children":[]},{"level":2,"title":"Object.prototype.isPrototypeOf()","slug":"object-prototype-isprototypeof","link":"#object-prototype-isprototypeof","children":[]},{"level":2,"title":"Object.prototype.__proto__","slug":"object-prototype-proto","link":"#object-prototype-proto","children":[]},{"level":2,"title":"获取原型对象方法的比较","slug":"获取原型对象方法的比较","link":"#获取原型对象方法的比较","children":[]},{"level":2,"title":"Object.getOwnPropertyNames()","slug":"object-getownpropertynames","link":"#object-getownpropertynames","children":[]},{"level":2,"title":"Object.prototype.hasOwnProperty()","slug":"object-prototype-hasownproperty","link":"#object-prototype-hasownproperty","children":[]},{"level":2,"title":"in 运算符和 for...in 循环","slug":"in-运算符和-for-in-循环","link":"#in-运算符和-for-in-循环","children":[]},{"level":2,"title":"对象的拷贝","slug":"对象的拷贝","link":"#对象的拷贝","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":8.44,"words":2533},"filePathRelative":"technology/javascript/oop/object.md","localizedDate":"2023年1月11日","excerpt":"<p>JavaScript 在<code>Object</code>对象上面，提供了很多相关方法，处理面向对象编程的相关操作。本章介绍这些方法。</p>\\n<h2> Object.getPrototypeOf()</h2>\\n<p><code>Object.getPrototypeOf</code>方法返回参数对象的原型。这是获取原型对象的标准方法。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">F</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">var</span> f <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">F</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nObject<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getPrototypeOf</span><span class=\\"token punctuation\\">(</span>f<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">===</span> <span class=\\"token class-name\\">F</span><span class=\\"token punctuation\\">.</span>prototype <span class=\\"token comment\\">// true</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{t as data};
