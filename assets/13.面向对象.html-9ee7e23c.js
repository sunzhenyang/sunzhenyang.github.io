import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e,f as t}from"./app-a7d5173b.js";const o={},p=t(`<h2 id="理解对象" tabindex="-1"><a class="header-anchor" href="#理解对象" aria-hidden="true">#</a> 理解对象</h2><h3 id="属性类型" tabindex="-1"><a class="header-anchor" href="#属性类型" aria-hidden="true">#</a> 属性类型</h3><blockquote><p>ECMAScript-262 第五版在定义只有内才用的特性时，描述了属性的各种特征。ECMAScript-262 定义这些特性是为了实现 JavaScript 引擎用的，因此在 JavaScript 中不能直接访问和他们。为了表示特性是内部值，该规范把他们放在了两对儿方括号中，例如 [[Enumerable]]</p></blockquote><h4 id="数据属性" tabindex="-1"><a class="header-anchor" href="#数据属性" aria-hidden="true">#</a> 数据属性</h4><ul><li><code>[[Configurable]]</code>：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。 <ul><li>一旦此属性定义为 <code>false</code>，则不能再把它变回可配置，此时在调用 <code>Object.defineProperty() </code> 只能修改 <code>writable</code> 特性</li></ul></li><li><code>[[Enumerable]]</code>：表示能否通过 for-in 循环返回属性。</li><li><code>[[Writable]]</code>：表示能否修改属性的值。</li><li><code>[[Value]]</code>：包含这个属性的数据值。读取属性值的时候从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。</li><li><code>Object.defineProperty()</code>：要修改属性默认的特性，必须使用此方法 <ul><li>接受三个参数：属性所在对象、属性的名字、和一个描述符对象 <ul><li>描述符对象的属性必须是：configurable、enumerable、writable、value。设置其中的一个或多个值可以修改对应的特性值。</li></ul></li></ul></li></ul><h4 id="访问器属性" tabindex="-1"><a class="header-anchor" href="#访问器属性" aria-hidden="true">#</a> 访问器属性</h4><ul><li>访问器属性不包括数据值；他们包含一对儿 <strong>getter</strong> 和 <strong>setter</strong> 函数（饭不是必须的）</li><li>在读取访问器属性时，会调用 <strong>getter</strong> 函数，这个函数负责返回有效的值；</li><li>在写入访问器属性时，会调用 <strong>setter</strong> 函数，这个函数负责决定如何处理；数据</li><li>访问器属性特性 <ul><li><code>[[Configurable]]</code>：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</li><li><code>[[Enumerable]]</code>：表示能否通过 for-in 循环返回属性。</li><li><code>[[Get]]</code>：在读取属性时调用的函数，默认值为 undefined。</li><li><code>[[Set]]</code>：在写入属性时调用的函数，默认值为 undefined。</li></ul></li><li><code>Object.defineProperty()</code>：要定义访问器属性，必须使用此方法 <ul><li>接受三个参数：属性所在对象、属性的名字、和一个描述符对象 <ul><li>描述符对象的属性必须是：configurable、enumerable、writable、value。设置其中的一个或多个值可以修改对应的特性值。</li></ul></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">_year</span><span class="token operator">:</span> <span class="token number">2004</span><span class="token punctuation">,</span> <span class="token comment">// 前面加 &#39;_&#39; 表示只能通过对象方法访问的属性</span>
    <span class="token literal-property property">edition</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">&#39;year&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;</span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue
        <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2005</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token comment">// 2005</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span> <span class="token comment">// 2</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义多个属性" tabindex="-1"><a class="header-anchor" href="#定义多个属性" aria-hidden="true">#</a> 定义多个属性</h3><ul><li><code>Object.defineProperties()</code>：为对象定义多个属性 <ul><li>接收两个对象参数 <ul><li>第一个对象是要添加和修改其属性的对象</li><li>第二个对象的属性与第一个对象中要添加或修改的属性一一对应。</li></ul></li></ul></li></ul><h3 id="读取属性的特性" tabindex="-1"><a class="header-anchor" href="#读取属性的特性" aria-hidden="true">#</a> 读取属性的特性</h3><ul><li><code>Object.getOwnPropertyDescriptor()</code>：获取给定属性的描述符 <ul><li>接收两个参数 <ul><li>属性所在的对象</li><li>要读取其描述符的属性名称</li></ul></li><li>返回一个对象 <ul><li>如果是数据属性，这个对象的属性有 configurable、enumerable、writable、value</li><li>如果是访问器属性，这个对象的属性有 configurable、enumerable、get、set</li></ul></li></ul></li><li>在 JavaScript 中，可以针对任何对象使用 <code>Object.getOwnPropertyDescriptor()</code>，包括 BOM 和 DOM</li></ul><h2 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> 创建对象</h2><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 工厂模式</span>
  <span class="token comment">// 优点：解决了创建多个相似对象的问题</span>
  <span class="token comment">// 缺点：没有解决对象识别的问题（ 即怎样知道一个对象的类型 ）</span>
  <span class="token keyword">function</span> <span class="token function">creatPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age
    obj<span class="token punctuation">.</span>job <span class="token operator">=</span> job
    <span class="token keyword">return</span> obj
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">creatPerson</span><span class="token punctuation">(</span><span class="token string">&#39;sunzhenyang&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;web&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数模式" tabindex="-1"><a class="header-anchor" href="#构造函数模式" aria-hidden="true">#</a> 构造函数模式</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 构造函数模式</span>
  <span class="token comment">// 优点：可以将它的实例标识为一种特点定的类型</span>
  <span class="token comment">// 缺点：每个方法都要在每个实例上重新创建一遍</span>
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job
  <span class="token punctuation">}</span>

  <span class="token comment">/* new 操作符操作步骤
   * 1. 创建一个新对象
   * 2. 将构造函数的作用域赋给新对象（ 因此 this 就指向了这个新对象 ）
   * 3. 执行构造函数中的代码（ 为这个对象添加属性 ）
   * 4. 返回新对象
   */</span>
  <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;gaoyue&#39;</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">&#39;kefu&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;gaomeili&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;contact&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象的 <strong>constructor</strong> 最初是用来表示对象类型的，但是，还是使用 <strong>instanceof</strong> 操作符更可靠一些</li><li>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型，这也正是构造函数模式胜过工厂模式的地方</li><li>以这种方式定义的构造函数是定义在 Global 对象（在浏览器中是 window 对象）中的。</li></ul><h4 id="将构造函数当做函数" tabindex="-1"><a class="header-anchor" href="#将构造函数当做函数" aria-hidden="true">#</a> 将构造函数当做函数</h4><ul><li>构造函数与其他函数唯一的区别，就在于调用他们的方式不同。</li><li>构造函数依然势函数，不存在定义构造函数的特殊语法</li><li>任何函数吗，只要通过 new 操作符来调用，那他就可以作为构造函数</li><li>任何函数，如果不通过构造函数来调用，那它和普通函数也没有区别</li></ul><h3 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式" aria-hidden="true">#</a> 原型模式</h3><ul><li>每个被创建的函数都有 <code>prototype</code>（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。按字面意思理解，那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。</li><li>使用原型对象的好处就是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。</li></ul><h4 id="理解原型对象" tabindex="-1"><a class="header-anchor" href="#理解原型对象" aria-hidden="true">#</a> 理解原型对象</h4><ul><li>只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象</li><li>默认情况下，所有原型对象都会自动获取一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。</li><li>创建了自定义构造函数之后，其原型对象默认只会取得 constructor 属性，至于其他方法，则都是从 Object 继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMA-262 第五版管这个指针叫 [[Prototype]]</li><li><code>isProtptypeOf()</code>：从本质上讲没如果 [[Prototype]] 指向调用 isPrototypeOf() 方法的对象（Proson.prototype）,那么这个方法就返回 true</li><li>ECMAScript 5 增加了一个新方法，叫 <code>Object.getPrototypeOf()</code>，返回 [[Prototype]] 的值</li><li>可以通过对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。</li><li>如果在实例中有与实例原型相同的属性名，则该属性会屏蔽原型中的属性</li><li>使用 delete 操作符可以完全删除实例属性，从而让我们能够重新访问原型中的属性</li><li><code>hasOwnProperty()</code>：检测一个属性是存在于实例中还是存在于原型中，这个方法（不要忘了它是从 Object 继承来的）只在给定属性存在于对象实例中时，才会返回 true</li><li><code>in</code>：操作符只要通过对象能够访问到属性就返回 true</li><li><code>Object.keys(obj)</code>：取的对象上所有可枚举的实例属性，接受一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。</li><li><code>Object.getOwnPropertyDescriptor(obj, &#39;name&#39;)</code>：返回实例属性描述符，要取得原型属性的描述符，必须在原型对象上调用 Object.getOwnPropertyDescriptor() 方法</li><li><code>Object.keys(obj)</code>：得到对象上的所有可枚举的实例属性</li><li><code>Object.getOwnPropertyNames(obj)</code>：得到对象上的所有实例属性，无论是否可枚举</li></ul>`,24);function l(c,i){return s(),a("div",null,[e(" more "),p])}const d=n(o,[["render",l],["__file","13.面向对象.html.vue"]]);export{d as default};
