const t=JSON.parse(`{"key":"v-e33771b4","path":"/technology/ts_axios/chapter2/function.html","title":"函数","lang":"zh-CN","frontmatter":{"title":"函数","icon":"article","category":["typescript"],"article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。 基本示例 和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列 API 函数还是只使用一次的函数。 通过下面的例子可以迅速回想起这两种 JavaScript 中的函数：","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter2/function.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。 基本示例 和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列 API 函数还是只使用一次的函数。 通过下面的例子可以迅速回想起这两种 JavaScript 中的函数："}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"函数\\",\\"description\\":\\"函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。 基本示例 和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列 API 函数还是只使用一次的函数。 通过下面的例子可以迅速回想起这两种 JavaScript 中的函数：\\"}"]]},"headers":[{"level":2,"title":"基本示例","slug":"基本示例","link":"#基本示例","children":[]},{"level":2,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[{"level":3,"title":"为函数定义类型","slug":"为函数定义类型","link":"#为函数定义类型","children":[]},{"level":3,"title":"书写完整函数类型","slug":"书写完整函数类型","link":"#书写完整函数类型","children":[]},{"level":3,"title":"推断类型","slug":"推断类型","link":"#推断类型","children":[]}]},{"level":2,"title":"可选参数和默认参数","slug":"可选参数和默认参数","link":"#可选参数和默认参数","children":[{"level":3,"title":"剩余参数","slug":"剩余参数","link":"#剩余参数","children":[]}]},{"level":2,"title":"this","slug":"this","link":"#this","children":[{"level":3,"title":"this 和箭头函数","slug":"this-和箭头函数","link":"#this-和箭头函数","children":[]},{"level":3,"title":"this 参数","slug":"this-参数","link":"#this-参数","children":[]},{"level":3,"title":"this 参数在回调函数里","slug":"this-参数在回调函数里","link":"#this-参数在回调函数里","children":[]}]},{"level":2,"title":"重载","slug":"重载","link":"#重载","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":11.02,"words":3307},"filePathRelative":"technology/ts_axios/chapter2/function.md","localizedDate":"2023年1月11日","excerpt":"<p>函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。</p>\\n<h2> 基本示例</h2>\\n<p>和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列 API 函数还是只使用一次的函数。</p>\\n<p>通过下面的例子可以迅速回想起这两种 JavaScript 中的函数：</p>","autoDesc":true}`);export{t as data};
