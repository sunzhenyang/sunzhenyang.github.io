const e=JSON.parse('{"key":"v-fe1aebba","path":"/notes/typescript/interface.html","title":"接口","lang":"zh-CN","frontmatter":{"title":"接口","icon":"article","category":["typescript"],"article":false,"tag":["typescript"],"description":"TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。 接口初探 下面通过一个简单示例来观察接口是如何工作的： ```typescript function printLabel(labelledO...","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/typescript/interface.html"}],["meta",{"property":"og:site_name","content":"Yang\'s Blog"}],["meta",{"property":"og:title","content":"接口"}],["meta",{"property":"og:description","content":"TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。 接口初探 下面通过一个简单示例来观察接口是如何工作的： ```typescript function printLabel(labelledO..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"接口\\",\\"description\\":\\"TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。 接口初探 下面通过一个简单示例来观察接口是如何工作的： ```typescript function printLabel(labelledO...\\"}"]]},"headers":[{"level":2,"title":"接口初探","slug":"接口初探","link":"#接口初探","children":[]},{"level":2,"title":"可选属性","slug":"可选属性","link":"#可选属性","children":[]},{"level":2,"title":"只读属性","slug":"只读属性","link":"#只读属性","children":[{"level":3,"title":"readonly vs const","slug":"readonly-vs-const","link":"#readonly-vs-const","children":[]}]},{"level":2,"title":"额外的属性检查","slug":"额外的属性检查","link":"#额外的属性检查","children":[]},{"level":2,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[]},{"level":2,"title":"可索引的类型","slug":"可索引的类型","link":"#可索引的类型","children":[]},{"level":2,"title":"类类型","slug":"类类型","link":"#类类型","children":[{"level":3,"title":"实现接口","slug":"实现接口","link":"#实现接口","children":[]},{"level":3,"title":"类静态部分与实例部分的区别","slug":"类静态部分与实例部分的区别","link":"#类静态部分与实例部分的区别","children":[]}]},{"level":2,"title":"继承接口","slug":"继承接口","link":"#继承接口","children":[]},{"level":2,"title":"混合类型","slug":"混合类型","link":"#混合类型","children":[]},{"level":2,"title":"接口继承类","slug":"接口继承类","link":"#接口继承类","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":12.7,"words":3809},"filePathRelative":"notes/typescript/interface.md","localizedDate":"2023年1月11日","excerpt":"","autoDesc":true}');export{e as data};
