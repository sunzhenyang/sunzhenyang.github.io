const n=JSON.parse(`{"key":"v-4a262725","path":"/technology/ts_axios/chapter11/interceptor.html","title":"拦截器模块单元测试","lang":"zh-CN","frontmatter":{"title":"拦截器模块单元测试","icon":"article","category":["typescript"],"article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"拦截器是 ts-axios 库一个非常实用的功能，接下来我们来编写它的测试代码。 测试代码编写 test/interceptor.spec.ts： import axios, { AxiosRequestConfig, AxiosResponse } from '../src/index' import { getAjaxRequest } from './helper' describe('interceptors', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should add a request interceptor', () =&gt; { const instance = axios.create() instance.interceptors.request.use((config: AxiosRequestConfig) =&gt; { config.headers.test = 'added by interceptor' return config }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.test).toBe('added by interceptor') }) }) test('should add a request interceptor that returns a new config object', () =&gt; { const instance = axios.create() instance.interceptors.request.use(() =&gt; { return { url: '/bar', method: 'post' } }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('POST') expect(request.url).toBe('/bar') }) }) test('should add a request interceptor that returns a promise', done =&gt; { const instance = axios.create() instance.interceptors.request.use((config: AxiosRequestConfig) =&gt; { return new Promise(resolve =&gt; { setTimeout(() =&gt; { config.headers.async = 'promise' resolve(config) }, 10) }) }) instance('/foo') setTimeout(() =&gt; { getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.async).toBe('promise') done() }) }, 100) }) test('should add multiple request interceptors', () =&gt; { const instance = axios.create() instance.interceptors.request.use(config =&gt; { config.headers.test1 = '1' return config }) instance.interceptors.request.use(config =&gt; { config.headers.test2 = '2' return config }) instance.interceptors.request.use(config =&gt; { config.headers.test3 = '3' return config }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.test1).toBe('1') expect(request.requestHeaders.test2).toBe('2') expect(request.requestHeaders.test3).toBe('3') }) }) test('should add a response interceptor', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + ' - modified by interceptor' return data }) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK - modified by interceptor') done() }, 100) }) }) test('should add a response interceptor that returns a new data object', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(() =&gt; { return { data: 'stuff', headers: null, status: 500, statusText: 'ERR', request: null, config: {} } }) instance('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('stuff') expect(response.headers).toBeNull() expect(response.status).toBe(500) expect(response.statusText).toBe('ERR') expect(response.request).toBeNull() expect(response.config).toEqual({}) done() }, 100) }) }) test('should add a response interceptor that returns a promise', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { return new Promise(resolve =&gt; { // do something async setTimeout(() =&gt; { data.data = 'you have been promised!' resolve(data) }, 10) }) }) instance('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('you have been promised!') done() }, 100) }) }) test('should add multiple response interceptors', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + '1' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '2' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '3' return data }) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK123') done() }, 100) }) }) test('should allow removing interceptors', done =&gt; { let response: AxiosResponse let intercept const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + '1' return data }) intercept = instance.interceptors.response.use(data =&gt; { data.data = data.data + '2' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '3' return data }) instance.interceptors.response.eject(intercept) instance.interceptors.response.eject(5) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK13') done() }, 100) }) }) })","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter11/interceptor.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"拦截器模块单元测试"}],["meta",{"property":"og:description","content":"拦截器是 ts-axios 库一个非常实用的功能，接下来我们来编写它的测试代码。 测试代码编写 test/interceptor.spec.ts： import axios, { AxiosRequestConfig, AxiosResponse } from '../src/index' import { getAjaxRequest } from './helper' describe('interceptors', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should add a request interceptor', () =&gt; { const instance = axios.create() instance.interceptors.request.use((config: AxiosRequestConfig) =&gt; { config.headers.test = 'added by interceptor' return config }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.test).toBe('added by interceptor') }) }) test('should add a request interceptor that returns a new config object', () =&gt; { const instance = axios.create() instance.interceptors.request.use(() =&gt; { return { url: '/bar', method: 'post' } }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('POST') expect(request.url).toBe('/bar') }) }) test('should add a request interceptor that returns a promise', done =&gt; { const instance = axios.create() instance.interceptors.request.use((config: AxiosRequestConfig) =&gt; { return new Promise(resolve =&gt; { setTimeout(() =&gt; { config.headers.async = 'promise' resolve(config) }, 10) }) }) instance('/foo') setTimeout(() =&gt; { getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.async).toBe('promise') done() }) }, 100) }) test('should add multiple request interceptors', () =&gt; { const instance = axios.create() instance.interceptors.request.use(config =&gt; { config.headers.test1 = '1' return config }) instance.interceptors.request.use(config =&gt; { config.headers.test2 = '2' return config }) instance.interceptors.request.use(config =&gt; { config.headers.test3 = '3' return config }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.test1).toBe('1') expect(request.requestHeaders.test2).toBe('2') expect(request.requestHeaders.test3).toBe('3') }) }) test('should add a response interceptor', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + ' - modified by interceptor' return data }) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK - modified by interceptor') done() }, 100) }) }) test('should add a response interceptor that returns a new data object', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(() =&gt; { return { data: 'stuff', headers: null, status: 500, statusText: 'ERR', request: null, config: {} } }) instance('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('stuff') expect(response.headers).toBeNull() expect(response.status).toBe(500) expect(response.statusText).toBe('ERR') expect(response.request).toBeNull() expect(response.config).toEqual({}) done() }, 100) }) }) test('should add a response interceptor that returns a promise', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { return new Promise(resolve =&gt; { // do something async setTimeout(() =&gt; { data.data = 'you have been promised!' resolve(data) }, 10) }) }) instance('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('you have been promised!') done() }, 100) }) }) test('should add multiple response interceptors', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + '1' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '2' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '3' return data }) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK123') done() }, 100) }) }) test('should allow removing interceptors', done =&gt; { let response: AxiosResponse let intercept const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + '1' return data }) intercept = instance.interceptors.response.use(data =&gt; { data.data = data.data + '2' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '3' return data }) instance.interceptors.response.eject(intercept) instance.interceptors.response.eject(5) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK13') done() }, 100) }) }) })"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"拦截器模块单元测试\\",\\"description\\":\\"拦截器是 ts-axios 库一个非常实用的功能，接下来我们来编写它的测试代码。 测试代码编写 test/interceptor.spec.ts： import axios, { AxiosRequestConfig, AxiosResponse } from '../src/index' import { getAjaxRequest } from './helper' describe('interceptors', () =&gt; { beforeEach(() =&gt; { jasmine.Ajax.install() }) afterEach(() =&gt; { jasmine.Ajax.uninstall() }) test('should add a request interceptor', () =&gt; { const instance = axios.create() instance.interceptors.request.use((config: AxiosRequestConfig) =&gt; { config.headers.test = 'added by interceptor' return config }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.test).toBe('added by interceptor') }) }) test('should add a request interceptor that returns a new config object', () =&gt; { const instance = axios.create() instance.interceptors.request.use(() =&gt; { return { url: '/bar', method: 'post' } }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.method).toBe('POST') expect(request.url).toBe('/bar') }) }) test('should add a request interceptor that returns a promise', done =&gt; { const instance = axios.create() instance.interceptors.request.use((config: AxiosRequestConfig) =&gt; { return new Promise(resolve =&gt; { setTimeout(() =&gt; { config.headers.async = 'promise' resolve(config) }, 10) }) }) instance('/foo') setTimeout(() =&gt; { getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.async).toBe('promise') done() }) }, 100) }) test('should add multiple request interceptors', () =&gt; { const instance = axios.create() instance.interceptors.request.use(config =&gt; { config.headers.test1 = '1' return config }) instance.interceptors.request.use(config =&gt; { config.headers.test2 = '2' return config }) instance.interceptors.request.use(config =&gt; { config.headers.test3 = '3' return config }) instance('/foo') return getAjaxRequest().then(request =&gt; { expect(request.requestHeaders.test1).toBe('1') expect(request.requestHeaders.test2).toBe('2') expect(request.requestHeaders.test3).toBe('3') }) }) test('should add a response interceptor', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + ' - modified by interceptor' return data }) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK - modified by interceptor') done() }, 100) }) }) test('should add a response interceptor that returns a new data object', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(() =&gt; { return { data: 'stuff', headers: null, status: 500, statusText: 'ERR', request: null, config: {} } }) instance('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('stuff') expect(response.headers).toBeNull() expect(response.status).toBe(500) expect(response.statusText).toBe('ERR') expect(response.request).toBeNull() expect(response.config).toEqual({}) done() }, 100) }) }) test('should add a response interceptor that returns a promise', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { return new Promise(resolve =&gt; { // do something async setTimeout(() =&gt; { data.data = 'you have been promised!' resolve(data) }, 10) }) }) instance('/foo').then(res =&gt; { response = res }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('you have been promised!') done() }, 100) }) }) test('should add multiple response interceptors', done =&gt; { let response: AxiosResponse const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + '1' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '2' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '3' return data }) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK123') done() }, 100) }) }) test('should allow removing interceptors', done =&gt; { let response: AxiosResponse let intercept const instance = axios.create() instance.interceptors.response.use(data =&gt; { data.data = data.data + '1' return data }) intercept = instance.interceptors.response.use(data =&gt; { data.data = data.data + '2' return data }) instance.interceptors.response.use(data =&gt; { data.data = data.data + '3' return data }) instance.interceptors.response.eject(intercept) instance.interceptors.response.eject(5) instance('/foo').then(data =&gt; { response = data }) getAjaxRequest().then(request =&gt; { request.respondWith({ status: 200, responseText: 'OK' }) setTimeout(() =&gt; { expect(response.data).toBe('OK13') done() }, 100) }) }) })\\"}"]]},"headers":[{"level":2,"title":"测试代码编写","slug":"测试代码编写","link":"#测试代码编写","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":2.42,"words":726},"filePathRelative":"technology/ts_axios/chapter11/interceptor.md","localizedDate":"2023年1月11日","excerpt":"<p>拦截器是 <code>ts-axios</code> 库一个非常实用的功能，接下来我们来编写它的测试代码。</p>\\n<h2> 测试代码编写</h2>\\n<p><code>test/interceptor.spec.ts</code>：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> axios<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> AxiosRequestConfig<span class=\\"token punctuation\\">,</span> AxiosResponse <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'../src/index'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> getAjaxRequest <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./helper'</span>\\n\\n<span class=\\"token function\\">describe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'interceptors'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">beforeEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">install</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">afterEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    jasmine<span class=\\"token punctuation\\">.</span>Ajax<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">uninstall</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add a request interceptor'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token operator\\">:</span> AxiosRequestConfig<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      config<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>test <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'added by interceptor'</span>\\n      <span class=\\"token keyword\\">return</span> config\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">.</span>test<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'added by interceptor'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add a request interceptor that returns a new config object'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n        url<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'/bar'</span><span class=\\"token punctuation\\">,</span>\\n        method<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'post'</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'POST'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/bar'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add a request interceptor that returns a promise'</span><span class=\\"token punctuation\\">,</span> done <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token operator\\">:</span> AxiosRequestConfig<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token builtin\\">Promise</span></span><span class=\\"token punctuation\\">(</span>resolve <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          config<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>async <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'promise'</span>\\n          <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">.</span>async<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'promise'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add multiple request interceptors'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>config <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      config<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>test1 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'1'</span>\\n      <span class=\\"token keyword\\">return</span> config\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>config <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      config<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>test2 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'2'</span>\\n      <span class=\\"token keyword\\">return</span> config\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>config <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      config<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>test3 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'3'</span>\\n      <span class=\\"token keyword\\">return</span> config\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">.</span>test1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'1'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">.</span>test2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'2'</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>requestHeaders<span class=\\"token punctuation\\">.</span>test3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'3'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add a response interceptor'</span><span class=\\"token punctuation\\">,</span> done <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> response<span class=\\"token operator\\">:</span> AxiosResponse\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> <span class=\\"token string\\">' - modified by interceptor'</span>\\n      <span class=\\"token keyword\\">return</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      response <span class=\\"token operator\\">=</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">respondWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n        status<span class=\\"token operator\\">:</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">,</span>\\n        responseText<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'OK'</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'OK - modified by interceptor'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add a response interceptor that returns a new data object'</span><span class=\\"token punctuation\\">,</span> done <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> response<span class=\\"token operator\\">:</span> AxiosResponse\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n        data<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'stuff'</span><span class=\\"token punctuation\\">,</span>\\n        headers<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span>\\n        status<span class=\\"token operator\\">:</span> <span class=\\"token number\\">500</span><span class=\\"token punctuation\\">,</span>\\n        statusText<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'ERR'</span><span class=\\"token punctuation\\">,</span>\\n        request<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span>\\n        config<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>res <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      response <span class=\\"token operator\\">=</span> res\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">respondWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n        status<span class=\\"token operator\\">:</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">,</span>\\n        responseText<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'OK'</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'stuff'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBeNull</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>status<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">500</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>statusText<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'ERR'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBeNull</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>config<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toEqual</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add a response interceptor that returns a promise'</span><span class=\\"token punctuation\\">,</span> done <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> response<span class=\\"token operator\\">:</span> AxiosResponse\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token builtin\\">Promise</span></span><span class=\\"token punctuation\\">(</span>resolve <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// do something async</span>\\n        <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'you have been promised!'</span>\\n          <span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>res <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      response <span class=\\"token operator\\">=</span> res\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">respondWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n        status<span class=\\"token operator\\">:</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">,</span>\\n        responseText<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'OK'</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'you have been promised!'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should add multiple response interceptors'</span><span class=\\"token punctuation\\">,</span> done <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> response<span class=\\"token operator\\">:</span> AxiosResponse\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'1'</span>\\n      <span class=\\"token keyword\\">return</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'2'</span>\\n      <span class=\\"token keyword\\">return</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'3'</span>\\n      <span class=\\"token keyword\\">return</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      response <span class=\\"token operator\\">=</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">respondWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n        status<span class=\\"token operator\\">:</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">,</span>\\n        responseText<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'OK'</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'OK123'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'should allow removing interceptors'</span><span class=\\"token punctuation\\">,</span> done <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> response<span class=\\"token operator\\">:</span> AxiosResponse\\n    <span class=\\"token keyword\\">let</span> intercept\\n    <span class=\\"token keyword\\">const</span> instance <span class=\\"token operator\\">=</span> axios<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'1'</span>\\n      <span class=\\"token keyword\\">return</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    intercept <span class=\\"token operator\\">=</span> instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'2'</span>\\n      <span class=\\"token keyword\\">return</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'3'</span>\\n      <span class=\\"token keyword\\">return</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">eject</span><span class=\\"token punctuation\\">(</span>intercept<span class=\\"token punctuation\\">)</span>\\n    instance<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">eject</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">instance</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>data <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      response <span class=\\"token operator\\">=</span> data\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token function\\">getAjaxRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>request <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n      request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">respondWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n        status<span class=\\"token operator\\">:</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">,</span>\\n        responseText<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'OK'</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toBe</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'OK13'</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
