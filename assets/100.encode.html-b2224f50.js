import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as s,f as d}from"./app-e1714ab0.js";const e={},o=d(`<h2 id="码点" tabindex="-1"><a class="header-anchor" href="#码点" aria-hidden="true">#</a> 码点</h2><blockquote><p>某个字符规定对应的数值</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 根据字符获取码点</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 97</span>

<span class="token comment">// 根据码点获取字符</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="码元" tabindex="-1"><a class="header-anchor" href="#码元" aria-hidden="true">#</a> 码元</h2><blockquote><p>Javascript 字符串的 length 属性返回的是 码元</p></blockquote><ul><li><p>对于 UTF-16 来说，一个码元是 16bit（两个字节）</p></li><li><p>对于 UTF-32 来说，一个码元是 32bit（四个字节）</p></li><li><p>JavaScript 内部，字符以 UTF-16（字符用两个字节或四个字节表示的格式储存）</p><ul><li>码点范围介于 <code> 0-65535</code> 的字符，两个字节</li><li>Unicode 码点大于 <code>65535</code> 的字符，四个字节</li></ul></li></ul><blockquote><p><code>codePointAt</code> 与 <code>charCodeAt</code> 接受的索引值都是根据码元 <code>codePointAt</code> 函数匹配规则是码点，当它匹配到当前索引的码元后会识别当前的码元是否和后面的码元能否构成一个码点，如果是 一个码点，则返回这两个码元的码点，如果不能构成一个码点，就按照当前的码元返回码点</p><p>ES6 考虑到了这个问题，其原型上实现了 <code>Symbol.iterator</code>，使得其可以使用 <code>for of</code> 来遍历其值</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220103844034.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ascll-码" tabindex="-1"><a class="header-anchor" href="#ascll-码" aria-hidden="true">#</a> ASCLL 码</h2><blockquote><p>美国标准信息交换代码啊</p></blockquote><ul><li>ASCII 码占用一个字节，一个字节为 8 个 bit 位</li><li>ASCI 码第一位始终是 0，那么实际可以表示的状态是 2^7=128 种字符</li><li>EASCLL 码，为了适应更多字符（128-255），不常用</li></ul><h3 id="码表" tabindex="-1"><a class="header-anchor" href="#码表" aria-hidden="true">#</a> 码表</h3><table><thead><tr><th><strong>ASCII 值</strong></th><th><strong>控制字符</strong></th><th><strong>ASCII 值</strong></th><th><strong>控制字符</strong></th><th><strong>ASCII 值</strong></th><th><strong>控制字符</strong></th><th><strong>ASCII 值</strong></th><th><strong>控制字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUL</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>！</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>”</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>&#39;</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>\\</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>~</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>—</td><td>127</td><td>DEL</td></tr></tbody></table><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h3><blockquote><p>0-31 为控制字符；32-126 为打印字符；127 为 Delete(删除)命令</p></blockquote><table><thead><tr><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th><strong>字符</strong></th><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>00</td><td>空</td><td>16</td><td>10</td><td>数据链路转意</td></tr><tr><td>1</td><td>01</td><td>头标开始</td><td>17</td><td>11</td><td>设备控制 1</td></tr><tr><td>2</td><td>02</td><td>正文开始</td><td>18</td><td>12</td><td>设备控制 2</td></tr><tr><td>3</td><td>03</td><td>正文结束</td><td>19</td><td>13</td><td>设备控制 3</td></tr><tr><td>4</td><td>04</td><td>传输结束</td><td>20</td><td>14</td><td>设备控制 4</td></tr><tr><td>5</td><td>05</td><td>查询</td><td>21</td><td>15</td><td>反确认</td></tr><tr><td>6</td><td>06</td><td>确认</td><td>22</td><td>16</td><td>同步空闲</td></tr><tr><td>7</td><td>07</td><td>震铃</td><td>23</td><td>17</td><td>传输块结束</td></tr><tr><td>8</td><td>08</td><td>backspace</td><td>24</td><td>18</td><td>取消</td></tr><tr><td>9</td><td>09</td><td>水平制表符</td><td>25</td><td>19</td><td>媒体结束</td></tr><tr><td>10</td><td>0A</td><td>换行/新行</td><td>26</td><td>1A</td><td>替换</td></tr><tr><td>11</td><td>0B</td><td>竖直制表符</td><td>27</td><td>1B</td><td>转意</td></tr><tr><td>12</td><td>0C</td><td>换页/新页</td><td>28</td><td>1C</td><td>文件分隔符</td></tr><tr><td>13</td><td>0D</td><td>回车</td><td>29</td><td>1D</td><td>组分隔符</td></tr><tr><td>14</td><td>0E</td><td>移出</td><td>30</td><td>1E</td><td>记录分隔符</td></tr><tr><td>15</td><td>0F</td><td>移入</td><td>31</td><td>1F</td><td>单元分隔符</td></tr></tbody></table><h2 id="unicode-码" tabindex="-1"><a class="header-anchor" href="#unicode-码" aria-hidden="true">#</a> Unicode 码</h2><blockquote><p>又称统一码、万国码，为世界上所有字符都分配了一个唯一的编号（码点），并没有规定存储方式</p></blockquote><ul><li>编号范围（十六进制）从<code> 0x000000</code> 到 <code>0x10FFFF</code>，有 100 多万(1114112）个</li><li>每个字符都有一个唯一的 Unicode 编号</li><li>Unicode 是字符集，为了兼容 ASCIL，规定 <code>0-127</code>个字符是和 ASCIl 是一样的，不一样的是 <code>128-255</code> 这一部分</li></ul><h2 id="字符表示方式" tabindex="-1"><a class="header-anchor" href="#字符表示方式" aria-hidden="true">#</a> 字符表示方式</h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> \\</h3><blockquote><p><code>\\</code> <strong>转义字符</strong>，是一个特殊的存在</p><p>大多数情况下，不产生什么作用，只对一些特殊的字符起作用</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220093742715.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><pre><code>### \\ 八进制
</code></pre><blockquote><p>表示码点范围值为 0-255，有些特殊码点的字符不能被正常显示</p><p><strong>模板字符串中不能直接使用</strong>，需要使用单引号包裹 <code>\${字符&#39;\\56&#39;}</code></p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220094256487.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="x-两位十六进制" tabindex="-1"><a class="header-anchor" href="#x-两位十六进制" aria-hidden="true">#</a> \\x 两位十六进制</h3><blockquote><p>表示码点范围值为 0-255，有些特殊码点的字符不能被正常显示</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220094435890.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="u-四位十六进制" tabindex="-1"><a class="header-anchor" href="#u-四位十六进制" aria-hidden="true">#</a> \\u 四位十六进制</h3><blockquote><p>表示码点范围值为 0-65535，固定 4 位十六进制</p></blockquote><ul><li><p>少于四位时会报语法错误</p></li><li><p>多余四位时，多余字符原样输出</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220095150454.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="u-十六进制" tabindex="-1"><a class="header-anchor" href="#u-十六进制" aria-hidden="true">#</a> \\u {十六进制}  </h3><blockquote><p>ES6 新增能力，可以表示超出 65535 范围的字符</p><p>在 CSS 中可以不写 u 和大括号，例如 <code>a::before{ content: &#39;\\1234&#39;;}</code></p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img@main/img/image-20230220095409284.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="字符实际应用" tabindex="-1"><a class="header-anchor" href="#字符实际应用" aria-hidden="true">#</a> 字符实际应用</h2><ul><li>正则匹配常用中文</li><li>去掉空白字符</li><li>等等...</li></ul><h2 id="utf-8-utf-16" tabindex="-1"><a class="header-anchor" href="#utf-8-utf-16" aria-hidden="true">#</a> UTF-8/UTF-16</h2><blockquote><p>均是 Unicode 编码的一种实现，定义了编码在计算机中的存储方式</p></blockquote><ul><li><p>UTF-8 是互联网使用最多的一种 Unicode 的实现方式</p><ul><li>变长的编码方式（1-4 个字节）</li></ul></li><li><p><strong>JavaScript 代码中的字符和 localStrage 存储的字符是基于 UTF-16 编码的</strong></p></li><li><p>cookie 存储的字符是基于 UTF-8 编码的</p></li><li><p>UTF-16 缺点</p><ul><li>空间浪费，最低单元采用了两个字节</li><li>目前 Unicode5.0 收录的字符已经超过了 UTF-16 所能表达的最大范围</li></ul></li></ul><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> Base64</h2><h3 id="说明-1" tabindex="-1"><a class="header-anchor" href="#说明-1" aria-hidden="true">#</a> 说明</h3><blockquote><p><strong>Base64 编码后的数据都是 ASCll 字符</strong></p></blockquote><p>早期邮件传输协议基于 ASCII 文本，对于诸如图片、视频等二进制文件处理并不好。ASCII 主要用于显示现代英文，到目前为业只定义了 128 个字符，包含控制字符和可显示字符为了解决上述问题，Base64 编码顺势而生。 Base64 是编解码，主要的作用不在于安全性，而在于让内容能在各个网关间无错的传输，这才是 Base64 编码的核心作用。</p><h3 id="组成" tabindex="-1"><a class="header-anchor" href="#组成" aria-hidden="true">#</a> 组成</h3><blockquote><p>64 表示编码后的字符由 64 种字符排列组合而成</p><p>还有一个字符 <code>=</code>（最多出现两次），是填充字符，不属于 64 里面的范畴</p></blockquote><ul><li>A-Z（26）</li><li>a-z（26）</li><li>0-9（10）</li><li><code>+</code>、<code>/</code>（2）</li></ul><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>可以将二进制数据（比如图片）转化为可打印字符，方便传输数据</li><li>对数据进行简单的加密，肉眼是安全的</li><li>如果是在 html 或者 css 处理图片，可以减少 http 请求</li></ul><blockquote><p>缺点</p></blockquote><ul><li>内容编码后体积变大，至少 1/3，因为是三字节变成四个字节，当只有一个字节的时候，也至少会变成三个字节</li><li>编码和解码需要额外工作量</li></ul><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><h4 id="canvas-图片生成" tabindex="-1"><a class="header-anchor" href="#canvas-图片生成" aria-hidden="true">#</a> Canvas 图片生成</h4><blockquote><p>canvas 的 toDataURL 方法可以把 canvas 画布内容转成 base64 编码格式包含图片展示的 data URI</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ctx <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// other code ...</span>
<span class="token keyword">const</span> dataUrl <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// dataUrl输出结果 data:image/png;base64, iVBORw0KGgoAAAANSUhE...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件获取" tabindex="-1"><a class="header-anchor" href="#文件获取" aria-hidden="true">#</a> 文件获取</h4><blockquote><p>FileReader 的 readAsDataURL 方法可以把上传的文件转为 base64 格式的 data URI，比较常见的场景是用户头像的剪裁和上传</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputFile<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">previewImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>预览图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>avatar<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>预览图<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">readAsDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fileEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;inputFile&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> curFile <span class="token operator">=</span> fileEl<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>curFile<span class="token punctuation">)</span>
      reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      reader<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">previewImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">readAsDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
      el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> dataSrc<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jwt" tabindex="-1"><a class="header-anchor" href="#jwt" aria-hidden="true">#</a> JWT</h4><blockquote><p>JSON Web Token：前后端安全校验机制</p></blockquote><ul><li>由 <code>header</code>、 <code>payload</code>、<code>signature</code> 三部分组成</li><li><code>header </code>和 <code>payload</code> 解码后，是明文看见的</li></ul><h4 id="图片优化" tabindex="-1"><a class="header-anchor" href="#图片优化" aria-hidden="true">#</a> 图片优化</h4><ul><li><p>直接用 base64 编码之后的字符代替小图片</p></li><li><p>减少一次请求，浏览器默认请求网站图标 favicon.ico，替换为最小图片字符之后可以节约一次网络请求</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data:,<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
&lt;Link rel=&quot;icon&quot; href=&quot;data:;base64,=&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最小图片字符计算由来</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> canvasEL <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>
  dataUrl <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataUrl<span class="token punctuation">)</span> <span class="token comment">// data:,</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a> SourceMap</h4><blockquote><p>SourceMap 中的 Mappings 字段使用 Base64 编码的，不可直接解码</p></blockquote><h4 id="混淆加密代码" tabindex="-1"><a class="header-anchor" href="#混淆加密代码" aria-hidden="true">#</a> 混淆加密代码</h4><blockquote><p>著名的代码混淆库 <code>javascript-obfuscator</code> 中有 base64 的应用，<code>webpack-obfuscator</code> 也是基于其封装的</p></blockquote><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h4><blockquote><p>X.509、GitHub SSH Key、mht 文件、邮件附件等等</p></blockquote>`,74);function p(c,l){return n(),a("div",null,[s(" more "),o])}const r=t(e,[["render",p],["__file","100.encode.html.vue"]]);export{r as default};
