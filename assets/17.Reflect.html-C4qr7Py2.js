import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as n,c as a,a as s,b as e,d as t,e as r,f as o}from"./app-BybQgHW9.js";const d={},p={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect",target:"_blank",rel:"noopener noreferrer"},f=o('<br><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li><p><code>Reflect </code>不是一个函数对象，因此它是不可构造的</p></li><li><p>所有属性和方法都是静态的，就像 <code>Math</code> 对象</p></li><li><p>作用</p><ul><li>将 Object 属于语言内部的方法放到 Reflect 上</li><li>修改某些 Object 方法的返回结果，让其变得更合理</li><li>让 Object 操作变成函数行为</li><li>Reflect 对象的方法与 Proxy 对象的方法一一对应</li></ul></li></ul><br>',4),h={id:"reflect-get",tabindex:"-1"},_={class:"header-anchor",href:"#reflect-get"},u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get",target:"_blank",rel:"noopener noreferrer"},g=o("<ul><li>描述：与从 对象 (<code>target[propertyKey]</code>) 中读取属性类似，但它是通过一个函数执行来操作的</li><li>语法：<code>Reflect.get(target, propertyKey[, receiver])</code></li><li>参数 <ul><li>target：需要取值的目标对象</li><li>propertyKey：需要获取的值的键值</li><li>receiver：如果 target 对象中指定了 getter，receiver 则为 getter 调用时的this值</li></ul></li><li>返回值：属性的值</li><li>注意：如果目标类型不是 Object，则抛出一个 TypeError</li></ul><br>",2),b={id:"reflect-set",tabindex:"-1"},y={class:"header-anchor",href:"#reflect-set"},R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set",target:"_blank",rel:"noopener noreferrer"},m=o("<ul><li>描述：在一个对象上设置一个属性</li><li>语法：<code>Reflect.set(target, propertyKey, value[, receiver])</code></li><li>参数 <ul><li>target：设置属性的目标对象</li><li>propertyKey：设置的属性的名称</li><li>value：设置的值</li><li>receiver：如果遇到 setter，receiver 则为 setter 调用时的 this 值</li></ul></li><li>返回值：一个 Boolean 值表明是否成功设置属性</li><li>注意：如果目标类型不是 Object，则抛出一个 TypeError</li></ul><br>",2),v={id:"reflect-has",tabindex:"-1"},j={class:"header-anchor",href:"#reflect-has"},O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has",target:"_blank",rel:"noopener noreferrer"},k=o("<ul><li>描述：与 <code>in</code> 操作符 相同</li><li>语法：<code>Reflect.has(target, propertyKey)</code></li><li>参数 <ul><li>target：目标对象</li><li>propertyKey：属性名，需要检查目标对象是否存在此属性</li></ul></li><li>返回值：一个 Boolean 类型的对象指示是否存在此属性</li><li>注意：如果目标类型不是 Object，则抛出一个 TypeError</li></ul><br>",2),z={id:"reflect-ownkeys",tabindex:"-1"},x={class:"header-anchor",href:"#reflect-ownkeys"},w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys",target:"_blank",rel:"noopener noreferrer"},T=e("ul",null,[e("li",null,"描述：返回一个由目标对象自身的属性键组成的数组"),e("li",null,[t("语法："),e("code",null,"Reflect.ownKeys(target)")]),e("li",null,[t("参数 "),e("ul",null,[e("li",null,"target：目标对象")])]),e("li",null,"返回值：由目标对象的自身属性键组成的 Array"),e("li",null,"注意：如果目标类型不是 Object，则抛出一个 TypeError")],-1),N=e("br",null,null,-1),K={id:"reflect-defineproperty",tabindex:"-1"},P={class:"header-anchor",href:"#reflect-defineproperty"},C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty",target:"_blank",rel:"noopener noreferrer"},S=o("<ul><li>描述：基本等同于 <code>Object.defineProperty()</code> 方法，唯一不同是返回 <code>Boolean</code> 值</li><li>语法：<code>Reflect.defineProperty(target, propertyKey, attributes)</code></li><li>参数 <ul><li>target：目标对象</li><li>propertyKey：要定义或修改的属性的名称</li><li>attributes：要定义或修改的属性的描述</li></ul></li><li>返回值：Boolean 值指示了属性是否被成功定义</li><li>注意：如果目标类型不是 Object，则抛出一个 TypeError</li></ul><br>",2),E={id:"reflect-deleteproperty",tabindex:"-1"},J={class:"header-anchor",href:"#reflect-deleteproperty"},W={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty",target:"_blank",rel:"noopener noreferrer"},B=o("<ul><li>描述：用于删除属性，很像 <code>delete</code> 操作符，但它是一个函数</li><li>语法：<code>Reflect.deleteProperty(target, propertyKey)</code></li><li>参数 <ul><li>target：目标对象</li><li>propertyKey：需要删除的属性的名称</li></ul></li><li>返回值：Boolean 值表明该属性是否被成功删除</li><li>注意：如果目标类型不是 Object，则抛出一个 TypeError</li></ul><br>",2),G={id:"reflect-apply",tabindex:"-1"},L={class:"header-anchor",href:"#reflect-apply"},V={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply",target:"_blank",rel:"noopener noreferrer"},M=o("<ul><li>描述：通过指定的参数列表发起对目标(target)函数的调用</li><li>语法：<code>Reflect.apply(target, thisArgument, argumentsList)</code></li><li>参数 <ul><li>target：目标对象</li><li>thisArgument：target 函数调用时绑定的this对象</li><li>argumentsList：target 函数调用时传入的实参列表，该参数应该是一个类数组的对象</li></ul></li><li>返回值：调用完带着指定参数和 this 值的给定的函数后返回的结果</li><li>注意：如果 target 对象不可调用，抛出 TypeError</li></ul><br>",2),A={id:"reflect-construct",tabindex:"-1"},q={class:"header-anchor",href:"#reflect-construct"},D={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct",target:"_blank",rel:"noopener noreferrer"},I=e("li",null,[t("描述：行为有点像 "),e("code",null,"new"),t(" 操作符 构造函数 ， 相当于运行 "),e("code",null,"new target(...args)")],-1),Y=e("li",null,[t("语法："),e("code",null,"Reflect.construct(target, argumentsList[, newTarget])")],-1),Z=e("li",null,"target：被运行的目标构造函数",-1),U=e("li",null,"argumentsList：target 函数调用时传入的实参列表，该参数应该是一个类数组的对象",-1),F={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target",target:"_blank",rel:"noopener noreferrer"},H=e("li",null,"返回值：以 target（如果newTarget存在，则为newTarget）函数为构造函数，argumentList 为其初始化参数的对象实例",-1),Q=e("li",null,"注意：如果 target 或者 newTarget 不是构造函数，抛出 TypeError 异常",-1);function X($,ee){const l=i("ExternalLinkIcon");return n(),a("div",null,[s(" more "),e("p",null,[e("a",p,[t("Reflect"),r(l)])]),f,e("h2",h,[e("a",_,[e("span",null,[e("a",u,[t("Reflect.get()"),r(l)])])])]),g,e("h2",b,[e("a",y,[e("span",null,[e("a",R,[t("Reflect.set()"),r(l)])])])]),m,e("h2",v,[e("a",j,[e("span",null,[e("a",O,[t("Reflect.has()"),r(l)])])])]),k,e("h2",z,[e("a",x,[e("span",null,[e("a",w,[t("Reflect.ownKeys()"),r(l)])])])]),T,N,e("h2",K,[e("a",P,[e("span",null,[e("a",C,[t("Reflect.defineProperty()"),r(l)])])])]),S,e("h2",E,[e("a",J,[e("span",null,[e("a",W,[t("Reflect.deleteProperty()"),r(l)])])])]),B,e("h2",G,[e("a",L,[e("span",null,[e("a",V,[t("Reflect.apply()"),r(l)])])])]),M,e("h2",A,[e("a",q,[e("span",null,[e("a",D,[t("Reflect.construct()"),r(l)])])])]),e("ul",null,[I,Y,e("li",null,[t("参数 "),e("ul",null,[Z,U,e("li",null,[t("newTarget：作为新创建对象的原型对象的 constructor 属性， 参考 -"),e("a",F,[t("new.target"),r(l)]),t(" 操作符，默认值为 target")])])]),H,Q])])}const re=c(d,[["render",X],["__file","17.Reflect.html.vue"]]),oe=JSON.parse(`{"path":"/notes/javascript/built-in-objects/17.Reflect.html","title":"Reflect","lang":"zh-CN","frontmatter":{"title":"Reflect","icon":"article","article":false,"sticky":20,"breadcrumb":false,"description":"Reflect 概述 Reflect 不是一个函数对象，因此它是不可构造的 所有属性和方法都是静态的，就像 Math 对象 作用 将 Object 属于语言内部的方法放到 Reflect 上 修改某些 Object 方法的返回结果，让其变得更合理 让 Object 操作变成函数行为 Reflect 对象的方法与 Proxy 对象的方法一一对应 Refl...","head":[["meta",{"property":"og:url","content":"https://codemake.fun/notes/javascript/built-in-objects/17.Reflect.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"Reflect"}],["meta",{"property":"og:description","content":"Reflect 概述 Reflect 不是一个函数对象，因此它是不可构造的 所有属性和方法都是静态的，就像 Math 对象 作用 将 Object 属于语言内部的方法放到 Reflect 上 修改某些 Object 方法的返回结果，让其变得更合理 让 Object 操作变成函数行为 Reflect 对象的方法与 Proxy 对象的方法一一对应 Refl..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Reflect\\",\\"description\\":\\"Reflect 概述 Reflect 不是一个函数对象，因此它是不可构造的 所有属性和方法都是静态的，就像 Math 对象 作用 将 Object 属于语言内部的方法放到 Reflect 上 修改某些 Object 方法的返回结果，让其变得更合理 让 Object 操作变成函数行为 Reflect 对象的方法与 Proxy 对象的方法一一对应 Refl...\\"}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Reflect.get()","slug":"reflect-get","link":"#reflect-get","children":[]},{"level":2,"title":"Reflect.set()","slug":"reflect-set","link":"#reflect-set","children":[]},{"level":2,"title":"Reflect.has()","slug":"reflect-has","link":"#reflect-has","children":[]},{"level":2,"title":"Reflect.ownKeys()","slug":"reflect-ownkeys","link":"#reflect-ownkeys","children":[]},{"level":2,"title":"Reflect.defineProperty()","slug":"reflect-defineproperty","link":"#reflect-defineproperty","children":[]},{"level":2,"title":"Reflect.deleteProperty()","slug":"reflect-deleteproperty","link":"#reflect-deleteproperty","children":[]},{"level":2,"title":"Reflect.apply()","slug":"reflect-apply","link":"#reflect-apply","children":[]},{"level":2,"title":"Reflect.construct()","slug":"reflect-construct","link":"#reflect-construct","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":3.14,"words":942},"filePathRelative":"notes/javascript/built-in-objects/17.Reflect.md","localizedDate":"2023年1月11日","excerpt":"","autoDesc":true}`);export{re as comp,oe as data};
