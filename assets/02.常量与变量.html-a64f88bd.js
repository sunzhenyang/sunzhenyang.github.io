import{_ as d,P as i,Q as s,Z as l,$ as a,a0 as t,a1 as r,a2 as e,C as o}from"./framework-f3782457.js";const c={},u=e('<h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h3><h4 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则" aria-hidden="true">#</a> 命名规则</h4><ul><li>可以由字母、数字、下划线和美元符($)组成</li><li>不能以数字开头</li><li>严格区分大小写</li><li>不能是 Java 关键字和保留字(goto、const)</li><li>不能包含空格</li><li>命名最好有意义，能反映出其作用</li></ul><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20201215142107826.png" alt="image-20201215142107826" tabindex="0" loading="lazy"><figcaption>image-20201215142107826</figcaption></figure><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h4><ul><li><p>基本数据类型</p><ul><li>数值型 <ul><li>整数类型 <ul><li>byte</li><li>short</li><li>int</li><li>long：以大写的或小写的（L/l）结尾，未加 L 被视为 int</li></ul></li><li>浮点类型 <ul><li>float：以大写的或小写的（F/f）结尾</li><li>double</li></ul></li></ul></li><li>字符型(char)</li><li>布尔型(boolean)</li></ul></li><li><p>引用数据类型</p><ul><li><p>字符串(String)</p></li><li><p>类(class)</p></li><li><p>接口(interface)</p></li><li><p>数组</p></li></ul></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317115821602.png" alt="image-20210317115821602" tabindex="0" loading="lazy"><figcaption>image-20210317115821602</figcaption></figure><h4 id="字节占用" tabindex="-1"><a class="header-anchor" href="#字节占用" aria-hidden="true">#</a> 字节占用</h4><table><thead><tr><th>数据类型</th><th>说明</th><th>字节</th><th>位</th><th>最小范围</th><th>最大范围</th></tr></thead><tbody><tr><td>byte</td><td>字节型</td><td>1</td><td>8</td><td>-2^7</td><td>2^7-1</td></tr><tr><td>short</td><td>短整型</td><td>2</td><td>16</td><td>-2^15</td><td>2^15-1</td></tr><tr><td>int</td><td>整型</td><td>4</td><td>32</td><td>-2^31</td><td>2^31-1</td></tr><tr><td>long</td><td>长整型</td><td>8</td><td>64</td><td>-2^63</td><td>2^63-1</td></tr><tr><td>float</td><td>单精度浮点型</td><td>4</td><td>32</td><td>-3.40E+38</td><td>3.40E+38</td></tr><tr><td>double</td><td>双精度浮点型位有效数字）</td><td>8</td><td>64</td><td>-1.79E+308</td><td>1.79E+308</td></tr><tr><td>char</td><td>字符型</td><td>2</td><td>16</td><td>0</td><td>65535</td></tr><tr><td>boolean</td><td>布尔型</td><td>1</td><td>8</td><td></td><td></td></tr></tbody></table><h4 id="字面值" tabindex="-1"><a class="header-anchor" href="#字面值" aria-hidden="true">#</a> 字面值</h4>',12),p=e("<li>整型字面值 <ul><li>二进制(BIN)</li><li>十进制(DEC)</li><li>八进制(OCT)：以 0 开头，包括 0-7 的数字(例：037、056)</li><li>十六进制(HEX)：以 0x 或 0X 开头，包括 0-9 的数字，及字母 a-f(例：0x12、0xabcf) <ul><li>也可以是 A-F，a 表示数字 10，以此类推</li><li>后面加 <code>L</code> 表示长整型数据</li></ul></li></ul></li><li>浮点型字面值 <ul><li>float 类型需要在字面值后加 <code>f</code> 或 <code>F</code></li><li>默认情况下表示 double 类型，也可在字面值后加 <code>d</code> 或 <code>D</code></li></ul></li>",2),h=a("li",null,"用单引号内的单个字符表示('a'、'b'、'c'、'$')",-1),g={href:"https://baike.baidu.com/item/ASCII",target:"_blank",rel:"noopener noreferrer"},b=a("ul",null,[a("li",null,"如果字面值超出 char 类型所表示的数值范围，需要进行强制类型转换")],-1),m=a("li",null,[t("布尔型字面值 "),a("ul",null,[a("li",null,"true"),a("li",null,"false")])],-1),k=a("li",null,[t("字符串字面值 "),a("ul",null,[a("li",null,"双引号引起来的 0 个或多个字符")])],-1),v=e(`<h4 id="基本数据类型变量的存储" tabindex="-1"><a class="header-anchor" href="#基本数据类型变量的存储" aria-hidden="true">#</a> 基本数据类型变量的存储</h4><ul><li>按作用范围分类 <ul><li>类级</li><li>对象实例级</li><li>方法级(局部变量) <ul><li>存储在 <strong>栈</strong> 中</li></ul></li><li>块级</li></ul></li></ul><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><h4 id="自动-隐式-类型转换" tabindex="-1"><a class="header-anchor" href="#自动-隐式-类型转换" aria-hidden="true">#</a> 自动(隐式)类型转换</h4><blockquote><p>下图箭头相反方向均需要强制类型转换</p></blockquote><ul><li><code>byte</code>、<code>short</code>、<code>char</code> 三种类型变量之间随意组合做运算，结果均为 <code>int</code> 类型</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20201215161030045.png" alt="image-20201215161030045" tabindex="0" loading="lazy"><figcaption>image-20201215161030045</figcaption></figure><h4 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h4><blockquote><p>如果 A 类型的数据表示范围比 B 类型大，则将 A 类型的值赋值给 B 类型，需要强制类型转换</p></blockquote><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><ul><li>变量没有默认值，只初始化之前使用会报错</li><li>同一个作用域内不可声明两个同名变量</li></ul><h4 id="命名规则-1" tabindex="-1"><a class="header-anchor" href="#命名规则-1" aria-hidden="true">#</a> 命名规则</h4><ul><li>满足标识符命名规则</li><li>符合驼峰命名法规范</li><li>尽量简单，做到见名知意</li><li>长度没有限制</li></ul><h4 id="类的命名规则" tabindex="-1"><a class="header-anchor" href="#类的命名规则" aria-hidden="true">#</a> 类的命名规则</h4><ul><li>满足 Pascal 命名规则（首字母总是要大写）</li></ul><h4 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量" aria-hidden="true">#</a> 定义变量</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义 byte 类型数据</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">// 定义整型变量</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">// 定义短整型变量</span>
<span class="token keyword">short</span> shortNumber <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

<span class="token comment">// 定义长整型变量</span>
<span class="token keyword">long</span> longNumber <span class="token operator">=</span> <span class="token number">0</span>x2cdf3ffL<span class="token punctuation">;</span>

<span class="token comment">// 定义字符型变量</span>
<span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义字符串变量</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义布尔值变量</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h3><ul><li>名称全部用大写字母</li><li>多个单词中间用下划线链接</li><li>一旦定义，不可改变</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><ul><li><code>String</code>：具有不可变性 <ul><li>对象一旦被创建，则不能修改，是不可变的</li><li>所谓修改们其实是创建了新的对象，所指向的内存空间不变</li></ul></li><li><code>StringBuilder</code>：可变，当频繁操作字符串时，建议使用</li><li><code>StringBuffer</code>：和 <code>StringBuilder</code> 基本一致，<code>StringBuffer</code> 是线程安全的，<code>StringBuilder</code> 则没有，所以 <code>StringBuilder</code> 性能略高</li></ul><h4 id="创建方法" tabindex="-1"><a class="header-anchor" href="#创建方法" aria-hidden="true">#</a> 创建方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;imooc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;imooc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/sunzhenyang/blog-img/img/image-20210317222221814.png" alt="image-20210317222221814" tabindex="0" loading="lazy"><figcaption>image-20210317222221814</figcaption></figure><h4 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int <code>length()</code></td><td>返回当前字符串的长度</td></tr><tr><td>int <code>indexOf(int ch)</code></td><td>查找 ch 字符在该字符串中第一次出现的位置</td></tr><tr><td>int <code>indexOf(String str)</code></td><td>查找 str 子字符串在该字符串中第一次出现的位置</td></tr><tr><td>int <code>lastIndexOf(int ch)</code></td><td>朝招 ch 字符在该字符串中最后一次出现的位置</td></tr><tr><td>int <code>lastIndexOf(String str)</code></td><td>查找 str 子字符串在该字符串中最后一次出现的位置</td></tr><tr><td>String <code>substring(int beginIndex)</code></td><td>获取从 beginIndex 位置开始到结束的子字符串</td></tr><tr><td>String <code>substring(int beginIndex, int endIndex)</code></td><td>获取从 beginIndex 位置开始到 endIndex 位置的子字符串（不包括 endIndex 位置字符串）</td></tr><tr><td>String <code>trim()</code></td><td>返回去除了前后空格的字符串</td></tr><tr><td>boolean <code>equals(Object obj)</code></td><td>将该字符串与指定对象比较，返回 true 或 false</td></tr><tr><td>String <code>toLowerCase()</code></td><td>将字符串转换为小写</td></tr><tr><td>String <code>toUpperCase()</code></td><td>将字符串转换为大写</td></tr><tr><td>char <code>charAt(int index)</code></td><td>获取字符串中指定位置的字符</td></tr><tr><td>String[] <code>split(String regex, int limit)</code></td><td>将字符串分割为子字符串，返回字符串数组</td></tr><tr><td>byte[] <code>getBytes()</code></td><td>将该字符串转换为 byte 数组</td></tr></tbody></table><h4 id="equals-和-的区别" tabindex="-1"><a class="header-anchor" href="#equals-和-的区别" aria-hidden="true">#</a> <code>equals</code> 和 <code>==</code> 的区别</h4><ul><li><code>equals</code> 是判断两个变量或者实例指向同一个内存空间的值是不是相同 <ul><li>常用于 <code>String</code> 类型数据比较</li><li>两个对象是否在意义上相等</li></ul></li><li><code>==</code><ul><li>对于基本数据类型而言，<code>==</code> 比较的是变量里存储的值</li><li>对于引用数据类型而言，<code>==</code> 比较的是对象的内存地址（<code>String</code> 为引用类型）</li></ul></li></ul>`,29);function f(x,_){const n=o("ExternalLinkIcon");return i(),s("div",null,[l(" more "),u,a("ul",null,[p,a("li",null,[t("字符型字面值 "),a("ul",null,[h,a("li",null,[t("值可以是 "),a("a",g,[t("ASCLL"),r(n)]),t(" 的编号 "),b])])]),m,k]),v])}const S=d(c,[["render",f],["__file","02.常量与变量.html.vue"]]);export{S as default};
