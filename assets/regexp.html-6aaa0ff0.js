const e=JSON.parse(`{"key":"v-272a670a","path":"/technology/javascript/stdlib/regexp.html","title":"RegExp 对象","lang":"zh-CN","frontmatter":{"title":"RegExp 对象","icon":"article","category":"javascript","article":false,"tag":["javascript"],"copyright":"Copyright by 阮一峰","description":"RegExp对象提供正则表达式的功能。 概述 正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。 新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。 var regex = /xyz/;","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/javascript/stdlib/regexp.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"RegExp 对象"}],["meta",{"property":"og:description","content":"RegExp对象提供正则表达式的功能。 概述 正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。 新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。 var regex = /xyz/;"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:author","content":"Yang"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"RegExp 对象\\",\\"description\\":\\"RegExp对象提供正则表达式的功能。 概述 正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。 新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。 var regex = /xyz/;\\"}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"RegExp.prototype.test()","slug":"regexp-prototype-test","link":"#regexp-prototype-test","children":[]},{"level":3,"title":"RegExp.prototype.exec()","slug":"regexp-prototype-exec","link":"#regexp-prototype-exec","children":[]}]},{"level":2,"title":"字符串的实例方法","slug":"字符串的实例方法","link":"#字符串的实例方法","children":[{"level":3,"title":"String.prototype.match()","slug":"string-prototype-match","link":"#string-prototype-match","children":[]},{"level":3,"title":"String.prototype.search()","slug":"string-prototype-search","link":"#string-prototype-search","children":[]},{"level":3,"title":"String.prototype.replace()","slug":"string-prototype-replace","link":"#string-prototype-replace","children":[]},{"level":3,"title":"String.prototype.split()","slug":"string-prototype-split","link":"#string-prototype-split","children":[]}]},{"level":2,"title":"匹配规则","slug":"匹配规则","link":"#匹配规则","children":[{"level":3,"title":"字面量字符和元字符","slug":"字面量字符和元字符","link":"#字面量字符和元字符","children":[]},{"level":3,"title":"转义符","slug":"转义符","link":"#转义符","children":[]},{"level":3,"title":"特殊字符","slug":"特殊字符","link":"#特殊字符","children":[]},{"level":3,"title":"字符类","slug":"字符类","link":"#字符类","children":[]},{"level":3,"title":"预定义模式","slug":"预定义模式","link":"#预定义模式","children":[]},{"level":3,"title":"重复类","slug":"重复类","link":"#重复类","children":[]},{"level":3,"title":"量词符","slug":"量词符","link":"#量词符","children":[]},{"level":3,"title":"贪婪模式","slug":"贪婪模式","link":"#贪婪模式","children":[]},{"level":3,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":3,"title":"组匹配","slug":"组匹配","link":"#组匹配","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":27.05,"words":8115},"filePathRelative":"technology/javascript/stdlib/regexp.md","localizedDate":"2023年1月11日","excerpt":"<p><code>RegExp</code>对象提供正则表达式的功能。</p>\\n<h2> 概述</h2>\\n<p>正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。</p>\\n<p>新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> regex <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">xyz</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
