const t=JSON.parse(`{"key":"v-11cc126e","path":"/technology/javascript/oop/prototype.html","title":"对象的继承","lang":"zh-CN","frontmatter":{"title":"对象的继承","icon":"article","category":"javascript","article":false,"tag":["javascript"],"copyright":"Copyright by 阮一峰","description":"面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。 大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，JavaScript 语言的继承不通过 class，而是通过“原型对象”（prototype）实现，本章介绍 JavaScript 的原型链继承。 ES6 引入了 class 语法，基于 class 的继承不在这个教程介绍，请参阅《ES6 标准入门》一书的相关章节。 原型对象概述 构造函数的缺点","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/javascript/oop/prototype.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"对象的继承"}],["meta",{"property":"og:description","content":"面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。 大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，JavaScript 语言的继承不通过 class，而是通过“原型对象”（prototype）实现，本章介绍 JavaScript 的原型链继承。 ES6 引入了 class 语法，基于 class 的继承不在这个教程介绍，请参阅《ES6 标准入门》一书的相关章节。 原型对象概述 构造函数的缺点"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"对象的继承\\",\\"description\\":\\"面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。 大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，JavaScript 语言的继承不通过 class，而是通过“原型对象”（prototype）实现，本章介绍 JavaScript 的原型链继承。 ES6 引入了 class 语法，基于 class 的继承不在这个教程介绍，请参阅《ES6 标准入门》一书的相关章节。 原型对象概述 构造函数的缺点\\"}"]]},"headers":[{"level":2,"title":"原型对象概述","slug":"原型对象概述","link":"#原型对象概述","children":[{"level":3,"title":"构造函数的缺点","slug":"构造函数的缺点","link":"#构造函数的缺点","children":[]},{"level":3,"title":"prototype 属性的作用","slug":"prototype-属性的作用","link":"#prototype-属性的作用","children":[]},{"level":3,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":3,"title":"constructor 属性","slug":"constructor-属性","link":"#constructor-属性","children":[]}]},{"level":2,"title":"instanceof 运算符","slug":"instanceof-运算符","link":"#instanceof-运算符","children":[]},{"level":2,"title":"构造函数的继承","slug":"构造函数的继承","link":"#构造函数的继承","children":[]},{"level":2,"title":"多重继承","slug":"多重继承","link":"#多重继承","children":[]},{"level":2,"title":"模块","slug":"模块","link":"#模块","children":[{"level":3,"title":"基本的实现方法","slug":"基本的实现方法","link":"#基本的实现方法","children":[]},{"level":3,"title":"封装私有变量：构造函数的写法","slug":"封装私有变量-构造函数的写法","link":"#封装私有变量-构造函数的写法","children":[]},{"level":3,"title":"封装私有变量：立即执行函数的写法","slug":"封装私有变量-立即执行函数的写法","link":"#封装私有变量-立即执行函数的写法","children":[]},{"level":3,"title":"模块的放大模式","slug":"模块的放大模式","link":"#模块的放大模式","children":[]},{"level":3,"title":"输入全局变量","slug":"输入全局变量","link":"#输入全局变量","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":16.68,"words":5003},"filePathRelative":"technology/javascript/oop/prototype.md","localizedDate":"2023年1月11日","excerpt":"<p>面向对象编程很重要的一个方面，就是对象的继承。A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法。这对于代码的复用是非常有用的。</p>\\n<p>大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，JavaScript 语言的继承不通过 class，而是通过“原型对象”（prototype）实现，本章介绍 JavaScript 的原型链继承。</p>\\n<p>ES6 引入了 class 语法，基于 class 的继承不在这个教程介绍，请参阅《ES6 标准入门》一书的相关章节。</p>\\n<h2> 原型对象概述</h2>\\n<h3> 构造函数的缺点</h3>","autoDesc":true}`);export{t as data};
