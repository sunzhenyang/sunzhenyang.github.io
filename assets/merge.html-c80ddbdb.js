const e=JSON.parse(`{"key":"v-5011e6d6","path":"/technology/ts_axios/chapter8/merge.html","title":"合并配置的设计与实现","lang":"zh-CN","frontmatter":{"title":"合并配置的设计与实现","icon":"article","category":["typescript"],"article":false,"tag":["typescript"],"copyright":"Copyright by ustbhuangyi","description":"需求分析 在之前的章节我们了解到，在发送请求的时候可以传入一个配置，来决定请求的不同行为。我们也希望 ts-axios 可以有默认配置，定义一些默认的行为。这样在发送每个请求，用户传递的配置可以和默认配置做一层合并。 和官网 axios 库保持一致，我们给 axios 对象添加一个 defaults 属性，表示默认配置，你甚至可以直接修改这些默认配置： axios.defaults.headers.common['test'] = 123 axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded' axios.defaults.timeout = 2000","head":[["meta",{"property":"og:url","content":"https://codemake.fun/technology/ts_axios/chapter8/merge.html"}],["meta",{"property":"og:site_name","content":"Yang's Blog"}],["meta",{"property":"og:title","content":"合并配置的设计与实现"}],["meta",{"property":"og:description","content":"需求分析 在之前的章节我们了解到，在发送请求的时候可以传入一个配置，来决定请求的不同行为。我们也希望 ts-axios 可以有默认配置，定义一些默认的行为。这样在发送每个请求，用户传递的配置可以和默认配置做一层合并。 和官网 axios 库保持一致，我们给 axios 对象添加一个 defaults 属性，表示默认配置，你甚至可以直接修改这些默认配置： axios.defaults.headers.common['test'] = 123 axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded' axios.defaults.timeout = 2000"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-11T09:12:15.000Z"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:modified_time","content":"2023-01-11T09:12:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"合并配置的设计与实现\\",\\"description\\":\\"需求分析 在之前的章节我们了解到，在发送请求的时候可以传入一个配置，来决定请求的不同行为。我们也希望 ts-axios 可以有默认配置，定义一些默认的行为。这样在发送每个请求，用户传递的配置可以和默认配置做一层合并。 和官网 axios 库保持一致，我们给 axios 对象添加一个 defaults 属性，表示默认配置，你甚至可以直接修改这些默认配置： axios.defaults.headers.common['test'] = 123 axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded' axios.defaults.timeout = 2000\\"}"]]},"headers":[{"level":2,"title":"需求分析","slug":"需求分析","link":"#需求分析","children":[]},{"level":2,"title":"默认配置","slug":"默认配置","link":"#默认配置","children":[{"level":3,"title":"默认配置定义","slug":"默认配置定义","link":"#默认配置定义","children":[]},{"level":3,"title":"添加到 axios 对象中","slug":"添加到-axios-对象中","link":"#添加到-axios-对象中","children":[]}]},{"level":2,"title":"配置合并及策略","slug":"配置合并及策略","link":"#配置合并及策略","children":[{"level":3,"title":"合并方法","slug":"合并方法","link":"#合并方法","children":[]},{"level":3,"title":"默认合并策略","slug":"默认合并策略","link":"#默认合并策略","children":[]},{"level":3,"title":"只接受自定义配置合并策略","slug":"只接受自定义配置合并策略","link":"#只接受自定义配置合并策略","children":[]},{"level":3,"title":"复杂对象合并策略","slug":"复杂对象合并策略","link":"#复杂对象合并策略","children":[]}]},{"level":2,"title":"flatten headers","slug":"flatten-headers","link":"#flatten-headers","children":[]},{"level":2,"title":"demo 编写","slug":"demo-编写","link":"#demo-编写","children":[]}],"git":{"createdTime":1673428335000,"updatedTime":1673428335000,"contributors":[{"name":"sunzhenyang","email":"874530670@qq.com","commits":1}]},"readingTime":{"minutes":6.41,"words":1923},"filePathRelative":"technology/ts_axios/chapter8/merge.md","localizedDate":"2023年1月11日","excerpt":"<h2> 需求分析</h2>\\n<p>在之前的章节我们了解到，在发送请求的时候可以传入一个配置，来决定请求的不同行为。我们也希望 <code>ts-axios</code> 可以有默认配置，定义一些默认的行为。这样在发送每个请求，用户传递的配置可以和默认配置做一层合并。</p>\\n<p>和官网 <code>axios</code> 库保持一致，我们给 <code>axios</code> 对象添加一个 <code>defaults</code> 属性，表示默认配置，你甚至可以直接修改这些默认配置：</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code>axios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>common<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'test'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">123</span>\\naxios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>post<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Content-Type'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'application/x-www-form-urlencoded'</span>\\naxios<span class=\\"token punctuation\\">.</span>defaults<span class=\\"token punctuation\\">.</span>timeout <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2000</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
